
NUCLEO-L010RB_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b30  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bcc  08009bf0  08009bf0  00019bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7bc  0800a7bc  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  0800a7bc  0800a7bc  0001a7bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a7c4  0800a7c4  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7c4  0800a7c4  0001a7c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a7c8  0800a7c8  0001a7c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800a7cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000027d0  20000098  0800a864  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002868  0800a864  00022868  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cb25  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042bd  00000000  00000000  0003cbe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001838  00000000  00000000  00040ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001630  00000000  00000000  000426e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005798  00000000  00000000  00043d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bbe6  00000000  00000000  000494a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ef6c  00000000  00000000  0006508e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e3ffa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e68  00000000  00000000  000e404c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000098 	.word	0x20000098
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009bd8 	.word	0x08009bd8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000009c 	.word	0x2000009c
 8000104:	08009bd8 	.word	0x08009bd8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f852 	bl	80002f8 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__aeabi_d2uiz>:
 80002bc:	b570      	push	{r4, r5, r6, lr}
 80002be:	2200      	movs	r2, #0
 80002c0:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <__aeabi_d2uiz+0x38>)
 80002c2:	0004      	movs	r4, r0
 80002c4:	000d      	movs	r5, r1
 80002c6:	f001 f805 	bl	80012d4 <__aeabi_dcmpge>
 80002ca:	2800      	cmp	r0, #0
 80002cc:	d104      	bne.n	80002d8 <__aeabi_d2uiz+0x1c>
 80002ce:	0020      	movs	r0, r4
 80002d0:	0029      	movs	r1, r5
 80002d2:	f000 ff65 	bl	80011a0 <__aeabi_d2iz>
 80002d6:	bd70      	pop	{r4, r5, r6, pc}
 80002d8:	4b06      	ldr	r3, [pc, #24]	; (80002f4 <__aeabi_d2uiz+0x38>)
 80002da:	2200      	movs	r2, #0
 80002dc:	0020      	movs	r0, r4
 80002de:	0029      	movs	r1, r5
 80002e0:	f000 fbcc 	bl	8000a7c <__aeabi_dsub>
 80002e4:	f000 ff5c 	bl	80011a0 <__aeabi_d2iz>
 80002e8:	2380      	movs	r3, #128	; 0x80
 80002ea:	061b      	lsls	r3, r3, #24
 80002ec:	469c      	mov	ip, r3
 80002ee:	4460      	add	r0, ip
 80002f0:	e7f1      	b.n	80002d6 <__aeabi_d2uiz+0x1a>
 80002f2:	46c0      	nop			; (mov r8, r8)
 80002f4:	41e00000 	.word	0x41e00000

080002f8 <__udivmoddi4>:
 80002f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002fa:	4657      	mov	r7, sl
 80002fc:	464e      	mov	r6, r9
 80002fe:	4645      	mov	r5, r8
 8000300:	46de      	mov	lr, fp
 8000302:	b5e0      	push	{r5, r6, r7, lr}
 8000304:	0004      	movs	r4, r0
 8000306:	000d      	movs	r5, r1
 8000308:	4692      	mov	sl, r2
 800030a:	4699      	mov	r9, r3
 800030c:	b083      	sub	sp, #12
 800030e:	428b      	cmp	r3, r1
 8000310:	d830      	bhi.n	8000374 <__udivmoddi4+0x7c>
 8000312:	d02d      	beq.n	8000370 <__udivmoddi4+0x78>
 8000314:	4649      	mov	r1, r9
 8000316:	4650      	mov	r0, sl
 8000318:	f001 f804 	bl	8001324 <__clzdi2>
 800031c:	0029      	movs	r1, r5
 800031e:	0006      	movs	r6, r0
 8000320:	0020      	movs	r0, r4
 8000322:	f000 ffff 	bl	8001324 <__clzdi2>
 8000326:	1a33      	subs	r3, r6, r0
 8000328:	4698      	mov	r8, r3
 800032a:	3b20      	subs	r3, #32
 800032c:	469b      	mov	fp, r3
 800032e:	d433      	bmi.n	8000398 <__udivmoddi4+0xa0>
 8000330:	465a      	mov	r2, fp
 8000332:	4653      	mov	r3, sl
 8000334:	4093      	lsls	r3, r2
 8000336:	4642      	mov	r2, r8
 8000338:	001f      	movs	r7, r3
 800033a:	4653      	mov	r3, sl
 800033c:	4093      	lsls	r3, r2
 800033e:	001e      	movs	r6, r3
 8000340:	42af      	cmp	r7, r5
 8000342:	d83a      	bhi.n	80003ba <__udivmoddi4+0xc2>
 8000344:	42af      	cmp	r7, r5
 8000346:	d100      	bne.n	800034a <__udivmoddi4+0x52>
 8000348:	e078      	b.n	800043c <__udivmoddi4+0x144>
 800034a:	465b      	mov	r3, fp
 800034c:	1ba4      	subs	r4, r4, r6
 800034e:	41bd      	sbcs	r5, r7
 8000350:	2b00      	cmp	r3, #0
 8000352:	da00      	bge.n	8000356 <__udivmoddi4+0x5e>
 8000354:	e075      	b.n	8000442 <__udivmoddi4+0x14a>
 8000356:	2200      	movs	r2, #0
 8000358:	2300      	movs	r3, #0
 800035a:	9200      	str	r2, [sp, #0]
 800035c:	9301      	str	r3, [sp, #4]
 800035e:	2301      	movs	r3, #1
 8000360:	465a      	mov	r2, fp
 8000362:	4093      	lsls	r3, r2
 8000364:	9301      	str	r3, [sp, #4]
 8000366:	2301      	movs	r3, #1
 8000368:	4642      	mov	r2, r8
 800036a:	4093      	lsls	r3, r2
 800036c:	9300      	str	r3, [sp, #0]
 800036e:	e028      	b.n	80003c2 <__udivmoddi4+0xca>
 8000370:	4282      	cmp	r2, r0
 8000372:	d9cf      	bls.n	8000314 <__udivmoddi4+0x1c>
 8000374:	2200      	movs	r2, #0
 8000376:	2300      	movs	r3, #0
 8000378:	9200      	str	r2, [sp, #0]
 800037a:	9301      	str	r3, [sp, #4]
 800037c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <__udivmoddi4+0x8e>
 8000382:	601c      	str	r4, [r3, #0]
 8000384:	605d      	str	r5, [r3, #4]
 8000386:	9800      	ldr	r0, [sp, #0]
 8000388:	9901      	ldr	r1, [sp, #4]
 800038a:	b003      	add	sp, #12
 800038c:	bcf0      	pop	{r4, r5, r6, r7}
 800038e:	46bb      	mov	fp, r7
 8000390:	46b2      	mov	sl, r6
 8000392:	46a9      	mov	r9, r5
 8000394:	46a0      	mov	r8, r4
 8000396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000398:	4642      	mov	r2, r8
 800039a:	2320      	movs	r3, #32
 800039c:	1a9b      	subs	r3, r3, r2
 800039e:	4652      	mov	r2, sl
 80003a0:	40da      	lsrs	r2, r3
 80003a2:	4641      	mov	r1, r8
 80003a4:	0013      	movs	r3, r2
 80003a6:	464a      	mov	r2, r9
 80003a8:	408a      	lsls	r2, r1
 80003aa:	0017      	movs	r7, r2
 80003ac:	4642      	mov	r2, r8
 80003ae:	431f      	orrs	r7, r3
 80003b0:	4653      	mov	r3, sl
 80003b2:	4093      	lsls	r3, r2
 80003b4:	001e      	movs	r6, r3
 80003b6:	42af      	cmp	r7, r5
 80003b8:	d9c4      	bls.n	8000344 <__udivmoddi4+0x4c>
 80003ba:	2200      	movs	r2, #0
 80003bc:	2300      	movs	r3, #0
 80003be:	9200      	str	r2, [sp, #0]
 80003c0:	9301      	str	r3, [sp, #4]
 80003c2:	4643      	mov	r3, r8
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d0d9      	beq.n	800037c <__udivmoddi4+0x84>
 80003c8:	07fb      	lsls	r3, r7, #31
 80003ca:	0872      	lsrs	r2, r6, #1
 80003cc:	431a      	orrs	r2, r3
 80003ce:	4646      	mov	r6, r8
 80003d0:	087b      	lsrs	r3, r7, #1
 80003d2:	e00e      	b.n	80003f2 <__udivmoddi4+0xfa>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d101      	bne.n	80003dc <__udivmoddi4+0xe4>
 80003d8:	42a2      	cmp	r2, r4
 80003da:	d80c      	bhi.n	80003f6 <__udivmoddi4+0xfe>
 80003dc:	1aa4      	subs	r4, r4, r2
 80003de:	419d      	sbcs	r5, r3
 80003e0:	2001      	movs	r0, #1
 80003e2:	1924      	adds	r4, r4, r4
 80003e4:	416d      	adcs	r5, r5
 80003e6:	2100      	movs	r1, #0
 80003e8:	3e01      	subs	r6, #1
 80003ea:	1824      	adds	r4, r4, r0
 80003ec:	414d      	adcs	r5, r1
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	d006      	beq.n	8000400 <__udivmoddi4+0x108>
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d9ee      	bls.n	80003d4 <__udivmoddi4+0xdc>
 80003f6:	3e01      	subs	r6, #1
 80003f8:	1924      	adds	r4, r4, r4
 80003fa:	416d      	adcs	r5, r5
 80003fc:	2e00      	cmp	r6, #0
 80003fe:	d1f8      	bne.n	80003f2 <__udivmoddi4+0xfa>
 8000400:	9800      	ldr	r0, [sp, #0]
 8000402:	9901      	ldr	r1, [sp, #4]
 8000404:	465b      	mov	r3, fp
 8000406:	1900      	adds	r0, r0, r4
 8000408:	4169      	adcs	r1, r5
 800040a:	2b00      	cmp	r3, #0
 800040c:	db24      	blt.n	8000458 <__udivmoddi4+0x160>
 800040e:	002b      	movs	r3, r5
 8000410:	465a      	mov	r2, fp
 8000412:	4644      	mov	r4, r8
 8000414:	40d3      	lsrs	r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	40e2      	lsrs	r2, r4
 800041a:	001c      	movs	r4, r3
 800041c:	465b      	mov	r3, fp
 800041e:	0015      	movs	r5, r2
 8000420:	2b00      	cmp	r3, #0
 8000422:	db2a      	blt.n	800047a <__udivmoddi4+0x182>
 8000424:	0026      	movs	r6, r4
 8000426:	409e      	lsls	r6, r3
 8000428:	0033      	movs	r3, r6
 800042a:	0026      	movs	r6, r4
 800042c:	4647      	mov	r7, r8
 800042e:	40be      	lsls	r6, r7
 8000430:	0032      	movs	r2, r6
 8000432:	1a80      	subs	r0, r0, r2
 8000434:	4199      	sbcs	r1, r3
 8000436:	9000      	str	r0, [sp, #0]
 8000438:	9101      	str	r1, [sp, #4]
 800043a:	e79f      	b.n	800037c <__udivmoddi4+0x84>
 800043c:	42a3      	cmp	r3, r4
 800043e:	d8bc      	bhi.n	80003ba <__udivmoddi4+0xc2>
 8000440:	e783      	b.n	800034a <__udivmoddi4+0x52>
 8000442:	4642      	mov	r2, r8
 8000444:	2320      	movs	r3, #32
 8000446:	2100      	movs	r1, #0
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	2200      	movs	r2, #0
 800044c:	9100      	str	r1, [sp, #0]
 800044e:	9201      	str	r2, [sp, #4]
 8000450:	2201      	movs	r2, #1
 8000452:	40da      	lsrs	r2, r3
 8000454:	9201      	str	r2, [sp, #4]
 8000456:	e786      	b.n	8000366 <__udivmoddi4+0x6e>
 8000458:	4642      	mov	r2, r8
 800045a:	2320      	movs	r3, #32
 800045c:	1a9b      	subs	r3, r3, r2
 800045e:	002a      	movs	r2, r5
 8000460:	4646      	mov	r6, r8
 8000462:	409a      	lsls	r2, r3
 8000464:	0023      	movs	r3, r4
 8000466:	40f3      	lsrs	r3, r6
 8000468:	4644      	mov	r4, r8
 800046a:	4313      	orrs	r3, r2
 800046c:	002a      	movs	r2, r5
 800046e:	40e2      	lsrs	r2, r4
 8000470:	001c      	movs	r4, r3
 8000472:	465b      	mov	r3, fp
 8000474:	0015      	movs	r5, r2
 8000476:	2b00      	cmp	r3, #0
 8000478:	dad4      	bge.n	8000424 <__udivmoddi4+0x12c>
 800047a:	4642      	mov	r2, r8
 800047c:	002f      	movs	r7, r5
 800047e:	2320      	movs	r3, #32
 8000480:	0026      	movs	r6, r4
 8000482:	4097      	lsls	r7, r2
 8000484:	1a9b      	subs	r3, r3, r2
 8000486:	40de      	lsrs	r6, r3
 8000488:	003b      	movs	r3, r7
 800048a:	4333      	orrs	r3, r6
 800048c:	e7cd      	b.n	800042a <__udivmoddi4+0x132>
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_ddiv>:
 8000490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000492:	4657      	mov	r7, sl
 8000494:	464e      	mov	r6, r9
 8000496:	4645      	mov	r5, r8
 8000498:	46de      	mov	lr, fp
 800049a:	b5e0      	push	{r5, r6, r7, lr}
 800049c:	4681      	mov	r9, r0
 800049e:	0005      	movs	r5, r0
 80004a0:	030c      	lsls	r4, r1, #12
 80004a2:	0048      	lsls	r0, r1, #1
 80004a4:	4692      	mov	sl, r2
 80004a6:	001f      	movs	r7, r3
 80004a8:	b085      	sub	sp, #20
 80004aa:	0b24      	lsrs	r4, r4, #12
 80004ac:	0d40      	lsrs	r0, r0, #21
 80004ae:	0fce      	lsrs	r6, r1, #31
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_ddiv+0x26>
 80004b4:	e156      	b.n	8000764 <__aeabi_ddiv+0x2d4>
 80004b6:	4bd4      	ldr	r3, [pc, #848]	; (8000808 <__aeabi_ddiv+0x378>)
 80004b8:	4298      	cmp	r0, r3
 80004ba:	d100      	bne.n	80004be <__aeabi_ddiv+0x2e>
 80004bc:	e172      	b.n	80007a4 <__aeabi_ddiv+0x314>
 80004be:	0f6b      	lsrs	r3, r5, #29
 80004c0:	00e4      	lsls	r4, r4, #3
 80004c2:	431c      	orrs	r4, r3
 80004c4:	2380      	movs	r3, #128	; 0x80
 80004c6:	041b      	lsls	r3, r3, #16
 80004c8:	4323      	orrs	r3, r4
 80004ca:	4698      	mov	r8, r3
 80004cc:	4bcf      	ldr	r3, [pc, #828]	; (800080c <__aeabi_ddiv+0x37c>)
 80004ce:	00ed      	lsls	r5, r5, #3
 80004d0:	469b      	mov	fp, r3
 80004d2:	2300      	movs	r3, #0
 80004d4:	4699      	mov	r9, r3
 80004d6:	4483      	add	fp, r0
 80004d8:	9300      	str	r3, [sp, #0]
 80004da:	033c      	lsls	r4, r7, #12
 80004dc:	007b      	lsls	r3, r7, #1
 80004de:	4650      	mov	r0, sl
 80004e0:	0b24      	lsrs	r4, r4, #12
 80004e2:	0d5b      	lsrs	r3, r3, #21
 80004e4:	0fff      	lsrs	r7, r7, #31
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d100      	bne.n	80004ec <__aeabi_ddiv+0x5c>
 80004ea:	e11f      	b.n	800072c <__aeabi_ddiv+0x29c>
 80004ec:	4ac6      	ldr	r2, [pc, #792]	; (8000808 <__aeabi_ddiv+0x378>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d100      	bne.n	80004f4 <__aeabi_ddiv+0x64>
 80004f2:	e162      	b.n	80007ba <__aeabi_ddiv+0x32a>
 80004f4:	49c5      	ldr	r1, [pc, #788]	; (800080c <__aeabi_ddiv+0x37c>)
 80004f6:	0f42      	lsrs	r2, r0, #29
 80004f8:	468c      	mov	ip, r1
 80004fa:	00e4      	lsls	r4, r4, #3
 80004fc:	4659      	mov	r1, fp
 80004fe:	4314      	orrs	r4, r2
 8000500:	2280      	movs	r2, #128	; 0x80
 8000502:	4463      	add	r3, ip
 8000504:	0412      	lsls	r2, r2, #16
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	4314      	orrs	r4, r2
 800050a:	469b      	mov	fp, r3
 800050c:	00c2      	lsls	r2, r0, #3
 800050e:	2000      	movs	r0, #0
 8000510:	0033      	movs	r3, r6
 8000512:	407b      	eors	r3, r7
 8000514:	469a      	mov	sl, r3
 8000516:	464b      	mov	r3, r9
 8000518:	2b0f      	cmp	r3, #15
 800051a:	d827      	bhi.n	800056c <__aeabi_ddiv+0xdc>
 800051c:	49bc      	ldr	r1, [pc, #752]	; (8000810 <__aeabi_ddiv+0x380>)
 800051e:	009b      	lsls	r3, r3, #2
 8000520:	58cb      	ldr	r3, [r1, r3]
 8000522:	469f      	mov	pc, r3
 8000524:	46b2      	mov	sl, r6
 8000526:	9b00      	ldr	r3, [sp, #0]
 8000528:	2b02      	cmp	r3, #2
 800052a:	d016      	beq.n	800055a <__aeabi_ddiv+0xca>
 800052c:	2b03      	cmp	r3, #3
 800052e:	d100      	bne.n	8000532 <__aeabi_ddiv+0xa2>
 8000530:	e28e      	b.n	8000a50 <__aeabi_ddiv+0x5c0>
 8000532:	2b01      	cmp	r3, #1
 8000534:	d000      	beq.n	8000538 <__aeabi_ddiv+0xa8>
 8000536:	e0d9      	b.n	80006ec <__aeabi_ddiv+0x25c>
 8000538:	2300      	movs	r3, #0
 800053a:	2400      	movs	r4, #0
 800053c:	2500      	movs	r5, #0
 800053e:	4652      	mov	r2, sl
 8000540:	051b      	lsls	r3, r3, #20
 8000542:	4323      	orrs	r3, r4
 8000544:	07d2      	lsls	r2, r2, #31
 8000546:	4313      	orrs	r3, r2
 8000548:	0028      	movs	r0, r5
 800054a:	0019      	movs	r1, r3
 800054c:	b005      	add	sp, #20
 800054e:	bcf0      	pop	{r4, r5, r6, r7}
 8000550:	46bb      	mov	fp, r7
 8000552:	46b2      	mov	sl, r6
 8000554:	46a9      	mov	r9, r5
 8000556:	46a0      	mov	r8, r4
 8000558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800055a:	2400      	movs	r4, #0
 800055c:	2500      	movs	r5, #0
 800055e:	4baa      	ldr	r3, [pc, #680]	; (8000808 <__aeabi_ddiv+0x378>)
 8000560:	e7ed      	b.n	800053e <__aeabi_ddiv+0xae>
 8000562:	46ba      	mov	sl, r7
 8000564:	46a0      	mov	r8, r4
 8000566:	0015      	movs	r5, r2
 8000568:	9000      	str	r0, [sp, #0]
 800056a:	e7dc      	b.n	8000526 <__aeabi_ddiv+0x96>
 800056c:	4544      	cmp	r4, r8
 800056e:	d200      	bcs.n	8000572 <__aeabi_ddiv+0xe2>
 8000570:	e1c7      	b.n	8000902 <__aeabi_ddiv+0x472>
 8000572:	d100      	bne.n	8000576 <__aeabi_ddiv+0xe6>
 8000574:	e1c2      	b.n	80008fc <__aeabi_ddiv+0x46c>
 8000576:	2301      	movs	r3, #1
 8000578:	425b      	negs	r3, r3
 800057a:	469c      	mov	ip, r3
 800057c:	002e      	movs	r6, r5
 800057e:	4640      	mov	r0, r8
 8000580:	2500      	movs	r5, #0
 8000582:	44e3      	add	fp, ip
 8000584:	0223      	lsls	r3, r4, #8
 8000586:	0e14      	lsrs	r4, r2, #24
 8000588:	431c      	orrs	r4, r3
 800058a:	0c1b      	lsrs	r3, r3, #16
 800058c:	4699      	mov	r9, r3
 800058e:	0423      	lsls	r3, r4, #16
 8000590:	0c1f      	lsrs	r7, r3, #16
 8000592:	0212      	lsls	r2, r2, #8
 8000594:	4649      	mov	r1, r9
 8000596:	9200      	str	r2, [sp, #0]
 8000598:	9701      	str	r7, [sp, #4]
 800059a:	f7ff fe3b 	bl	8000214 <__aeabi_uidivmod>
 800059e:	0002      	movs	r2, r0
 80005a0:	437a      	muls	r2, r7
 80005a2:	040b      	lsls	r3, r1, #16
 80005a4:	0c31      	lsrs	r1, r6, #16
 80005a6:	4680      	mov	r8, r0
 80005a8:	4319      	orrs	r1, r3
 80005aa:	428a      	cmp	r2, r1
 80005ac:	d907      	bls.n	80005be <__aeabi_ddiv+0x12e>
 80005ae:	2301      	movs	r3, #1
 80005b0:	425b      	negs	r3, r3
 80005b2:	469c      	mov	ip, r3
 80005b4:	1909      	adds	r1, r1, r4
 80005b6:	44e0      	add	r8, ip
 80005b8:	428c      	cmp	r4, r1
 80005ba:	d800      	bhi.n	80005be <__aeabi_ddiv+0x12e>
 80005bc:	e207      	b.n	80009ce <__aeabi_ddiv+0x53e>
 80005be:	1a88      	subs	r0, r1, r2
 80005c0:	4649      	mov	r1, r9
 80005c2:	f7ff fe27 	bl	8000214 <__aeabi_uidivmod>
 80005c6:	0409      	lsls	r1, r1, #16
 80005c8:	468c      	mov	ip, r1
 80005ca:	0431      	lsls	r1, r6, #16
 80005cc:	4666      	mov	r6, ip
 80005ce:	9a01      	ldr	r2, [sp, #4]
 80005d0:	0c09      	lsrs	r1, r1, #16
 80005d2:	4342      	muls	r2, r0
 80005d4:	0003      	movs	r3, r0
 80005d6:	4331      	orrs	r1, r6
 80005d8:	428a      	cmp	r2, r1
 80005da:	d904      	bls.n	80005e6 <__aeabi_ddiv+0x156>
 80005dc:	1909      	adds	r1, r1, r4
 80005de:	3b01      	subs	r3, #1
 80005e0:	428c      	cmp	r4, r1
 80005e2:	d800      	bhi.n	80005e6 <__aeabi_ddiv+0x156>
 80005e4:	e1ed      	b.n	80009c2 <__aeabi_ddiv+0x532>
 80005e6:	1a88      	subs	r0, r1, r2
 80005e8:	4642      	mov	r2, r8
 80005ea:	0412      	lsls	r2, r2, #16
 80005ec:	431a      	orrs	r2, r3
 80005ee:	4690      	mov	r8, r2
 80005f0:	4641      	mov	r1, r8
 80005f2:	9b00      	ldr	r3, [sp, #0]
 80005f4:	040e      	lsls	r6, r1, #16
 80005f6:	0c1b      	lsrs	r3, r3, #16
 80005f8:	001f      	movs	r7, r3
 80005fa:	9302      	str	r3, [sp, #8]
 80005fc:	9b00      	ldr	r3, [sp, #0]
 80005fe:	0c36      	lsrs	r6, r6, #16
 8000600:	041b      	lsls	r3, r3, #16
 8000602:	0c19      	lsrs	r1, r3, #16
 8000604:	000b      	movs	r3, r1
 8000606:	4373      	muls	r3, r6
 8000608:	0c12      	lsrs	r2, r2, #16
 800060a:	437e      	muls	r6, r7
 800060c:	9103      	str	r1, [sp, #12]
 800060e:	4351      	muls	r1, r2
 8000610:	437a      	muls	r2, r7
 8000612:	0c1f      	lsrs	r7, r3, #16
 8000614:	46bc      	mov	ip, r7
 8000616:	1876      	adds	r6, r6, r1
 8000618:	4466      	add	r6, ip
 800061a:	42b1      	cmp	r1, r6
 800061c:	d903      	bls.n	8000626 <__aeabi_ddiv+0x196>
 800061e:	2180      	movs	r1, #128	; 0x80
 8000620:	0249      	lsls	r1, r1, #9
 8000622:	468c      	mov	ip, r1
 8000624:	4462      	add	r2, ip
 8000626:	0c31      	lsrs	r1, r6, #16
 8000628:	188a      	adds	r2, r1, r2
 800062a:	0431      	lsls	r1, r6, #16
 800062c:	041e      	lsls	r6, r3, #16
 800062e:	0c36      	lsrs	r6, r6, #16
 8000630:	198e      	adds	r6, r1, r6
 8000632:	4290      	cmp	r0, r2
 8000634:	d302      	bcc.n	800063c <__aeabi_ddiv+0x1ac>
 8000636:	d112      	bne.n	800065e <__aeabi_ddiv+0x1ce>
 8000638:	42b5      	cmp	r5, r6
 800063a:	d210      	bcs.n	800065e <__aeabi_ddiv+0x1ce>
 800063c:	4643      	mov	r3, r8
 800063e:	1e59      	subs	r1, r3, #1
 8000640:	9b00      	ldr	r3, [sp, #0]
 8000642:	469c      	mov	ip, r3
 8000644:	4465      	add	r5, ip
 8000646:	001f      	movs	r7, r3
 8000648:	429d      	cmp	r5, r3
 800064a:	419b      	sbcs	r3, r3
 800064c:	425b      	negs	r3, r3
 800064e:	191b      	adds	r3, r3, r4
 8000650:	18c0      	adds	r0, r0, r3
 8000652:	4284      	cmp	r4, r0
 8000654:	d200      	bcs.n	8000658 <__aeabi_ddiv+0x1c8>
 8000656:	e1a0      	b.n	800099a <__aeabi_ddiv+0x50a>
 8000658:	d100      	bne.n	800065c <__aeabi_ddiv+0x1cc>
 800065a:	e19b      	b.n	8000994 <__aeabi_ddiv+0x504>
 800065c:	4688      	mov	r8, r1
 800065e:	1bae      	subs	r6, r5, r6
 8000660:	42b5      	cmp	r5, r6
 8000662:	41ad      	sbcs	r5, r5
 8000664:	1a80      	subs	r0, r0, r2
 8000666:	426d      	negs	r5, r5
 8000668:	1b40      	subs	r0, r0, r5
 800066a:	4284      	cmp	r4, r0
 800066c:	d100      	bne.n	8000670 <__aeabi_ddiv+0x1e0>
 800066e:	e1d5      	b.n	8000a1c <__aeabi_ddiv+0x58c>
 8000670:	4649      	mov	r1, r9
 8000672:	f7ff fdcf 	bl	8000214 <__aeabi_uidivmod>
 8000676:	9a01      	ldr	r2, [sp, #4]
 8000678:	040b      	lsls	r3, r1, #16
 800067a:	4342      	muls	r2, r0
 800067c:	0c31      	lsrs	r1, r6, #16
 800067e:	0005      	movs	r5, r0
 8000680:	4319      	orrs	r1, r3
 8000682:	428a      	cmp	r2, r1
 8000684:	d900      	bls.n	8000688 <__aeabi_ddiv+0x1f8>
 8000686:	e16c      	b.n	8000962 <__aeabi_ddiv+0x4d2>
 8000688:	1a88      	subs	r0, r1, r2
 800068a:	4649      	mov	r1, r9
 800068c:	f7ff fdc2 	bl	8000214 <__aeabi_uidivmod>
 8000690:	9a01      	ldr	r2, [sp, #4]
 8000692:	0436      	lsls	r6, r6, #16
 8000694:	4342      	muls	r2, r0
 8000696:	0409      	lsls	r1, r1, #16
 8000698:	0c36      	lsrs	r6, r6, #16
 800069a:	0003      	movs	r3, r0
 800069c:	430e      	orrs	r6, r1
 800069e:	42b2      	cmp	r2, r6
 80006a0:	d900      	bls.n	80006a4 <__aeabi_ddiv+0x214>
 80006a2:	e153      	b.n	800094c <__aeabi_ddiv+0x4bc>
 80006a4:	9803      	ldr	r0, [sp, #12]
 80006a6:	1ab6      	subs	r6, r6, r2
 80006a8:	0002      	movs	r2, r0
 80006aa:	042d      	lsls	r5, r5, #16
 80006ac:	431d      	orrs	r5, r3
 80006ae:	9f02      	ldr	r7, [sp, #8]
 80006b0:	042b      	lsls	r3, r5, #16
 80006b2:	0c1b      	lsrs	r3, r3, #16
 80006b4:	435a      	muls	r2, r3
 80006b6:	437b      	muls	r3, r7
 80006b8:	469c      	mov	ip, r3
 80006ba:	0c29      	lsrs	r1, r5, #16
 80006bc:	4348      	muls	r0, r1
 80006be:	0c13      	lsrs	r3, r2, #16
 80006c0:	4484      	add	ip, r0
 80006c2:	4463      	add	r3, ip
 80006c4:	4379      	muls	r1, r7
 80006c6:	4298      	cmp	r0, r3
 80006c8:	d903      	bls.n	80006d2 <__aeabi_ddiv+0x242>
 80006ca:	2080      	movs	r0, #128	; 0x80
 80006cc:	0240      	lsls	r0, r0, #9
 80006ce:	4684      	mov	ip, r0
 80006d0:	4461      	add	r1, ip
 80006d2:	0c18      	lsrs	r0, r3, #16
 80006d4:	0412      	lsls	r2, r2, #16
 80006d6:	041b      	lsls	r3, r3, #16
 80006d8:	0c12      	lsrs	r2, r2, #16
 80006da:	1841      	adds	r1, r0, r1
 80006dc:	189b      	adds	r3, r3, r2
 80006de:	428e      	cmp	r6, r1
 80006e0:	d200      	bcs.n	80006e4 <__aeabi_ddiv+0x254>
 80006e2:	e0ff      	b.n	80008e4 <__aeabi_ddiv+0x454>
 80006e4:	d100      	bne.n	80006e8 <__aeabi_ddiv+0x258>
 80006e6:	e0fa      	b.n	80008de <__aeabi_ddiv+0x44e>
 80006e8:	2301      	movs	r3, #1
 80006ea:	431d      	orrs	r5, r3
 80006ec:	4a49      	ldr	r2, [pc, #292]	; (8000814 <__aeabi_ddiv+0x384>)
 80006ee:	445a      	add	r2, fp
 80006f0:	2a00      	cmp	r2, #0
 80006f2:	dc00      	bgt.n	80006f6 <__aeabi_ddiv+0x266>
 80006f4:	e0aa      	b.n	800084c <__aeabi_ddiv+0x3bc>
 80006f6:	076b      	lsls	r3, r5, #29
 80006f8:	d000      	beq.n	80006fc <__aeabi_ddiv+0x26c>
 80006fa:	e13d      	b.n	8000978 <__aeabi_ddiv+0x4e8>
 80006fc:	08ed      	lsrs	r5, r5, #3
 80006fe:	4643      	mov	r3, r8
 8000700:	01db      	lsls	r3, r3, #7
 8000702:	d506      	bpl.n	8000712 <__aeabi_ddiv+0x282>
 8000704:	4642      	mov	r2, r8
 8000706:	4b44      	ldr	r3, [pc, #272]	; (8000818 <__aeabi_ddiv+0x388>)
 8000708:	401a      	ands	r2, r3
 800070a:	4690      	mov	r8, r2
 800070c:	2280      	movs	r2, #128	; 0x80
 800070e:	00d2      	lsls	r2, r2, #3
 8000710:	445a      	add	r2, fp
 8000712:	4b42      	ldr	r3, [pc, #264]	; (800081c <__aeabi_ddiv+0x38c>)
 8000714:	429a      	cmp	r2, r3
 8000716:	dd00      	ble.n	800071a <__aeabi_ddiv+0x28a>
 8000718:	e71f      	b.n	800055a <__aeabi_ddiv+0xca>
 800071a:	4643      	mov	r3, r8
 800071c:	075b      	lsls	r3, r3, #29
 800071e:	431d      	orrs	r5, r3
 8000720:	4643      	mov	r3, r8
 8000722:	0552      	lsls	r2, r2, #21
 8000724:	025c      	lsls	r4, r3, #9
 8000726:	0b24      	lsrs	r4, r4, #12
 8000728:	0d53      	lsrs	r3, r2, #21
 800072a:	e708      	b.n	800053e <__aeabi_ddiv+0xae>
 800072c:	4652      	mov	r2, sl
 800072e:	4322      	orrs	r2, r4
 8000730:	d100      	bne.n	8000734 <__aeabi_ddiv+0x2a4>
 8000732:	e07b      	b.n	800082c <__aeabi_ddiv+0x39c>
 8000734:	2c00      	cmp	r4, #0
 8000736:	d100      	bne.n	800073a <__aeabi_ddiv+0x2aa>
 8000738:	e0fa      	b.n	8000930 <__aeabi_ddiv+0x4a0>
 800073a:	0020      	movs	r0, r4
 800073c:	f000 fdd4 	bl	80012e8 <__clzsi2>
 8000740:	0002      	movs	r2, r0
 8000742:	3a0b      	subs	r2, #11
 8000744:	231d      	movs	r3, #29
 8000746:	0001      	movs	r1, r0
 8000748:	1a9b      	subs	r3, r3, r2
 800074a:	4652      	mov	r2, sl
 800074c:	3908      	subs	r1, #8
 800074e:	40da      	lsrs	r2, r3
 8000750:	408c      	lsls	r4, r1
 8000752:	4314      	orrs	r4, r2
 8000754:	4652      	mov	r2, sl
 8000756:	408a      	lsls	r2, r1
 8000758:	4b31      	ldr	r3, [pc, #196]	; (8000820 <__aeabi_ddiv+0x390>)
 800075a:	4458      	add	r0, fp
 800075c:	469b      	mov	fp, r3
 800075e:	4483      	add	fp, r0
 8000760:	2000      	movs	r0, #0
 8000762:	e6d5      	b.n	8000510 <__aeabi_ddiv+0x80>
 8000764:	464b      	mov	r3, r9
 8000766:	4323      	orrs	r3, r4
 8000768:	4698      	mov	r8, r3
 800076a:	d044      	beq.n	80007f6 <__aeabi_ddiv+0x366>
 800076c:	2c00      	cmp	r4, #0
 800076e:	d100      	bne.n	8000772 <__aeabi_ddiv+0x2e2>
 8000770:	e0ce      	b.n	8000910 <__aeabi_ddiv+0x480>
 8000772:	0020      	movs	r0, r4
 8000774:	f000 fdb8 	bl	80012e8 <__clzsi2>
 8000778:	0001      	movs	r1, r0
 800077a:	0002      	movs	r2, r0
 800077c:	390b      	subs	r1, #11
 800077e:	231d      	movs	r3, #29
 8000780:	1a5b      	subs	r3, r3, r1
 8000782:	4649      	mov	r1, r9
 8000784:	0010      	movs	r0, r2
 8000786:	40d9      	lsrs	r1, r3
 8000788:	3808      	subs	r0, #8
 800078a:	4084      	lsls	r4, r0
 800078c:	000b      	movs	r3, r1
 800078e:	464d      	mov	r5, r9
 8000790:	4323      	orrs	r3, r4
 8000792:	4698      	mov	r8, r3
 8000794:	4085      	lsls	r5, r0
 8000796:	4823      	ldr	r0, [pc, #140]	; (8000824 <__aeabi_ddiv+0x394>)
 8000798:	1a83      	subs	r3, r0, r2
 800079a:	469b      	mov	fp, r3
 800079c:	2300      	movs	r3, #0
 800079e:	4699      	mov	r9, r3
 80007a0:	9300      	str	r3, [sp, #0]
 80007a2:	e69a      	b.n	80004da <__aeabi_ddiv+0x4a>
 80007a4:	464b      	mov	r3, r9
 80007a6:	4323      	orrs	r3, r4
 80007a8:	4698      	mov	r8, r3
 80007aa:	d11d      	bne.n	80007e8 <__aeabi_ddiv+0x358>
 80007ac:	2308      	movs	r3, #8
 80007ae:	4699      	mov	r9, r3
 80007b0:	3b06      	subs	r3, #6
 80007b2:	2500      	movs	r5, #0
 80007b4:	4683      	mov	fp, r0
 80007b6:	9300      	str	r3, [sp, #0]
 80007b8:	e68f      	b.n	80004da <__aeabi_ddiv+0x4a>
 80007ba:	4652      	mov	r2, sl
 80007bc:	4322      	orrs	r2, r4
 80007be:	d109      	bne.n	80007d4 <__aeabi_ddiv+0x344>
 80007c0:	2302      	movs	r3, #2
 80007c2:	4649      	mov	r1, r9
 80007c4:	4319      	orrs	r1, r3
 80007c6:	4b18      	ldr	r3, [pc, #96]	; (8000828 <__aeabi_ddiv+0x398>)
 80007c8:	4689      	mov	r9, r1
 80007ca:	469c      	mov	ip, r3
 80007cc:	2400      	movs	r4, #0
 80007ce:	2002      	movs	r0, #2
 80007d0:	44e3      	add	fp, ip
 80007d2:	e69d      	b.n	8000510 <__aeabi_ddiv+0x80>
 80007d4:	2303      	movs	r3, #3
 80007d6:	464a      	mov	r2, r9
 80007d8:	431a      	orrs	r2, r3
 80007da:	4b13      	ldr	r3, [pc, #76]	; (8000828 <__aeabi_ddiv+0x398>)
 80007dc:	4691      	mov	r9, r2
 80007de:	469c      	mov	ip, r3
 80007e0:	4652      	mov	r2, sl
 80007e2:	2003      	movs	r0, #3
 80007e4:	44e3      	add	fp, ip
 80007e6:	e693      	b.n	8000510 <__aeabi_ddiv+0x80>
 80007e8:	230c      	movs	r3, #12
 80007ea:	4699      	mov	r9, r3
 80007ec:	3b09      	subs	r3, #9
 80007ee:	46a0      	mov	r8, r4
 80007f0:	4683      	mov	fp, r0
 80007f2:	9300      	str	r3, [sp, #0]
 80007f4:	e671      	b.n	80004da <__aeabi_ddiv+0x4a>
 80007f6:	2304      	movs	r3, #4
 80007f8:	4699      	mov	r9, r3
 80007fa:	2300      	movs	r3, #0
 80007fc:	469b      	mov	fp, r3
 80007fe:	3301      	adds	r3, #1
 8000800:	2500      	movs	r5, #0
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	e669      	b.n	80004da <__aeabi_ddiv+0x4a>
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	000007ff 	.word	0x000007ff
 800080c:	fffffc01 	.word	0xfffffc01
 8000810:	08009dcc 	.word	0x08009dcc
 8000814:	000003ff 	.word	0x000003ff
 8000818:	feffffff 	.word	0xfeffffff
 800081c:	000007fe 	.word	0x000007fe
 8000820:	000003f3 	.word	0x000003f3
 8000824:	fffffc0d 	.word	0xfffffc0d
 8000828:	fffff801 	.word	0xfffff801
 800082c:	4649      	mov	r1, r9
 800082e:	2301      	movs	r3, #1
 8000830:	4319      	orrs	r1, r3
 8000832:	4689      	mov	r9, r1
 8000834:	2400      	movs	r4, #0
 8000836:	2001      	movs	r0, #1
 8000838:	e66a      	b.n	8000510 <__aeabi_ddiv+0x80>
 800083a:	2300      	movs	r3, #0
 800083c:	2480      	movs	r4, #128	; 0x80
 800083e:	469a      	mov	sl, r3
 8000840:	2500      	movs	r5, #0
 8000842:	4b8a      	ldr	r3, [pc, #552]	; (8000a6c <__aeabi_ddiv+0x5dc>)
 8000844:	0324      	lsls	r4, r4, #12
 8000846:	e67a      	b.n	800053e <__aeabi_ddiv+0xae>
 8000848:	2501      	movs	r5, #1
 800084a:	426d      	negs	r5, r5
 800084c:	2301      	movs	r3, #1
 800084e:	1a9b      	subs	r3, r3, r2
 8000850:	2b38      	cmp	r3, #56	; 0x38
 8000852:	dd00      	ble.n	8000856 <__aeabi_ddiv+0x3c6>
 8000854:	e670      	b.n	8000538 <__aeabi_ddiv+0xa8>
 8000856:	2b1f      	cmp	r3, #31
 8000858:	dc00      	bgt.n	800085c <__aeabi_ddiv+0x3cc>
 800085a:	e0bf      	b.n	80009dc <__aeabi_ddiv+0x54c>
 800085c:	211f      	movs	r1, #31
 800085e:	4249      	negs	r1, r1
 8000860:	1a8a      	subs	r2, r1, r2
 8000862:	4641      	mov	r1, r8
 8000864:	40d1      	lsrs	r1, r2
 8000866:	000a      	movs	r2, r1
 8000868:	2b20      	cmp	r3, #32
 800086a:	d004      	beq.n	8000876 <__aeabi_ddiv+0x3e6>
 800086c:	4641      	mov	r1, r8
 800086e:	4b80      	ldr	r3, [pc, #512]	; (8000a70 <__aeabi_ddiv+0x5e0>)
 8000870:	445b      	add	r3, fp
 8000872:	4099      	lsls	r1, r3
 8000874:	430d      	orrs	r5, r1
 8000876:	1e6b      	subs	r3, r5, #1
 8000878:	419d      	sbcs	r5, r3
 800087a:	2307      	movs	r3, #7
 800087c:	432a      	orrs	r2, r5
 800087e:	001d      	movs	r5, r3
 8000880:	2400      	movs	r4, #0
 8000882:	4015      	ands	r5, r2
 8000884:	4213      	tst	r3, r2
 8000886:	d100      	bne.n	800088a <__aeabi_ddiv+0x3fa>
 8000888:	e0d4      	b.n	8000a34 <__aeabi_ddiv+0x5a4>
 800088a:	210f      	movs	r1, #15
 800088c:	2300      	movs	r3, #0
 800088e:	4011      	ands	r1, r2
 8000890:	2904      	cmp	r1, #4
 8000892:	d100      	bne.n	8000896 <__aeabi_ddiv+0x406>
 8000894:	e0cb      	b.n	8000a2e <__aeabi_ddiv+0x59e>
 8000896:	1d11      	adds	r1, r2, #4
 8000898:	4291      	cmp	r1, r2
 800089a:	4192      	sbcs	r2, r2
 800089c:	4252      	negs	r2, r2
 800089e:	189b      	adds	r3, r3, r2
 80008a0:	000a      	movs	r2, r1
 80008a2:	0219      	lsls	r1, r3, #8
 80008a4:	d400      	bmi.n	80008a8 <__aeabi_ddiv+0x418>
 80008a6:	e0c2      	b.n	8000a2e <__aeabi_ddiv+0x59e>
 80008a8:	2301      	movs	r3, #1
 80008aa:	2400      	movs	r4, #0
 80008ac:	2500      	movs	r5, #0
 80008ae:	e646      	b.n	800053e <__aeabi_ddiv+0xae>
 80008b0:	2380      	movs	r3, #128	; 0x80
 80008b2:	4641      	mov	r1, r8
 80008b4:	031b      	lsls	r3, r3, #12
 80008b6:	4219      	tst	r1, r3
 80008b8:	d008      	beq.n	80008cc <__aeabi_ddiv+0x43c>
 80008ba:	421c      	tst	r4, r3
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x43c>
 80008be:	431c      	orrs	r4, r3
 80008c0:	0324      	lsls	r4, r4, #12
 80008c2:	46ba      	mov	sl, r7
 80008c4:	0015      	movs	r5, r2
 80008c6:	4b69      	ldr	r3, [pc, #420]	; (8000a6c <__aeabi_ddiv+0x5dc>)
 80008c8:	0b24      	lsrs	r4, r4, #12
 80008ca:	e638      	b.n	800053e <__aeabi_ddiv+0xae>
 80008cc:	2480      	movs	r4, #128	; 0x80
 80008ce:	4643      	mov	r3, r8
 80008d0:	0324      	lsls	r4, r4, #12
 80008d2:	431c      	orrs	r4, r3
 80008d4:	0324      	lsls	r4, r4, #12
 80008d6:	46b2      	mov	sl, r6
 80008d8:	4b64      	ldr	r3, [pc, #400]	; (8000a6c <__aeabi_ddiv+0x5dc>)
 80008da:	0b24      	lsrs	r4, r4, #12
 80008dc:	e62f      	b.n	800053e <__aeabi_ddiv+0xae>
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d100      	bne.n	80008e4 <__aeabi_ddiv+0x454>
 80008e2:	e703      	b.n	80006ec <__aeabi_ddiv+0x25c>
 80008e4:	19a6      	adds	r6, r4, r6
 80008e6:	1e68      	subs	r0, r5, #1
 80008e8:	42a6      	cmp	r6, r4
 80008ea:	d200      	bcs.n	80008ee <__aeabi_ddiv+0x45e>
 80008ec:	e08d      	b.n	8000a0a <__aeabi_ddiv+0x57a>
 80008ee:	428e      	cmp	r6, r1
 80008f0:	d200      	bcs.n	80008f4 <__aeabi_ddiv+0x464>
 80008f2:	e0a3      	b.n	8000a3c <__aeabi_ddiv+0x5ac>
 80008f4:	d100      	bne.n	80008f8 <__aeabi_ddiv+0x468>
 80008f6:	e0b3      	b.n	8000a60 <__aeabi_ddiv+0x5d0>
 80008f8:	0005      	movs	r5, r0
 80008fa:	e6f5      	b.n	80006e8 <__aeabi_ddiv+0x258>
 80008fc:	42aa      	cmp	r2, r5
 80008fe:	d900      	bls.n	8000902 <__aeabi_ddiv+0x472>
 8000900:	e639      	b.n	8000576 <__aeabi_ddiv+0xe6>
 8000902:	4643      	mov	r3, r8
 8000904:	07de      	lsls	r6, r3, #31
 8000906:	0858      	lsrs	r0, r3, #1
 8000908:	086b      	lsrs	r3, r5, #1
 800090a:	431e      	orrs	r6, r3
 800090c:	07ed      	lsls	r5, r5, #31
 800090e:	e639      	b.n	8000584 <__aeabi_ddiv+0xf4>
 8000910:	4648      	mov	r0, r9
 8000912:	f000 fce9 	bl	80012e8 <__clzsi2>
 8000916:	0001      	movs	r1, r0
 8000918:	0002      	movs	r2, r0
 800091a:	3115      	adds	r1, #21
 800091c:	3220      	adds	r2, #32
 800091e:	291c      	cmp	r1, #28
 8000920:	dc00      	bgt.n	8000924 <__aeabi_ddiv+0x494>
 8000922:	e72c      	b.n	800077e <__aeabi_ddiv+0x2ee>
 8000924:	464b      	mov	r3, r9
 8000926:	3808      	subs	r0, #8
 8000928:	4083      	lsls	r3, r0
 800092a:	2500      	movs	r5, #0
 800092c:	4698      	mov	r8, r3
 800092e:	e732      	b.n	8000796 <__aeabi_ddiv+0x306>
 8000930:	f000 fcda 	bl	80012e8 <__clzsi2>
 8000934:	0003      	movs	r3, r0
 8000936:	001a      	movs	r2, r3
 8000938:	3215      	adds	r2, #21
 800093a:	3020      	adds	r0, #32
 800093c:	2a1c      	cmp	r2, #28
 800093e:	dc00      	bgt.n	8000942 <__aeabi_ddiv+0x4b2>
 8000940:	e700      	b.n	8000744 <__aeabi_ddiv+0x2b4>
 8000942:	4654      	mov	r4, sl
 8000944:	3b08      	subs	r3, #8
 8000946:	2200      	movs	r2, #0
 8000948:	409c      	lsls	r4, r3
 800094a:	e705      	b.n	8000758 <__aeabi_ddiv+0x2c8>
 800094c:	1936      	adds	r6, r6, r4
 800094e:	3b01      	subs	r3, #1
 8000950:	42b4      	cmp	r4, r6
 8000952:	d900      	bls.n	8000956 <__aeabi_ddiv+0x4c6>
 8000954:	e6a6      	b.n	80006a4 <__aeabi_ddiv+0x214>
 8000956:	42b2      	cmp	r2, r6
 8000958:	d800      	bhi.n	800095c <__aeabi_ddiv+0x4cc>
 800095a:	e6a3      	b.n	80006a4 <__aeabi_ddiv+0x214>
 800095c:	1e83      	subs	r3, r0, #2
 800095e:	1936      	adds	r6, r6, r4
 8000960:	e6a0      	b.n	80006a4 <__aeabi_ddiv+0x214>
 8000962:	1909      	adds	r1, r1, r4
 8000964:	3d01      	subs	r5, #1
 8000966:	428c      	cmp	r4, r1
 8000968:	d900      	bls.n	800096c <__aeabi_ddiv+0x4dc>
 800096a:	e68d      	b.n	8000688 <__aeabi_ddiv+0x1f8>
 800096c:	428a      	cmp	r2, r1
 800096e:	d800      	bhi.n	8000972 <__aeabi_ddiv+0x4e2>
 8000970:	e68a      	b.n	8000688 <__aeabi_ddiv+0x1f8>
 8000972:	1e85      	subs	r5, r0, #2
 8000974:	1909      	adds	r1, r1, r4
 8000976:	e687      	b.n	8000688 <__aeabi_ddiv+0x1f8>
 8000978:	230f      	movs	r3, #15
 800097a:	402b      	ands	r3, r5
 800097c:	2b04      	cmp	r3, #4
 800097e:	d100      	bne.n	8000982 <__aeabi_ddiv+0x4f2>
 8000980:	e6bc      	b.n	80006fc <__aeabi_ddiv+0x26c>
 8000982:	2305      	movs	r3, #5
 8000984:	425b      	negs	r3, r3
 8000986:	42ab      	cmp	r3, r5
 8000988:	419b      	sbcs	r3, r3
 800098a:	3504      	adds	r5, #4
 800098c:	425b      	negs	r3, r3
 800098e:	08ed      	lsrs	r5, r5, #3
 8000990:	4498      	add	r8, r3
 8000992:	e6b4      	b.n	80006fe <__aeabi_ddiv+0x26e>
 8000994:	42af      	cmp	r7, r5
 8000996:	d900      	bls.n	800099a <__aeabi_ddiv+0x50a>
 8000998:	e660      	b.n	800065c <__aeabi_ddiv+0x1cc>
 800099a:	4282      	cmp	r2, r0
 800099c:	d804      	bhi.n	80009a8 <__aeabi_ddiv+0x518>
 800099e:	d000      	beq.n	80009a2 <__aeabi_ddiv+0x512>
 80009a0:	e65c      	b.n	800065c <__aeabi_ddiv+0x1cc>
 80009a2:	42ae      	cmp	r6, r5
 80009a4:	d800      	bhi.n	80009a8 <__aeabi_ddiv+0x518>
 80009a6:	e659      	b.n	800065c <__aeabi_ddiv+0x1cc>
 80009a8:	2302      	movs	r3, #2
 80009aa:	425b      	negs	r3, r3
 80009ac:	469c      	mov	ip, r3
 80009ae:	9b00      	ldr	r3, [sp, #0]
 80009b0:	44e0      	add	r8, ip
 80009b2:	469c      	mov	ip, r3
 80009b4:	4465      	add	r5, ip
 80009b6:	429d      	cmp	r5, r3
 80009b8:	419b      	sbcs	r3, r3
 80009ba:	425b      	negs	r3, r3
 80009bc:	191b      	adds	r3, r3, r4
 80009be:	18c0      	adds	r0, r0, r3
 80009c0:	e64d      	b.n	800065e <__aeabi_ddiv+0x1ce>
 80009c2:	428a      	cmp	r2, r1
 80009c4:	d800      	bhi.n	80009c8 <__aeabi_ddiv+0x538>
 80009c6:	e60e      	b.n	80005e6 <__aeabi_ddiv+0x156>
 80009c8:	1e83      	subs	r3, r0, #2
 80009ca:	1909      	adds	r1, r1, r4
 80009cc:	e60b      	b.n	80005e6 <__aeabi_ddiv+0x156>
 80009ce:	428a      	cmp	r2, r1
 80009d0:	d800      	bhi.n	80009d4 <__aeabi_ddiv+0x544>
 80009d2:	e5f4      	b.n	80005be <__aeabi_ddiv+0x12e>
 80009d4:	1e83      	subs	r3, r0, #2
 80009d6:	4698      	mov	r8, r3
 80009d8:	1909      	adds	r1, r1, r4
 80009da:	e5f0      	b.n	80005be <__aeabi_ddiv+0x12e>
 80009dc:	4925      	ldr	r1, [pc, #148]	; (8000a74 <__aeabi_ddiv+0x5e4>)
 80009de:	0028      	movs	r0, r5
 80009e0:	4459      	add	r1, fp
 80009e2:	408d      	lsls	r5, r1
 80009e4:	4642      	mov	r2, r8
 80009e6:	408a      	lsls	r2, r1
 80009e8:	1e69      	subs	r1, r5, #1
 80009ea:	418d      	sbcs	r5, r1
 80009ec:	4641      	mov	r1, r8
 80009ee:	40d8      	lsrs	r0, r3
 80009f0:	40d9      	lsrs	r1, r3
 80009f2:	4302      	orrs	r2, r0
 80009f4:	432a      	orrs	r2, r5
 80009f6:	000b      	movs	r3, r1
 80009f8:	0751      	lsls	r1, r2, #29
 80009fa:	d100      	bne.n	80009fe <__aeabi_ddiv+0x56e>
 80009fc:	e751      	b.n	80008a2 <__aeabi_ddiv+0x412>
 80009fe:	210f      	movs	r1, #15
 8000a00:	4011      	ands	r1, r2
 8000a02:	2904      	cmp	r1, #4
 8000a04:	d000      	beq.n	8000a08 <__aeabi_ddiv+0x578>
 8000a06:	e746      	b.n	8000896 <__aeabi_ddiv+0x406>
 8000a08:	e74b      	b.n	80008a2 <__aeabi_ddiv+0x412>
 8000a0a:	0005      	movs	r5, r0
 8000a0c:	428e      	cmp	r6, r1
 8000a0e:	d000      	beq.n	8000a12 <__aeabi_ddiv+0x582>
 8000a10:	e66a      	b.n	80006e8 <__aeabi_ddiv+0x258>
 8000a12:	9a00      	ldr	r2, [sp, #0]
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d000      	beq.n	8000a1a <__aeabi_ddiv+0x58a>
 8000a18:	e666      	b.n	80006e8 <__aeabi_ddiv+0x258>
 8000a1a:	e667      	b.n	80006ec <__aeabi_ddiv+0x25c>
 8000a1c:	4a16      	ldr	r2, [pc, #88]	; (8000a78 <__aeabi_ddiv+0x5e8>)
 8000a1e:	445a      	add	r2, fp
 8000a20:	2a00      	cmp	r2, #0
 8000a22:	dc00      	bgt.n	8000a26 <__aeabi_ddiv+0x596>
 8000a24:	e710      	b.n	8000848 <__aeabi_ddiv+0x3b8>
 8000a26:	2301      	movs	r3, #1
 8000a28:	2500      	movs	r5, #0
 8000a2a:	4498      	add	r8, r3
 8000a2c:	e667      	b.n	80006fe <__aeabi_ddiv+0x26e>
 8000a2e:	075d      	lsls	r5, r3, #29
 8000a30:	025b      	lsls	r3, r3, #9
 8000a32:	0b1c      	lsrs	r4, r3, #12
 8000a34:	08d2      	lsrs	r2, r2, #3
 8000a36:	2300      	movs	r3, #0
 8000a38:	4315      	orrs	r5, r2
 8000a3a:	e580      	b.n	800053e <__aeabi_ddiv+0xae>
 8000a3c:	9800      	ldr	r0, [sp, #0]
 8000a3e:	3d02      	subs	r5, #2
 8000a40:	0042      	lsls	r2, r0, #1
 8000a42:	4282      	cmp	r2, r0
 8000a44:	41bf      	sbcs	r7, r7
 8000a46:	427f      	negs	r7, r7
 8000a48:	193c      	adds	r4, r7, r4
 8000a4a:	1936      	adds	r6, r6, r4
 8000a4c:	9200      	str	r2, [sp, #0]
 8000a4e:	e7dd      	b.n	8000a0c <__aeabi_ddiv+0x57c>
 8000a50:	2480      	movs	r4, #128	; 0x80
 8000a52:	4643      	mov	r3, r8
 8000a54:	0324      	lsls	r4, r4, #12
 8000a56:	431c      	orrs	r4, r3
 8000a58:	0324      	lsls	r4, r4, #12
 8000a5a:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <__aeabi_ddiv+0x5dc>)
 8000a5c:	0b24      	lsrs	r4, r4, #12
 8000a5e:	e56e      	b.n	800053e <__aeabi_ddiv+0xae>
 8000a60:	9a00      	ldr	r2, [sp, #0]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d3ea      	bcc.n	8000a3c <__aeabi_ddiv+0x5ac>
 8000a66:	0005      	movs	r5, r0
 8000a68:	e7d3      	b.n	8000a12 <__aeabi_ddiv+0x582>
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	000007ff 	.word	0x000007ff
 8000a70:	0000043e 	.word	0x0000043e
 8000a74:	0000041e 	.word	0x0000041e
 8000a78:	000003ff 	.word	0x000003ff

08000a7c <__aeabi_dsub>:
 8000a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a7e:	4657      	mov	r7, sl
 8000a80:	464e      	mov	r6, r9
 8000a82:	4645      	mov	r5, r8
 8000a84:	46de      	mov	lr, fp
 8000a86:	b5e0      	push	{r5, r6, r7, lr}
 8000a88:	001e      	movs	r6, r3
 8000a8a:	0017      	movs	r7, r2
 8000a8c:	004a      	lsls	r2, r1, #1
 8000a8e:	030b      	lsls	r3, r1, #12
 8000a90:	0d52      	lsrs	r2, r2, #21
 8000a92:	0a5b      	lsrs	r3, r3, #9
 8000a94:	4690      	mov	r8, r2
 8000a96:	0f42      	lsrs	r2, r0, #29
 8000a98:	431a      	orrs	r2, r3
 8000a9a:	0fcd      	lsrs	r5, r1, #31
 8000a9c:	4ccd      	ldr	r4, [pc, #820]	; (8000dd4 <__aeabi_dsub+0x358>)
 8000a9e:	0331      	lsls	r1, r6, #12
 8000aa0:	00c3      	lsls	r3, r0, #3
 8000aa2:	4694      	mov	ip, r2
 8000aa4:	0070      	lsls	r0, r6, #1
 8000aa6:	0f7a      	lsrs	r2, r7, #29
 8000aa8:	0a49      	lsrs	r1, r1, #9
 8000aaa:	00ff      	lsls	r7, r7, #3
 8000aac:	469a      	mov	sl, r3
 8000aae:	46b9      	mov	r9, r7
 8000ab0:	0d40      	lsrs	r0, r0, #21
 8000ab2:	0ff6      	lsrs	r6, r6, #31
 8000ab4:	4311      	orrs	r1, r2
 8000ab6:	42a0      	cmp	r0, r4
 8000ab8:	d100      	bne.n	8000abc <__aeabi_dsub+0x40>
 8000aba:	e0b1      	b.n	8000c20 <__aeabi_dsub+0x1a4>
 8000abc:	2201      	movs	r2, #1
 8000abe:	4056      	eors	r6, r2
 8000ac0:	46b3      	mov	fp, r6
 8000ac2:	42b5      	cmp	r5, r6
 8000ac4:	d100      	bne.n	8000ac8 <__aeabi_dsub+0x4c>
 8000ac6:	e088      	b.n	8000bda <__aeabi_dsub+0x15e>
 8000ac8:	4642      	mov	r2, r8
 8000aca:	1a12      	subs	r2, r2, r0
 8000acc:	2a00      	cmp	r2, #0
 8000ace:	dc00      	bgt.n	8000ad2 <__aeabi_dsub+0x56>
 8000ad0:	e0ae      	b.n	8000c30 <__aeabi_dsub+0x1b4>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	d100      	bne.n	8000ad8 <__aeabi_dsub+0x5c>
 8000ad6:	e0c1      	b.n	8000c5c <__aeabi_dsub+0x1e0>
 8000ad8:	48be      	ldr	r0, [pc, #760]	; (8000dd4 <__aeabi_dsub+0x358>)
 8000ada:	4580      	cmp	r8, r0
 8000adc:	d100      	bne.n	8000ae0 <__aeabi_dsub+0x64>
 8000ade:	e151      	b.n	8000d84 <__aeabi_dsub+0x308>
 8000ae0:	2080      	movs	r0, #128	; 0x80
 8000ae2:	0400      	lsls	r0, r0, #16
 8000ae4:	4301      	orrs	r1, r0
 8000ae6:	2a38      	cmp	r2, #56	; 0x38
 8000ae8:	dd00      	ble.n	8000aec <__aeabi_dsub+0x70>
 8000aea:	e17b      	b.n	8000de4 <__aeabi_dsub+0x368>
 8000aec:	2a1f      	cmp	r2, #31
 8000aee:	dd00      	ble.n	8000af2 <__aeabi_dsub+0x76>
 8000af0:	e1ee      	b.n	8000ed0 <__aeabi_dsub+0x454>
 8000af2:	2020      	movs	r0, #32
 8000af4:	003e      	movs	r6, r7
 8000af6:	1a80      	subs	r0, r0, r2
 8000af8:	000c      	movs	r4, r1
 8000afa:	40d6      	lsrs	r6, r2
 8000afc:	40d1      	lsrs	r1, r2
 8000afe:	4087      	lsls	r7, r0
 8000b00:	4662      	mov	r2, ip
 8000b02:	4084      	lsls	r4, r0
 8000b04:	1a52      	subs	r2, r2, r1
 8000b06:	1e78      	subs	r0, r7, #1
 8000b08:	4187      	sbcs	r7, r0
 8000b0a:	4694      	mov	ip, r2
 8000b0c:	4334      	orrs	r4, r6
 8000b0e:	4327      	orrs	r7, r4
 8000b10:	1bdc      	subs	r4, r3, r7
 8000b12:	42a3      	cmp	r3, r4
 8000b14:	419b      	sbcs	r3, r3
 8000b16:	4662      	mov	r2, ip
 8000b18:	425b      	negs	r3, r3
 8000b1a:	1ad3      	subs	r3, r2, r3
 8000b1c:	4699      	mov	r9, r3
 8000b1e:	464b      	mov	r3, r9
 8000b20:	021b      	lsls	r3, r3, #8
 8000b22:	d400      	bmi.n	8000b26 <__aeabi_dsub+0xaa>
 8000b24:	e118      	b.n	8000d58 <__aeabi_dsub+0x2dc>
 8000b26:	464b      	mov	r3, r9
 8000b28:	0258      	lsls	r0, r3, #9
 8000b2a:	0a43      	lsrs	r3, r0, #9
 8000b2c:	4699      	mov	r9, r3
 8000b2e:	464b      	mov	r3, r9
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d100      	bne.n	8000b36 <__aeabi_dsub+0xba>
 8000b34:	e137      	b.n	8000da6 <__aeabi_dsub+0x32a>
 8000b36:	4648      	mov	r0, r9
 8000b38:	f000 fbd6 	bl	80012e8 <__clzsi2>
 8000b3c:	0001      	movs	r1, r0
 8000b3e:	3908      	subs	r1, #8
 8000b40:	2320      	movs	r3, #32
 8000b42:	0022      	movs	r2, r4
 8000b44:	4648      	mov	r0, r9
 8000b46:	1a5b      	subs	r3, r3, r1
 8000b48:	40da      	lsrs	r2, r3
 8000b4a:	4088      	lsls	r0, r1
 8000b4c:	408c      	lsls	r4, r1
 8000b4e:	4643      	mov	r3, r8
 8000b50:	4310      	orrs	r0, r2
 8000b52:	4588      	cmp	r8, r1
 8000b54:	dd00      	ble.n	8000b58 <__aeabi_dsub+0xdc>
 8000b56:	e136      	b.n	8000dc6 <__aeabi_dsub+0x34a>
 8000b58:	1ac9      	subs	r1, r1, r3
 8000b5a:	1c4b      	adds	r3, r1, #1
 8000b5c:	2b1f      	cmp	r3, #31
 8000b5e:	dd00      	ble.n	8000b62 <__aeabi_dsub+0xe6>
 8000b60:	e0ea      	b.n	8000d38 <__aeabi_dsub+0x2bc>
 8000b62:	2220      	movs	r2, #32
 8000b64:	0026      	movs	r6, r4
 8000b66:	1ad2      	subs	r2, r2, r3
 8000b68:	0001      	movs	r1, r0
 8000b6a:	4094      	lsls	r4, r2
 8000b6c:	40de      	lsrs	r6, r3
 8000b6e:	40d8      	lsrs	r0, r3
 8000b70:	2300      	movs	r3, #0
 8000b72:	4091      	lsls	r1, r2
 8000b74:	1e62      	subs	r2, r4, #1
 8000b76:	4194      	sbcs	r4, r2
 8000b78:	4681      	mov	r9, r0
 8000b7a:	4698      	mov	r8, r3
 8000b7c:	4331      	orrs	r1, r6
 8000b7e:	430c      	orrs	r4, r1
 8000b80:	0763      	lsls	r3, r4, #29
 8000b82:	d009      	beq.n	8000b98 <__aeabi_dsub+0x11c>
 8000b84:	230f      	movs	r3, #15
 8000b86:	4023      	ands	r3, r4
 8000b88:	2b04      	cmp	r3, #4
 8000b8a:	d005      	beq.n	8000b98 <__aeabi_dsub+0x11c>
 8000b8c:	1d23      	adds	r3, r4, #4
 8000b8e:	42a3      	cmp	r3, r4
 8000b90:	41a4      	sbcs	r4, r4
 8000b92:	4264      	negs	r4, r4
 8000b94:	44a1      	add	r9, r4
 8000b96:	001c      	movs	r4, r3
 8000b98:	464b      	mov	r3, r9
 8000b9a:	021b      	lsls	r3, r3, #8
 8000b9c:	d400      	bmi.n	8000ba0 <__aeabi_dsub+0x124>
 8000b9e:	e0de      	b.n	8000d5e <__aeabi_dsub+0x2e2>
 8000ba0:	4641      	mov	r1, r8
 8000ba2:	4b8c      	ldr	r3, [pc, #560]	; (8000dd4 <__aeabi_dsub+0x358>)
 8000ba4:	3101      	adds	r1, #1
 8000ba6:	4299      	cmp	r1, r3
 8000ba8:	d100      	bne.n	8000bac <__aeabi_dsub+0x130>
 8000baa:	e0e7      	b.n	8000d7c <__aeabi_dsub+0x300>
 8000bac:	464b      	mov	r3, r9
 8000bae:	488a      	ldr	r0, [pc, #552]	; (8000dd8 <__aeabi_dsub+0x35c>)
 8000bb0:	08e4      	lsrs	r4, r4, #3
 8000bb2:	4003      	ands	r3, r0
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	0549      	lsls	r1, r1, #21
 8000bb8:	075b      	lsls	r3, r3, #29
 8000bba:	0240      	lsls	r0, r0, #9
 8000bbc:	4323      	orrs	r3, r4
 8000bbe:	0d4a      	lsrs	r2, r1, #21
 8000bc0:	0b04      	lsrs	r4, r0, #12
 8000bc2:	0512      	lsls	r2, r2, #20
 8000bc4:	07ed      	lsls	r5, r5, #31
 8000bc6:	4322      	orrs	r2, r4
 8000bc8:	432a      	orrs	r2, r5
 8000bca:	0018      	movs	r0, r3
 8000bcc:	0011      	movs	r1, r2
 8000bce:	bcf0      	pop	{r4, r5, r6, r7}
 8000bd0:	46bb      	mov	fp, r7
 8000bd2:	46b2      	mov	sl, r6
 8000bd4:	46a9      	mov	r9, r5
 8000bd6:	46a0      	mov	r8, r4
 8000bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bda:	4642      	mov	r2, r8
 8000bdc:	1a12      	subs	r2, r2, r0
 8000bde:	2a00      	cmp	r2, #0
 8000be0:	dd52      	ble.n	8000c88 <__aeabi_dsub+0x20c>
 8000be2:	2800      	cmp	r0, #0
 8000be4:	d100      	bne.n	8000be8 <__aeabi_dsub+0x16c>
 8000be6:	e09c      	b.n	8000d22 <__aeabi_dsub+0x2a6>
 8000be8:	45a0      	cmp	r8, r4
 8000bea:	d100      	bne.n	8000bee <__aeabi_dsub+0x172>
 8000bec:	e0ca      	b.n	8000d84 <__aeabi_dsub+0x308>
 8000bee:	2080      	movs	r0, #128	; 0x80
 8000bf0:	0400      	lsls	r0, r0, #16
 8000bf2:	4301      	orrs	r1, r0
 8000bf4:	2a38      	cmp	r2, #56	; 0x38
 8000bf6:	dd00      	ble.n	8000bfa <__aeabi_dsub+0x17e>
 8000bf8:	e149      	b.n	8000e8e <__aeabi_dsub+0x412>
 8000bfa:	2a1f      	cmp	r2, #31
 8000bfc:	dc00      	bgt.n	8000c00 <__aeabi_dsub+0x184>
 8000bfe:	e197      	b.n	8000f30 <__aeabi_dsub+0x4b4>
 8000c00:	0010      	movs	r0, r2
 8000c02:	000e      	movs	r6, r1
 8000c04:	3820      	subs	r0, #32
 8000c06:	40c6      	lsrs	r6, r0
 8000c08:	2a20      	cmp	r2, #32
 8000c0a:	d004      	beq.n	8000c16 <__aeabi_dsub+0x19a>
 8000c0c:	2040      	movs	r0, #64	; 0x40
 8000c0e:	1a82      	subs	r2, r0, r2
 8000c10:	4091      	lsls	r1, r2
 8000c12:	430f      	orrs	r7, r1
 8000c14:	46b9      	mov	r9, r7
 8000c16:	464c      	mov	r4, r9
 8000c18:	1e62      	subs	r2, r4, #1
 8000c1a:	4194      	sbcs	r4, r2
 8000c1c:	4334      	orrs	r4, r6
 8000c1e:	e13a      	b.n	8000e96 <__aeabi_dsub+0x41a>
 8000c20:	000a      	movs	r2, r1
 8000c22:	433a      	orrs	r2, r7
 8000c24:	d028      	beq.n	8000c78 <__aeabi_dsub+0x1fc>
 8000c26:	46b3      	mov	fp, r6
 8000c28:	42b5      	cmp	r5, r6
 8000c2a:	d02b      	beq.n	8000c84 <__aeabi_dsub+0x208>
 8000c2c:	4a6b      	ldr	r2, [pc, #428]	; (8000ddc <__aeabi_dsub+0x360>)
 8000c2e:	4442      	add	r2, r8
 8000c30:	2a00      	cmp	r2, #0
 8000c32:	d05d      	beq.n	8000cf0 <__aeabi_dsub+0x274>
 8000c34:	4642      	mov	r2, r8
 8000c36:	4644      	mov	r4, r8
 8000c38:	1a82      	subs	r2, r0, r2
 8000c3a:	2c00      	cmp	r4, #0
 8000c3c:	d000      	beq.n	8000c40 <__aeabi_dsub+0x1c4>
 8000c3e:	e0f5      	b.n	8000e2c <__aeabi_dsub+0x3b0>
 8000c40:	4665      	mov	r5, ip
 8000c42:	431d      	orrs	r5, r3
 8000c44:	d100      	bne.n	8000c48 <__aeabi_dsub+0x1cc>
 8000c46:	e19c      	b.n	8000f82 <__aeabi_dsub+0x506>
 8000c48:	1e55      	subs	r5, r2, #1
 8000c4a:	2a01      	cmp	r2, #1
 8000c4c:	d100      	bne.n	8000c50 <__aeabi_dsub+0x1d4>
 8000c4e:	e1fb      	b.n	8001048 <__aeabi_dsub+0x5cc>
 8000c50:	4c60      	ldr	r4, [pc, #384]	; (8000dd4 <__aeabi_dsub+0x358>)
 8000c52:	42a2      	cmp	r2, r4
 8000c54:	d100      	bne.n	8000c58 <__aeabi_dsub+0x1dc>
 8000c56:	e1bd      	b.n	8000fd4 <__aeabi_dsub+0x558>
 8000c58:	002a      	movs	r2, r5
 8000c5a:	e0f0      	b.n	8000e3e <__aeabi_dsub+0x3c2>
 8000c5c:	0008      	movs	r0, r1
 8000c5e:	4338      	orrs	r0, r7
 8000c60:	d100      	bne.n	8000c64 <__aeabi_dsub+0x1e8>
 8000c62:	e0c3      	b.n	8000dec <__aeabi_dsub+0x370>
 8000c64:	1e50      	subs	r0, r2, #1
 8000c66:	2a01      	cmp	r2, #1
 8000c68:	d100      	bne.n	8000c6c <__aeabi_dsub+0x1f0>
 8000c6a:	e1a8      	b.n	8000fbe <__aeabi_dsub+0x542>
 8000c6c:	4c59      	ldr	r4, [pc, #356]	; (8000dd4 <__aeabi_dsub+0x358>)
 8000c6e:	42a2      	cmp	r2, r4
 8000c70:	d100      	bne.n	8000c74 <__aeabi_dsub+0x1f8>
 8000c72:	e087      	b.n	8000d84 <__aeabi_dsub+0x308>
 8000c74:	0002      	movs	r2, r0
 8000c76:	e736      	b.n	8000ae6 <__aeabi_dsub+0x6a>
 8000c78:	2201      	movs	r2, #1
 8000c7a:	4056      	eors	r6, r2
 8000c7c:	46b3      	mov	fp, r6
 8000c7e:	42b5      	cmp	r5, r6
 8000c80:	d000      	beq.n	8000c84 <__aeabi_dsub+0x208>
 8000c82:	e721      	b.n	8000ac8 <__aeabi_dsub+0x4c>
 8000c84:	4a55      	ldr	r2, [pc, #340]	; (8000ddc <__aeabi_dsub+0x360>)
 8000c86:	4442      	add	r2, r8
 8000c88:	2a00      	cmp	r2, #0
 8000c8a:	d100      	bne.n	8000c8e <__aeabi_dsub+0x212>
 8000c8c:	e0b5      	b.n	8000dfa <__aeabi_dsub+0x37e>
 8000c8e:	4642      	mov	r2, r8
 8000c90:	4644      	mov	r4, r8
 8000c92:	1a82      	subs	r2, r0, r2
 8000c94:	2c00      	cmp	r4, #0
 8000c96:	d100      	bne.n	8000c9a <__aeabi_dsub+0x21e>
 8000c98:	e138      	b.n	8000f0c <__aeabi_dsub+0x490>
 8000c9a:	4e4e      	ldr	r6, [pc, #312]	; (8000dd4 <__aeabi_dsub+0x358>)
 8000c9c:	42b0      	cmp	r0, r6
 8000c9e:	d100      	bne.n	8000ca2 <__aeabi_dsub+0x226>
 8000ca0:	e1de      	b.n	8001060 <__aeabi_dsub+0x5e4>
 8000ca2:	2680      	movs	r6, #128	; 0x80
 8000ca4:	4664      	mov	r4, ip
 8000ca6:	0436      	lsls	r6, r6, #16
 8000ca8:	4334      	orrs	r4, r6
 8000caa:	46a4      	mov	ip, r4
 8000cac:	2a38      	cmp	r2, #56	; 0x38
 8000cae:	dd00      	ble.n	8000cb2 <__aeabi_dsub+0x236>
 8000cb0:	e196      	b.n	8000fe0 <__aeabi_dsub+0x564>
 8000cb2:	2a1f      	cmp	r2, #31
 8000cb4:	dd00      	ble.n	8000cb8 <__aeabi_dsub+0x23c>
 8000cb6:	e224      	b.n	8001102 <__aeabi_dsub+0x686>
 8000cb8:	2620      	movs	r6, #32
 8000cba:	1ab4      	subs	r4, r6, r2
 8000cbc:	46a2      	mov	sl, r4
 8000cbe:	4664      	mov	r4, ip
 8000cc0:	4656      	mov	r6, sl
 8000cc2:	40b4      	lsls	r4, r6
 8000cc4:	46a1      	mov	r9, r4
 8000cc6:	001c      	movs	r4, r3
 8000cc8:	464e      	mov	r6, r9
 8000cca:	40d4      	lsrs	r4, r2
 8000ccc:	4326      	orrs	r6, r4
 8000cce:	0034      	movs	r4, r6
 8000cd0:	4656      	mov	r6, sl
 8000cd2:	40b3      	lsls	r3, r6
 8000cd4:	1e5e      	subs	r6, r3, #1
 8000cd6:	41b3      	sbcs	r3, r6
 8000cd8:	431c      	orrs	r4, r3
 8000cda:	4663      	mov	r3, ip
 8000cdc:	40d3      	lsrs	r3, r2
 8000cde:	18c9      	adds	r1, r1, r3
 8000ce0:	19e4      	adds	r4, r4, r7
 8000ce2:	42bc      	cmp	r4, r7
 8000ce4:	41bf      	sbcs	r7, r7
 8000ce6:	427f      	negs	r7, r7
 8000ce8:	46b9      	mov	r9, r7
 8000cea:	4680      	mov	r8, r0
 8000cec:	4489      	add	r9, r1
 8000cee:	e0d8      	b.n	8000ea2 <__aeabi_dsub+0x426>
 8000cf0:	4640      	mov	r0, r8
 8000cf2:	4c3b      	ldr	r4, [pc, #236]	; (8000de0 <__aeabi_dsub+0x364>)
 8000cf4:	3001      	adds	r0, #1
 8000cf6:	4220      	tst	r0, r4
 8000cf8:	d000      	beq.n	8000cfc <__aeabi_dsub+0x280>
 8000cfa:	e0b4      	b.n	8000e66 <__aeabi_dsub+0x3ea>
 8000cfc:	4640      	mov	r0, r8
 8000cfe:	2800      	cmp	r0, #0
 8000d00:	d000      	beq.n	8000d04 <__aeabi_dsub+0x288>
 8000d02:	e144      	b.n	8000f8e <__aeabi_dsub+0x512>
 8000d04:	4660      	mov	r0, ip
 8000d06:	4318      	orrs	r0, r3
 8000d08:	d100      	bne.n	8000d0c <__aeabi_dsub+0x290>
 8000d0a:	e190      	b.n	800102e <__aeabi_dsub+0x5b2>
 8000d0c:	0008      	movs	r0, r1
 8000d0e:	4338      	orrs	r0, r7
 8000d10:	d000      	beq.n	8000d14 <__aeabi_dsub+0x298>
 8000d12:	e1aa      	b.n	800106a <__aeabi_dsub+0x5ee>
 8000d14:	4661      	mov	r1, ip
 8000d16:	08db      	lsrs	r3, r3, #3
 8000d18:	0749      	lsls	r1, r1, #29
 8000d1a:	430b      	orrs	r3, r1
 8000d1c:	4661      	mov	r1, ip
 8000d1e:	08cc      	lsrs	r4, r1, #3
 8000d20:	e027      	b.n	8000d72 <__aeabi_dsub+0x2f6>
 8000d22:	0008      	movs	r0, r1
 8000d24:	4338      	orrs	r0, r7
 8000d26:	d061      	beq.n	8000dec <__aeabi_dsub+0x370>
 8000d28:	1e50      	subs	r0, r2, #1
 8000d2a:	2a01      	cmp	r2, #1
 8000d2c:	d100      	bne.n	8000d30 <__aeabi_dsub+0x2b4>
 8000d2e:	e139      	b.n	8000fa4 <__aeabi_dsub+0x528>
 8000d30:	42a2      	cmp	r2, r4
 8000d32:	d027      	beq.n	8000d84 <__aeabi_dsub+0x308>
 8000d34:	0002      	movs	r2, r0
 8000d36:	e75d      	b.n	8000bf4 <__aeabi_dsub+0x178>
 8000d38:	0002      	movs	r2, r0
 8000d3a:	391f      	subs	r1, #31
 8000d3c:	40ca      	lsrs	r2, r1
 8000d3e:	0011      	movs	r1, r2
 8000d40:	2b20      	cmp	r3, #32
 8000d42:	d003      	beq.n	8000d4c <__aeabi_dsub+0x2d0>
 8000d44:	2240      	movs	r2, #64	; 0x40
 8000d46:	1ad3      	subs	r3, r2, r3
 8000d48:	4098      	lsls	r0, r3
 8000d4a:	4304      	orrs	r4, r0
 8000d4c:	1e63      	subs	r3, r4, #1
 8000d4e:	419c      	sbcs	r4, r3
 8000d50:	2300      	movs	r3, #0
 8000d52:	4699      	mov	r9, r3
 8000d54:	4698      	mov	r8, r3
 8000d56:	430c      	orrs	r4, r1
 8000d58:	0763      	lsls	r3, r4, #29
 8000d5a:	d000      	beq.n	8000d5e <__aeabi_dsub+0x2e2>
 8000d5c:	e712      	b.n	8000b84 <__aeabi_dsub+0x108>
 8000d5e:	464b      	mov	r3, r9
 8000d60:	464a      	mov	r2, r9
 8000d62:	08e4      	lsrs	r4, r4, #3
 8000d64:	075b      	lsls	r3, r3, #29
 8000d66:	4323      	orrs	r3, r4
 8000d68:	08d4      	lsrs	r4, r2, #3
 8000d6a:	4642      	mov	r2, r8
 8000d6c:	4919      	ldr	r1, [pc, #100]	; (8000dd4 <__aeabi_dsub+0x358>)
 8000d6e:	428a      	cmp	r2, r1
 8000d70:	d00e      	beq.n	8000d90 <__aeabi_dsub+0x314>
 8000d72:	0324      	lsls	r4, r4, #12
 8000d74:	0552      	lsls	r2, r2, #21
 8000d76:	0b24      	lsrs	r4, r4, #12
 8000d78:	0d52      	lsrs	r2, r2, #21
 8000d7a:	e722      	b.n	8000bc2 <__aeabi_dsub+0x146>
 8000d7c:	000a      	movs	r2, r1
 8000d7e:	2400      	movs	r4, #0
 8000d80:	2300      	movs	r3, #0
 8000d82:	e71e      	b.n	8000bc2 <__aeabi_dsub+0x146>
 8000d84:	08db      	lsrs	r3, r3, #3
 8000d86:	4662      	mov	r2, ip
 8000d88:	0752      	lsls	r2, r2, #29
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	4662      	mov	r2, ip
 8000d8e:	08d4      	lsrs	r4, r2, #3
 8000d90:	001a      	movs	r2, r3
 8000d92:	4322      	orrs	r2, r4
 8000d94:	d100      	bne.n	8000d98 <__aeabi_dsub+0x31c>
 8000d96:	e1fc      	b.n	8001192 <__aeabi_dsub+0x716>
 8000d98:	2280      	movs	r2, #128	; 0x80
 8000d9a:	0312      	lsls	r2, r2, #12
 8000d9c:	4314      	orrs	r4, r2
 8000d9e:	0324      	lsls	r4, r4, #12
 8000da0:	4a0c      	ldr	r2, [pc, #48]	; (8000dd4 <__aeabi_dsub+0x358>)
 8000da2:	0b24      	lsrs	r4, r4, #12
 8000da4:	e70d      	b.n	8000bc2 <__aeabi_dsub+0x146>
 8000da6:	0020      	movs	r0, r4
 8000da8:	f000 fa9e 	bl	80012e8 <__clzsi2>
 8000dac:	0001      	movs	r1, r0
 8000dae:	3118      	adds	r1, #24
 8000db0:	291f      	cmp	r1, #31
 8000db2:	dc00      	bgt.n	8000db6 <__aeabi_dsub+0x33a>
 8000db4:	e6c4      	b.n	8000b40 <__aeabi_dsub+0xc4>
 8000db6:	3808      	subs	r0, #8
 8000db8:	4084      	lsls	r4, r0
 8000dba:	4643      	mov	r3, r8
 8000dbc:	0020      	movs	r0, r4
 8000dbe:	2400      	movs	r4, #0
 8000dc0:	4588      	cmp	r8, r1
 8000dc2:	dc00      	bgt.n	8000dc6 <__aeabi_dsub+0x34a>
 8000dc4:	e6c8      	b.n	8000b58 <__aeabi_dsub+0xdc>
 8000dc6:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <__aeabi_dsub+0x35c>)
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	4010      	ands	r0, r2
 8000dcc:	4698      	mov	r8, r3
 8000dce:	4681      	mov	r9, r0
 8000dd0:	e6d6      	b.n	8000b80 <__aeabi_dsub+0x104>
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	000007ff 	.word	0x000007ff
 8000dd8:	ff7fffff 	.word	0xff7fffff
 8000ddc:	fffff801 	.word	0xfffff801
 8000de0:	000007fe 	.word	0x000007fe
 8000de4:	430f      	orrs	r7, r1
 8000de6:	1e7a      	subs	r2, r7, #1
 8000de8:	4197      	sbcs	r7, r2
 8000dea:	e691      	b.n	8000b10 <__aeabi_dsub+0x94>
 8000dec:	4661      	mov	r1, ip
 8000dee:	08db      	lsrs	r3, r3, #3
 8000df0:	0749      	lsls	r1, r1, #29
 8000df2:	430b      	orrs	r3, r1
 8000df4:	4661      	mov	r1, ip
 8000df6:	08cc      	lsrs	r4, r1, #3
 8000df8:	e7b8      	b.n	8000d6c <__aeabi_dsub+0x2f0>
 8000dfa:	4640      	mov	r0, r8
 8000dfc:	4cd3      	ldr	r4, [pc, #844]	; (800114c <__aeabi_dsub+0x6d0>)
 8000dfe:	3001      	adds	r0, #1
 8000e00:	4220      	tst	r0, r4
 8000e02:	d000      	beq.n	8000e06 <__aeabi_dsub+0x38a>
 8000e04:	e0a2      	b.n	8000f4c <__aeabi_dsub+0x4d0>
 8000e06:	4640      	mov	r0, r8
 8000e08:	2800      	cmp	r0, #0
 8000e0a:	d000      	beq.n	8000e0e <__aeabi_dsub+0x392>
 8000e0c:	e101      	b.n	8001012 <__aeabi_dsub+0x596>
 8000e0e:	4660      	mov	r0, ip
 8000e10:	4318      	orrs	r0, r3
 8000e12:	d100      	bne.n	8000e16 <__aeabi_dsub+0x39a>
 8000e14:	e15e      	b.n	80010d4 <__aeabi_dsub+0x658>
 8000e16:	0008      	movs	r0, r1
 8000e18:	4338      	orrs	r0, r7
 8000e1a:	d000      	beq.n	8000e1e <__aeabi_dsub+0x3a2>
 8000e1c:	e15f      	b.n	80010de <__aeabi_dsub+0x662>
 8000e1e:	4661      	mov	r1, ip
 8000e20:	08db      	lsrs	r3, r3, #3
 8000e22:	0749      	lsls	r1, r1, #29
 8000e24:	430b      	orrs	r3, r1
 8000e26:	4661      	mov	r1, ip
 8000e28:	08cc      	lsrs	r4, r1, #3
 8000e2a:	e7a2      	b.n	8000d72 <__aeabi_dsub+0x2f6>
 8000e2c:	4dc8      	ldr	r5, [pc, #800]	; (8001150 <__aeabi_dsub+0x6d4>)
 8000e2e:	42a8      	cmp	r0, r5
 8000e30:	d100      	bne.n	8000e34 <__aeabi_dsub+0x3b8>
 8000e32:	e0cf      	b.n	8000fd4 <__aeabi_dsub+0x558>
 8000e34:	2580      	movs	r5, #128	; 0x80
 8000e36:	4664      	mov	r4, ip
 8000e38:	042d      	lsls	r5, r5, #16
 8000e3a:	432c      	orrs	r4, r5
 8000e3c:	46a4      	mov	ip, r4
 8000e3e:	2a38      	cmp	r2, #56	; 0x38
 8000e40:	dc56      	bgt.n	8000ef0 <__aeabi_dsub+0x474>
 8000e42:	2a1f      	cmp	r2, #31
 8000e44:	dd00      	ble.n	8000e48 <__aeabi_dsub+0x3cc>
 8000e46:	e0d1      	b.n	8000fec <__aeabi_dsub+0x570>
 8000e48:	2520      	movs	r5, #32
 8000e4a:	001e      	movs	r6, r3
 8000e4c:	1aad      	subs	r5, r5, r2
 8000e4e:	4664      	mov	r4, ip
 8000e50:	40ab      	lsls	r3, r5
 8000e52:	40ac      	lsls	r4, r5
 8000e54:	40d6      	lsrs	r6, r2
 8000e56:	1e5d      	subs	r5, r3, #1
 8000e58:	41ab      	sbcs	r3, r5
 8000e5a:	4334      	orrs	r4, r6
 8000e5c:	4323      	orrs	r3, r4
 8000e5e:	4664      	mov	r4, ip
 8000e60:	40d4      	lsrs	r4, r2
 8000e62:	1b09      	subs	r1, r1, r4
 8000e64:	e049      	b.n	8000efa <__aeabi_dsub+0x47e>
 8000e66:	4660      	mov	r0, ip
 8000e68:	1bdc      	subs	r4, r3, r7
 8000e6a:	1a46      	subs	r6, r0, r1
 8000e6c:	42a3      	cmp	r3, r4
 8000e6e:	4180      	sbcs	r0, r0
 8000e70:	4240      	negs	r0, r0
 8000e72:	4681      	mov	r9, r0
 8000e74:	0030      	movs	r0, r6
 8000e76:	464e      	mov	r6, r9
 8000e78:	1b80      	subs	r0, r0, r6
 8000e7a:	4681      	mov	r9, r0
 8000e7c:	0200      	lsls	r0, r0, #8
 8000e7e:	d476      	bmi.n	8000f6e <__aeabi_dsub+0x4f2>
 8000e80:	464b      	mov	r3, r9
 8000e82:	4323      	orrs	r3, r4
 8000e84:	d000      	beq.n	8000e88 <__aeabi_dsub+0x40c>
 8000e86:	e652      	b.n	8000b2e <__aeabi_dsub+0xb2>
 8000e88:	2400      	movs	r4, #0
 8000e8a:	2500      	movs	r5, #0
 8000e8c:	e771      	b.n	8000d72 <__aeabi_dsub+0x2f6>
 8000e8e:	4339      	orrs	r1, r7
 8000e90:	000c      	movs	r4, r1
 8000e92:	1e62      	subs	r2, r4, #1
 8000e94:	4194      	sbcs	r4, r2
 8000e96:	18e4      	adds	r4, r4, r3
 8000e98:	429c      	cmp	r4, r3
 8000e9a:	419b      	sbcs	r3, r3
 8000e9c:	425b      	negs	r3, r3
 8000e9e:	4463      	add	r3, ip
 8000ea0:	4699      	mov	r9, r3
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	021b      	lsls	r3, r3, #8
 8000ea6:	d400      	bmi.n	8000eaa <__aeabi_dsub+0x42e>
 8000ea8:	e756      	b.n	8000d58 <__aeabi_dsub+0x2dc>
 8000eaa:	2301      	movs	r3, #1
 8000eac:	469c      	mov	ip, r3
 8000eae:	4ba8      	ldr	r3, [pc, #672]	; (8001150 <__aeabi_dsub+0x6d4>)
 8000eb0:	44e0      	add	r8, ip
 8000eb2:	4598      	cmp	r8, r3
 8000eb4:	d038      	beq.n	8000f28 <__aeabi_dsub+0x4ac>
 8000eb6:	464b      	mov	r3, r9
 8000eb8:	48a6      	ldr	r0, [pc, #664]	; (8001154 <__aeabi_dsub+0x6d8>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	4003      	ands	r3, r0
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	0863      	lsrs	r3, r4, #1
 8000ec2:	4014      	ands	r4, r2
 8000ec4:	431c      	orrs	r4, r3
 8000ec6:	07c3      	lsls	r3, r0, #31
 8000ec8:	431c      	orrs	r4, r3
 8000eca:	0843      	lsrs	r3, r0, #1
 8000ecc:	4699      	mov	r9, r3
 8000ece:	e657      	b.n	8000b80 <__aeabi_dsub+0x104>
 8000ed0:	0010      	movs	r0, r2
 8000ed2:	000e      	movs	r6, r1
 8000ed4:	3820      	subs	r0, #32
 8000ed6:	40c6      	lsrs	r6, r0
 8000ed8:	2a20      	cmp	r2, #32
 8000eda:	d004      	beq.n	8000ee6 <__aeabi_dsub+0x46a>
 8000edc:	2040      	movs	r0, #64	; 0x40
 8000ede:	1a82      	subs	r2, r0, r2
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	430f      	orrs	r7, r1
 8000ee4:	46b9      	mov	r9, r7
 8000ee6:	464f      	mov	r7, r9
 8000ee8:	1e7a      	subs	r2, r7, #1
 8000eea:	4197      	sbcs	r7, r2
 8000eec:	4337      	orrs	r7, r6
 8000eee:	e60f      	b.n	8000b10 <__aeabi_dsub+0x94>
 8000ef0:	4662      	mov	r2, ip
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	0013      	movs	r3, r2
 8000ef6:	1e5a      	subs	r2, r3, #1
 8000ef8:	4193      	sbcs	r3, r2
 8000efa:	1afc      	subs	r4, r7, r3
 8000efc:	42a7      	cmp	r7, r4
 8000efe:	41bf      	sbcs	r7, r7
 8000f00:	427f      	negs	r7, r7
 8000f02:	1bcb      	subs	r3, r1, r7
 8000f04:	4699      	mov	r9, r3
 8000f06:	465d      	mov	r5, fp
 8000f08:	4680      	mov	r8, r0
 8000f0a:	e608      	b.n	8000b1e <__aeabi_dsub+0xa2>
 8000f0c:	4666      	mov	r6, ip
 8000f0e:	431e      	orrs	r6, r3
 8000f10:	d100      	bne.n	8000f14 <__aeabi_dsub+0x498>
 8000f12:	e0be      	b.n	8001092 <__aeabi_dsub+0x616>
 8000f14:	1e56      	subs	r6, r2, #1
 8000f16:	2a01      	cmp	r2, #1
 8000f18:	d100      	bne.n	8000f1c <__aeabi_dsub+0x4a0>
 8000f1a:	e109      	b.n	8001130 <__aeabi_dsub+0x6b4>
 8000f1c:	4c8c      	ldr	r4, [pc, #560]	; (8001150 <__aeabi_dsub+0x6d4>)
 8000f1e:	42a2      	cmp	r2, r4
 8000f20:	d100      	bne.n	8000f24 <__aeabi_dsub+0x4a8>
 8000f22:	e119      	b.n	8001158 <__aeabi_dsub+0x6dc>
 8000f24:	0032      	movs	r2, r6
 8000f26:	e6c1      	b.n	8000cac <__aeabi_dsub+0x230>
 8000f28:	4642      	mov	r2, r8
 8000f2a:	2400      	movs	r4, #0
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	e648      	b.n	8000bc2 <__aeabi_dsub+0x146>
 8000f30:	2020      	movs	r0, #32
 8000f32:	000c      	movs	r4, r1
 8000f34:	1a80      	subs	r0, r0, r2
 8000f36:	003e      	movs	r6, r7
 8000f38:	4087      	lsls	r7, r0
 8000f3a:	4084      	lsls	r4, r0
 8000f3c:	40d6      	lsrs	r6, r2
 8000f3e:	1e78      	subs	r0, r7, #1
 8000f40:	4187      	sbcs	r7, r0
 8000f42:	40d1      	lsrs	r1, r2
 8000f44:	4334      	orrs	r4, r6
 8000f46:	433c      	orrs	r4, r7
 8000f48:	448c      	add	ip, r1
 8000f4a:	e7a4      	b.n	8000e96 <__aeabi_dsub+0x41a>
 8000f4c:	4a80      	ldr	r2, [pc, #512]	; (8001150 <__aeabi_dsub+0x6d4>)
 8000f4e:	4290      	cmp	r0, r2
 8000f50:	d100      	bne.n	8000f54 <__aeabi_dsub+0x4d8>
 8000f52:	e0e9      	b.n	8001128 <__aeabi_dsub+0x6ac>
 8000f54:	19df      	adds	r7, r3, r7
 8000f56:	429f      	cmp	r7, r3
 8000f58:	419b      	sbcs	r3, r3
 8000f5a:	4461      	add	r1, ip
 8000f5c:	425b      	negs	r3, r3
 8000f5e:	18c9      	adds	r1, r1, r3
 8000f60:	07cc      	lsls	r4, r1, #31
 8000f62:	087f      	lsrs	r7, r7, #1
 8000f64:	084b      	lsrs	r3, r1, #1
 8000f66:	4699      	mov	r9, r3
 8000f68:	4680      	mov	r8, r0
 8000f6a:	433c      	orrs	r4, r7
 8000f6c:	e6f4      	b.n	8000d58 <__aeabi_dsub+0x2dc>
 8000f6e:	1afc      	subs	r4, r7, r3
 8000f70:	42a7      	cmp	r7, r4
 8000f72:	41bf      	sbcs	r7, r7
 8000f74:	4663      	mov	r3, ip
 8000f76:	427f      	negs	r7, r7
 8000f78:	1ac9      	subs	r1, r1, r3
 8000f7a:	1bcb      	subs	r3, r1, r7
 8000f7c:	4699      	mov	r9, r3
 8000f7e:	465d      	mov	r5, fp
 8000f80:	e5d5      	b.n	8000b2e <__aeabi_dsub+0xb2>
 8000f82:	08ff      	lsrs	r7, r7, #3
 8000f84:	074b      	lsls	r3, r1, #29
 8000f86:	465d      	mov	r5, fp
 8000f88:	433b      	orrs	r3, r7
 8000f8a:	08cc      	lsrs	r4, r1, #3
 8000f8c:	e6ee      	b.n	8000d6c <__aeabi_dsub+0x2f0>
 8000f8e:	4662      	mov	r2, ip
 8000f90:	431a      	orrs	r2, r3
 8000f92:	d000      	beq.n	8000f96 <__aeabi_dsub+0x51a>
 8000f94:	e082      	b.n	800109c <__aeabi_dsub+0x620>
 8000f96:	000b      	movs	r3, r1
 8000f98:	433b      	orrs	r3, r7
 8000f9a:	d11b      	bne.n	8000fd4 <__aeabi_dsub+0x558>
 8000f9c:	2480      	movs	r4, #128	; 0x80
 8000f9e:	2500      	movs	r5, #0
 8000fa0:	0324      	lsls	r4, r4, #12
 8000fa2:	e6f9      	b.n	8000d98 <__aeabi_dsub+0x31c>
 8000fa4:	19dc      	adds	r4, r3, r7
 8000fa6:	429c      	cmp	r4, r3
 8000fa8:	419b      	sbcs	r3, r3
 8000faa:	4461      	add	r1, ip
 8000fac:	4689      	mov	r9, r1
 8000fae:	425b      	negs	r3, r3
 8000fb0:	4499      	add	r9, r3
 8000fb2:	464b      	mov	r3, r9
 8000fb4:	021b      	lsls	r3, r3, #8
 8000fb6:	d444      	bmi.n	8001042 <__aeabi_dsub+0x5c6>
 8000fb8:	2301      	movs	r3, #1
 8000fba:	4698      	mov	r8, r3
 8000fbc:	e6cc      	b.n	8000d58 <__aeabi_dsub+0x2dc>
 8000fbe:	1bdc      	subs	r4, r3, r7
 8000fc0:	4662      	mov	r2, ip
 8000fc2:	42a3      	cmp	r3, r4
 8000fc4:	419b      	sbcs	r3, r3
 8000fc6:	1a51      	subs	r1, r2, r1
 8000fc8:	425b      	negs	r3, r3
 8000fca:	1acb      	subs	r3, r1, r3
 8000fcc:	4699      	mov	r9, r3
 8000fce:	2301      	movs	r3, #1
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	e5a4      	b.n	8000b1e <__aeabi_dsub+0xa2>
 8000fd4:	08ff      	lsrs	r7, r7, #3
 8000fd6:	074b      	lsls	r3, r1, #29
 8000fd8:	465d      	mov	r5, fp
 8000fda:	433b      	orrs	r3, r7
 8000fdc:	08cc      	lsrs	r4, r1, #3
 8000fde:	e6d7      	b.n	8000d90 <__aeabi_dsub+0x314>
 8000fe0:	4662      	mov	r2, ip
 8000fe2:	431a      	orrs	r2, r3
 8000fe4:	0014      	movs	r4, r2
 8000fe6:	1e63      	subs	r3, r4, #1
 8000fe8:	419c      	sbcs	r4, r3
 8000fea:	e679      	b.n	8000ce0 <__aeabi_dsub+0x264>
 8000fec:	0015      	movs	r5, r2
 8000fee:	4664      	mov	r4, ip
 8000ff0:	3d20      	subs	r5, #32
 8000ff2:	40ec      	lsrs	r4, r5
 8000ff4:	46a0      	mov	r8, r4
 8000ff6:	2a20      	cmp	r2, #32
 8000ff8:	d005      	beq.n	8001006 <__aeabi_dsub+0x58a>
 8000ffa:	2540      	movs	r5, #64	; 0x40
 8000ffc:	4664      	mov	r4, ip
 8000ffe:	1aaa      	subs	r2, r5, r2
 8001000:	4094      	lsls	r4, r2
 8001002:	4323      	orrs	r3, r4
 8001004:	469a      	mov	sl, r3
 8001006:	4654      	mov	r4, sl
 8001008:	1e63      	subs	r3, r4, #1
 800100a:	419c      	sbcs	r4, r3
 800100c:	4643      	mov	r3, r8
 800100e:	4323      	orrs	r3, r4
 8001010:	e773      	b.n	8000efa <__aeabi_dsub+0x47e>
 8001012:	4662      	mov	r2, ip
 8001014:	431a      	orrs	r2, r3
 8001016:	d023      	beq.n	8001060 <__aeabi_dsub+0x5e4>
 8001018:	000a      	movs	r2, r1
 800101a:	433a      	orrs	r2, r7
 800101c:	d000      	beq.n	8001020 <__aeabi_dsub+0x5a4>
 800101e:	e0a0      	b.n	8001162 <__aeabi_dsub+0x6e6>
 8001020:	4662      	mov	r2, ip
 8001022:	08db      	lsrs	r3, r3, #3
 8001024:	0752      	lsls	r2, r2, #29
 8001026:	4313      	orrs	r3, r2
 8001028:	4662      	mov	r2, ip
 800102a:	08d4      	lsrs	r4, r2, #3
 800102c:	e6b0      	b.n	8000d90 <__aeabi_dsub+0x314>
 800102e:	000b      	movs	r3, r1
 8001030:	433b      	orrs	r3, r7
 8001032:	d100      	bne.n	8001036 <__aeabi_dsub+0x5ba>
 8001034:	e728      	b.n	8000e88 <__aeabi_dsub+0x40c>
 8001036:	08ff      	lsrs	r7, r7, #3
 8001038:	074b      	lsls	r3, r1, #29
 800103a:	465d      	mov	r5, fp
 800103c:	433b      	orrs	r3, r7
 800103e:	08cc      	lsrs	r4, r1, #3
 8001040:	e697      	b.n	8000d72 <__aeabi_dsub+0x2f6>
 8001042:	2302      	movs	r3, #2
 8001044:	4698      	mov	r8, r3
 8001046:	e736      	b.n	8000eb6 <__aeabi_dsub+0x43a>
 8001048:	1afc      	subs	r4, r7, r3
 800104a:	42a7      	cmp	r7, r4
 800104c:	41bf      	sbcs	r7, r7
 800104e:	4663      	mov	r3, ip
 8001050:	427f      	negs	r7, r7
 8001052:	1ac9      	subs	r1, r1, r3
 8001054:	1bcb      	subs	r3, r1, r7
 8001056:	4699      	mov	r9, r3
 8001058:	2301      	movs	r3, #1
 800105a:	465d      	mov	r5, fp
 800105c:	4698      	mov	r8, r3
 800105e:	e55e      	b.n	8000b1e <__aeabi_dsub+0xa2>
 8001060:	074b      	lsls	r3, r1, #29
 8001062:	08ff      	lsrs	r7, r7, #3
 8001064:	433b      	orrs	r3, r7
 8001066:	08cc      	lsrs	r4, r1, #3
 8001068:	e692      	b.n	8000d90 <__aeabi_dsub+0x314>
 800106a:	1bdc      	subs	r4, r3, r7
 800106c:	4660      	mov	r0, ip
 800106e:	42a3      	cmp	r3, r4
 8001070:	41b6      	sbcs	r6, r6
 8001072:	1a40      	subs	r0, r0, r1
 8001074:	4276      	negs	r6, r6
 8001076:	1b80      	subs	r0, r0, r6
 8001078:	4681      	mov	r9, r0
 800107a:	0200      	lsls	r0, r0, #8
 800107c:	d560      	bpl.n	8001140 <__aeabi_dsub+0x6c4>
 800107e:	1afc      	subs	r4, r7, r3
 8001080:	42a7      	cmp	r7, r4
 8001082:	41bf      	sbcs	r7, r7
 8001084:	4663      	mov	r3, ip
 8001086:	427f      	negs	r7, r7
 8001088:	1ac9      	subs	r1, r1, r3
 800108a:	1bcb      	subs	r3, r1, r7
 800108c:	4699      	mov	r9, r3
 800108e:	465d      	mov	r5, fp
 8001090:	e576      	b.n	8000b80 <__aeabi_dsub+0x104>
 8001092:	08ff      	lsrs	r7, r7, #3
 8001094:	074b      	lsls	r3, r1, #29
 8001096:	433b      	orrs	r3, r7
 8001098:	08cc      	lsrs	r4, r1, #3
 800109a:	e667      	b.n	8000d6c <__aeabi_dsub+0x2f0>
 800109c:	000a      	movs	r2, r1
 800109e:	08db      	lsrs	r3, r3, #3
 80010a0:	433a      	orrs	r2, r7
 80010a2:	d100      	bne.n	80010a6 <__aeabi_dsub+0x62a>
 80010a4:	e66f      	b.n	8000d86 <__aeabi_dsub+0x30a>
 80010a6:	4662      	mov	r2, ip
 80010a8:	0752      	lsls	r2, r2, #29
 80010aa:	4313      	orrs	r3, r2
 80010ac:	4662      	mov	r2, ip
 80010ae:	08d4      	lsrs	r4, r2, #3
 80010b0:	2280      	movs	r2, #128	; 0x80
 80010b2:	0312      	lsls	r2, r2, #12
 80010b4:	4214      	tst	r4, r2
 80010b6:	d007      	beq.n	80010c8 <__aeabi_dsub+0x64c>
 80010b8:	08c8      	lsrs	r0, r1, #3
 80010ba:	4210      	tst	r0, r2
 80010bc:	d104      	bne.n	80010c8 <__aeabi_dsub+0x64c>
 80010be:	465d      	mov	r5, fp
 80010c0:	0004      	movs	r4, r0
 80010c2:	08fb      	lsrs	r3, r7, #3
 80010c4:	0749      	lsls	r1, r1, #29
 80010c6:	430b      	orrs	r3, r1
 80010c8:	0f5a      	lsrs	r2, r3, #29
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	08db      	lsrs	r3, r3, #3
 80010ce:	0752      	lsls	r2, r2, #29
 80010d0:	4313      	orrs	r3, r2
 80010d2:	e65d      	b.n	8000d90 <__aeabi_dsub+0x314>
 80010d4:	074b      	lsls	r3, r1, #29
 80010d6:	08ff      	lsrs	r7, r7, #3
 80010d8:	433b      	orrs	r3, r7
 80010da:	08cc      	lsrs	r4, r1, #3
 80010dc:	e649      	b.n	8000d72 <__aeabi_dsub+0x2f6>
 80010de:	19dc      	adds	r4, r3, r7
 80010e0:	429c      	cmp	r4, r3
 80010e2:	419b      	sbcs	r3, r3
 80010e4:	4461      	add	r1, ip
 80010e6:	4689      	mov	r9, r1
 80010e8:	425b      	negs	r3, r3
 80010ea:	4499      	add	r9, r3
 80010ec:	464b      	mov	r3, r9
 80010ee:	021b      	lsls	r3, r3, #8
 80010f0:	d400      	bmi.n	80010f4 <__aeabi_dsub+0x678>
 80010f2:	e631      	b.n	8000d58 <__aeabi_dsub+0x2dc>
 80010f4:	464a      	mov	r2, r9
 80010f6:	4b17      	ldr	r3, [pc, #92]	; (8001154 <__aeabi_dsub+0x6d8>)
 80010f8:	401a      	ands	r2, r3
 80010fa:	2301      	movs	r3, #1
 80010fc:	4691      	mov	r9, r2
 80010fe:	4698      	mov	r8, r3
 8001100:	e62a      	b.n	8000d58 <__aeabi_dsub+0x2dc>
 8001102:	0016      	movs	r6, r2
 8001104:	4664      	mov	r4, ip
 8001106:	3e20      	subs	r6, #32
 8001108:	40f4      	lsrs	r4, r6
 800110a:	46a0      	mov	r8, r4
 800110c:	2a20      	cmp	r2, #32
 800110e:	d005      	beq.n	800111c <__aeabi_dsub+0x6a0>
 8001110:	2640      	movs	r6, #64	; 0x40
 8001112:	4664      	mov	r4, ip
 8001114:	1ab2      	subs	r2, r6, r2
 8001116:	4094      	lsls	r4, r2
 8001118:	4323      	orrs	r3, r4
 800111a:	469a      	mov	sl, r3
 800111c:	4654      	mov	r4, sl
 800111e:	1e63      	subs	r3, r4, #1
 8001120:	419c      	sbcs	r4, r3
 8001122:	4643      	mov	r3, r8
 8001124:	431c      	orrs	r4, r3
 8001126:	e5db      	b.n	8000ce0 <__aeabi_dsub+0x264>
 8001128:	0002      	movs	r2, r0
 800112a:	2400      	movs	r4, #0
 800112c:	2300      	movs	r3, #0
 800112e:	e548      	b.n	8000bc2 <__aeabi_dsub+0x146>
 8001130:	19dc      	adds	r4, r3, r7
 8001132:	42bc      	cmp	r4, r7
 8001134:	41bf      	sbcs	r7, r7
 8001136:	4461      	add	r1, ip
 8001138:	4689      	mov	r9, r1
 800113a:	427f      	negs	r7, r7
 800113c:	44b9      	add	r9, r7
 800113e:	e738      	b.n	8000fb2 <__aeabi_dsub+0x536>
 8001140:	464b      	mov	r3, r9
 8001142:	4323      	orrs	r3, r4
 8001144:	d100      	bne.n	8001148 <__aeabi_dsub+0x6cc>
 8001146:	e69f      	b.n	8000e88 <__aeabi_dsub+0x40c>
 8001148:	e606      	b.n	8000d58 <__aeabi_dsub+0x2dc>
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	000007fe 	.word	0x000007fe
 8001150:	000007ff 	.word	0x000007ff
 8001154:	ff7fffff 	.word	0xff7fffff
 8001158:	08ff      	lsrs	r7, r7, #3
 800115a:	074b      	lsls	r3, r1, #29
 800115c:	433b      	orrs	r3, r7
 800115e:	08cc      	lsrs	r4, r1, #3
 8001160:	e616      	b.n	8000d90 <__aeabi_dsub+0x314>
 8001162:	4662      	mov	r2, ip
 8001164:	08db      	lsrs	r3, r3, #3
 8001166:	0752      	lsls	r2, r2, #29
 8001168:	4313      	orrs	r3, r2
 800116a:	4662      	mov	r2, ip
 800116c:	08d4      	lsrs	r4, r2, #3
 800116e:	2280      	movs	r2, #128	; 0x80
 8001170:	0312      	lsls	r2, r2, #12
 8001172:	4214      	tst	r4, r2
 8001174:	d007      	beq.n	8001186 <__aeabi_dsub+0x70a>
 8001176:	08c8      	lsrs	r0, r1, #3
 8001178:	4210      	tst	r0, r2
 800117a:	d104      	bne.n	8001186 <__aeabi_dsub+0x70a>
 800117c:	465d      	mov	r5, fp
 800117e:	0004      	movs	r4, r0
 8001180:	08fb      	lsrs	r3, r7, #3
 8001182:	0749      	lsls	r1, r1, #29
 8001184:	430b      	orrs	r3, r1
 8001186:	0f5a      	lsrs	r2, r3, #29
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	0752      	lsls	r2, r2, #29
 800118c:	08db      	lsrs	r3, r3, #3
 800118e:	4313      	orrs	r3, r2
 8001190:	e5fe      	b.n	8000d90 <__aeabi_dsub+0x314>
 8001192:	2300      	movs	r3, #0
 8001194:	4a01      	ldr	r2, [pc, #4]	; (800119c <__aeabi_dsub+0x720>)
 8001196:	001c      	movs	r4, r3
 8001198:	e513      	b.n	8000bc2 <__aeabi_dsub+0x146>
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	000007ff 	.word	0x000007ff

080011a0 <__aeabi_d2iz>:
 80011a0:	000a      	movs	r2, r1
 80011a2:	b530      	push	{r4, r5, lr}
 80011a4:	4c13      	ldr	r4, [pc, #76]	; (80011f4 <__aeabi_d2iz+0x54>)
 80011a6:	0053      	lsls	r3, r2, #1
 80011a8:	0309      	lsls	r1, r1, #12
 80011aa:	0005      	movs	r5, r0
 80011ac:	0b09      	lsrs	r1, r1, #12
 80011ae:	2000      	movs	r0, #0
 80011b0:	0d5b      	lsrs	r3, r3, #21
 80011b2:	0fd2      	lsrs	r2, r2, #31
 80011b4:	42a3      	cmp	r3, r4
 80011b6:	dd04      	ble.n	80011c2 <__aeabi_d2iz+0x22>
 80011b8:	480f      	ldr	r0, [pc, #60]	; (80011f8 <__aeabi_d2iz+0x58>)
 80011ba:	4283      	cmp	r3, r0
 80011bc:	dd02      	ble.n	80011c4 <__aeabi_d2iz+0x24>
 80011be:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <__aeabi_d2iz+0x5c>)
 80011c0:	18d0      	adds	r0, r2, r3
 80011c2:	bd30      	pop	{r4, r5, pc}
 80011c4:	2080      	movs	r0, #128	; 0x80
 80011c6:	0340      	lsls	r0, r0, #13
 80011c8:	4301      	orrs	r1, r0
 80011ca:	480d      	ldr	r0, [pc, #52]	; (8001200 <__aeabi_d2iz+0x60>)
 80011cc:	1ac0      	subs	r0, r0, r3
 80011ce:	281f      	cmp	r0, #31
 80011d0:	dd08      	ble.n	80011e4 <__aeabi_d2iz+0x44>
 80011d2:	480c      	ldr	r0, [pc, #48]	; (8001204 <__aeabi_d2iz+0x64>)
 80011d4:	1ac3      	subs	r3, r0, r3
 80011d6:	40d9      	lsrs	r1, r3
 80011d8:	000b      	movs	r3, r1
 80011da:	4258      	negs	r0, r3
 80011dc:	2a00      	cmp	r2, #0
 80011de:	d1f0      	bne.n	80011c2 <__aeabi_d2iz+0x22>
 80011e0:	0018      	movs	r0, r3
 80011e2:	e7ee      	b.n	80011c2 <__aeabi_d2iz+0x22>
 80011e4:	4c08      	ldr	r4, [pc, #32]	; (8001208 <__aeabi_d2iz+0x68>)
 80011e6:	40c5      	lsrs	r5, r0
 80011e8:	46a4      	mov	ip, r4
 80011ea:	4463      	add	r3, ip
 80011ec:	4099      	lsls	r1, r3
 80011ee:	000b      	movs	r3, r1
 80011f0:	432b      	orrs	r3, r5
 80011f2:	e7f2      	b.n	80011da <__aeabi_d2iz+0x3a>
 80011f4:	000003fe 	.word	0x000003fe
 80011f8:	0000041d 	.word	0x0000041d
 80011fc:	7fffffff 	.word	0x7fffffff
 8001200:	00000433 	.word	0x00000433
 8001204:	00000413 	.word	0x00000413
 8001208:	fffffbed 	.word	0xfffffbed

0800120c <__aeabi_i2d>:
 800120c:	b570      	push	{r4, r5, r6, lr}
 800120e:	2800      	cmp	r0, #0
 8001210:	d016      	beq.n	8001240 <__aeabi_i2d+0x34>
 8001212:	17c3      	asrs	r3, r0, #31
 8001214:	18c5      	adds	r5, r0, r3
 8001216:	405d      	eors	r5, r3
 8001218:	0fc4      	lsrs	r4, r0, #31
 800121a:	0028      	movs	r0, r5
 800121c:	f000 f864 	bl	80012e8 <__clzsi2>
 8001220:	4a11      	ldr	r2, [pc, #68]	; (8001268 <__aeabi_i2d+0x5c>)
 8001222:	1a12      	subs	r2, r2, r0
 8001224:	280a      	cmp	r0, #10
 8001226:	dc16      	bgt.n	8001256 <__aeabi_i2d+0x4a>
 8001228:	0003      	movs	r3, r0
 800122a:	002e      	movs	r6, r5
 800122c:	3315      	adds	r3, #21
 800122e:	409e      	lsls	r6, r3
 8001230:	230b      	movs	r3, #11
 8001232:	1a18      	subs	r0, r3, r0
 8001234:	40c5      	lsrs	r5, r0
 8001236:	0552      	lsls	r2, r2, #21
 8001238:	032d      	lsls	r5, r5, #12
 800123a:	0b2d      	lsrs	r5, r5, #12
 800123c:	0d53      	lsrs	r3, r2, #21
 800123e:	e003      	b.n	8001248 <__aeabi_i2d+0x3c>
 8001240:	2400      	movs	r4, #0
 8001242:	2300      	movs	r3, #0
 8001244:	2500      	movs	r5, #0
 8001246:	2600      	movs	r6, #0
 8001248:	051b      	lsls	r3, r3, #20
 800124a:	432b      	orrs	r3, r5
 800124c:	07e4      	lsls	r4, r4, #31
 800124e:	4323      	orrs	r3, r4
 8001250:	0030      	movs	r0, r6
 8001252:	0019      	movs	r1, r3
 8001254:	bd70      	pop	{r4, r5, r6, pc}
 8001256:	380b      	subs	r0, #11
 8001258:	4085      	lsls	r5, r0
 800125a:	0552      	lsls	r2, r2, #21
 800125c:	032d      	lsls	r5, r5, #12
 800125e:	2600      	movs	r6, #0
 8001260:	0b2d      	lsrs	r5, r5, #12
 8001262:	0d53      	lsrs	r3, r2, #21
 8001264:	e7f0      	b.n	8001248 <__aeabi_i2d+0x3c>
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	0000041e 	.word	0x0000041e

0800126c <__aeabi_cdrcmple>:
 800126c:	4684      	mov	ip, r0
 800126e:	0010      	movs	r0, r2
 8001270:	4662      	mov	r2, ip
 8001272:	468c      	mov	ip, r1
 8001274:	0019      	movs	r1, r3
 8001276:	4663      	mov	r3, ip
 8001278:	e000      	b.n	800127c <__aeabi_cdcmpeq>
 800127a:	46c0      	nop			; (mov r8, r8)

0800127c <__aeabi_cdcmpeq>:
 800127c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800127e:	f000 f905 	bl	800148c <__ledf2>
 8001282:	2800      	cmp	r0, #0
 8001284:	d401      	bmi.n	800128a <__aeabi_cdcmpeq+0xe>
 8001286:	2100      	movs	r1, #0
 8001288:	42c8      	cmn	r0, r1
 800128a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800128c <__aeabi_dcmpeq>:
 800128c:	b510      	push	{r4, lr}
 800128e:	f000 f855 	bl	800133c <__eqdf2>
 8001292:	4240      	negs	r0, r0
 8001294:	3001      	adds	r0, #1
 8001296:	bd10      	pop	{r4, pc}

08001298 <__aeabi_dcmplt>:
 8001298:	b510      	push	{r4, lr}
 800129a:	f000 f8f7 	bl	800148c <__ledf2>
 800129e:	2800      	cmp	r0, #0
 80012a0:	db01      	blt.n	80012a6 <__aeabi_dcmplt+0xe>
 80012a2:	2000      	movs	r0, #0
 80012a4:	bd10      	pop	{r4, pc}
 80012a6:	2001      	movs	r0, #1
 80012a8:	bd10      	pop	{r4, pc}
 80012aa:	46c0      	nop			; (mov r8, r8)

080012ac <__aeabi_dcmple>:
 80012ac:	b510      	push	{r4, lr}
 80012ae:	f000 f8ed 	bl	800148c <__ledf2>
 80012b2:	2800      	cmp	r0, #0
 80012b4:	dd01      	ble.n	80012ba <__aeabi_dcmple+0xe>
 80012b6:	2000      	movs	r0, #0
 80012b8:	bd10      	pop	{r4, pc}
 80012ba:	2001      	movs	r0, #1
 80012bc:	bd10      	pop	{r4, pc}
 80012be:	46c0      	nop			; (mov r8, r8)

080012c0 <__aeabi_dcmpgt>:
 80012c0:	b510      	push	{r4, lr}
 80012c2:	f000 f87d 	bl	80013c0 <__gedf2>
 80012c6:	2800      	cmp	r0, #0
 80012c8:	dc01      	bgt.n	80012ce <__aeabi_dcmpgt+0xe>
 80012ca:	2000      	movs	r0, #0
 80012cc:	bd10      	pop	{r4, pc}
 80012ce:	2001      	movs	r0, #1
 80012d0:	bd10      	pop	{r4, pc}
 80012d2:	46c0      	nop			; (mov r8, r8)

080012d4 <__aeabi_dcmpge>:
 80012d4:	b510      	push	{r4, lr}
 80012d6:	f000 f873 	bl	80013c0 <__gedf2>
 80012da:	2800      	cmp	r0, #0
 80012dc:	da01      	bge.n	80012e2 <__aeabi_dcmpge+0xe>
 80012de:	2000      	movs	r0, #0
 80012e0:	bd10      	pop	{r4, pc}
 80012e2:	2001      	movs	r0, #1
 80012e4:	bd10      	pop	{r4, pc}
 80012e6:	46c0      	nop			; (mov r8, r8)

080012e8 <__clzsi2>:
 80012e8:	211c      	movs	r1, #28
 80012ea:	2301      	movs	r3, #1
 80012ec:	041b      	lsls	r3, r3, #16
 80012ee:	4298      	cmp	r0, r3
 80012f0:	d301      	bcc.n	80012f6 <__clzsi2+0xe>
 80012f2:	0c00      	lsrs	r0, r0, #16
 80012f4:	3910      	subs	r1, #16
 80012f6:	0a1b      	lsrs	r3, r3, #8
 80012f8:	4298      	cmp	r0, r3
 80012fa:	d301      	bcc.n	8001300 <__clzsi2+0x18>
 80012fc:	0a00      	lsrs	r0, r0, #8
 80012fe:	3908      	subs	r1, #8
 8001300:	091b      	lsrs	r3, r3, #4
 8001302:	4298      	cmp	r0, r3
 8001304:	d301      	bcc.n	800130a <__clzsi2+0x22>
 8001306:	0900      	lsrs	r0, r0, #4
 8001308:	3904      	subs	r1, #4
 800130a:	a202      	add	r2, pc, #8	; (adr r2, 8001314 <__clzsi2+0x2c>)
 800130c:	5c10      	ldrb	r0, [r2, r0]
 800130e:	1840      	adds	r0, r0, r1
 8001310:	4770      	bx	lr
 8001312:	46c0      	nop			; (mov r8, r8)
 8001314:	02020304 	.word	0x02020304
 8001318:	01010101 	.word	0x01010101
	...

08001324 <__clzdi2>:
 8001324:	b510      	push	{r4, lr}
 8001326:	2900      	cmp	r1, #0
 8001328:	d103      	bne.n	8001332 <__clzdi2+0xe>
 800132a:	f7ff ffdd 	bl	80012e8 <__clzsi2>
 800132e:	3020      	adds	r0, #32
 8001330:	e002      	b.n	8001338 <__clzdi2+0x14>
 8001332:	0008      	movs	r0, r1
 8001334:	f7ff ffd8 	bl	80012e8 <__clzsi2>
 8001338:	bd10      	pop	{r4, pc}
 800133a:	46c0      	nop			; (mov r8, r8)

0800133c <__eqdf2>:
 800133c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800133e:	464e      	mov	r6, r9
 8001340:	4645      	mov	r5, r8
 8001342:	46de      	mov	lr, fp
 8001344:	4657      	mov	r7, sl
 8001346:	4690      	mov	r8, r2
 8001348:	b5e0      	push	{r5, r6, r7, lr}
 800134a:	0017      	movs	r7, r2
 800134c:	031a      	lsls	r2, r3, #12
 800134e:	0b12      	lsrs	r2, r2, #12
 8001350:	0005      	movs	r5, r0
 8001352:	4684      	mov	ip, r0
 8001354:	4819      	ldr	r0, [pc, #100]	; (80013bc <__eqdf2+0x80>)
 8001356:	030e      	lsls	r6, r1, #12
 8001358:	004c      	lsls	r4, r1, #1
 800135a:	4691      	mov	r9, r2
 800135c:	005a      	lsls	r2, r3, #1
 800135e:	0fdb      	lsrs	r3, r3, #31
 8001360:	469b      	mov	fp, r3
 8001362:	0b36      	lsrs	r6, r6, #12
 8001364:	0d64      	lsrs	r4, r4, #21
 8001366:	0fc9      	lsrs	r1, r1, #31
 8001368:	0d52      	lsrs	r2, r2, #21
 800136a:	4284      	cmp	r4, r0
 800136c:	d019      	beq.n	80013a2 <__eqdf2+0x66>
 800136e:	4282      	cmp	r2, r0
 8001370:	d010      	beq.n	8001394 <__eqdf2+0x58>
 8001372:	2001      	movs	r0, #1
 8001374:	4294      	cmp	r4, r2
 8001376:	d10e      	bne.n	8001396 <__eqdf2+0x5a>
 8001378:	454e      	cmp	r6, r9
 800137a:	d10c      	bne.n	8001396 <__eqdf2+0x5a>
 800137c:	2001      	movs	r0, #1
 800137e:	45c4      	cmp	ip, r8
 8001380:	d109      	bne.n	8001396 <__eqdf2+0x5a>
 8001382:	4559      	cmp	r1, fp
 8001384:	d017      	beq.n	80013b6 <__eqdf2+0x7a>
 8001386:	2c00      	cmp	r4, #0
 8001388:	d105      	bne.n	8001396 <__eqdf2+0x5a>
 800138a:	0030      	movs	r0, r6
 800138c:	4328      	orrs	r0, r5
 800138e:	1e43      	subs	r3, r0, #1
 8001390:	4198      	sbcs	r0, r3
 8001392:	e000      	b.n	8001396 <__eqdf2+0x5a>
 8001394:	2001      	movs	r0, #1
 8001396:	bcf0      	pop	{r4, r5, r6, r7}
 8001398:	46bb      	mov	fp, r7
 800139a:	46b2      	mov	sl, r6
 800139c:	46a9      	mov	r9, r5
 800139e:	46a0      	mov	r8, r4
 80013a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a2:	0033      	movs	r3, r6
 80013a4:	2001      	movs	r0, #1
 80013a6:	432b      	orrs	r3, r5
 80013a8:	d1f5      	bne.n	8001396 <__eqdf2+0x5a>
 80013aa:	42a2      	cmp	r2, r4
 80013ac:	d1f3      	bne.n	8001396 <__eqdf2+0x5a>
 80013ae:	464b      	mov	r3, r9
 80013b0:	433b      	orrs	r3, r7
 80013b2:	d1f0      	bne.n	8001396 <__eqdf2+0x5a>
 80013b4:	e7e2      	b.n	800137c <__eqdf2+0x40>
 80013b6:	2000      	movs	r0, #0
 80013b8:	e7ed      	b.n	8001396 <__eqdf2+0x5a>
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	000007ff 	.word	0x000007ff

080013c0 <__gedf2>:
 80013c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c2:	4647      	mov	r7, r8
 80013c4:	46ce      	mov	lr, r9
 80013c6:	0004      	movs	r4, r0
 80013c8:	0018      	movs	r0, r3
 80013ca:	0016      	movs	r6, r2
 80013cc:	031b      	lsls	r3, r3, #12
 80013ce:	0b1b      	lsrs	r3, r3, #12
 80013d0:	4d2d      	ldr	r5, [pc, #180]	; (8001488 <__gedf2+0xc8>)
 80013d2:	004a      	lsls	r2, r1, #1
 80013d4:	4699      	mov	r9, r3
 80013d6:	b580      	push	{r7, lr}
 80013d8:	0043      	lsls	r3, r0, #1
 80013da:	030f      	lsls	r7, r1, #12
 80013dc:	46a4      	mov	ip, r4
 80013de:	46b0      	mov	r8, r6
 80013e0:	0b3f      	lsrs	r7, r7, #12
 80013e2:	0d52      	lsrs	r2, r2, #21
 80013e4:	0fc9      	lsrs	r1, r1, #31
 80013e6:	0d5b      	lsrs	r3, r3, #21
 80013e8:	0fc0      	lsrs	r0, r0, #31
 80013ea:	42aa      	cmp	r2, r5
 80013ec:	d021      	beq.n	8001432 <__gedf2+0x72>
 80013ee:	42ab      	cmp	r3, r5
 80013f0:	d013      	beq.n	800141a <__gedf2+0x5a>
 80013f2:	2a00      	cmp	r2, #0
 80013f4:	d122      	bne.n	800143c <__gedf2+0x7c>
 80013f6:	433c      	orrs	r4, r7
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d102      	bne.n	8001402 <__gedf2+0x42>
 80013fc:	464d      	mov	r5, r9
 80013fe:	432e      	orrs	r6, r5
 8001400:	d022      	beq.n	8001448 <__gedf2+0x88>
 8001402:	2c00      	cmp	r4, #0
 8001404:	d010      	beq.n	8001428 <__gedf2+0x68>
 8001406:	4281      	cmp	r1, r0
 8001408:	d022      	beq.n	8001450 <__gedf2+0x90>
 800140a:	2002      	movs	r0, #2
 800140c:	3901      	subs	r1, #1
 800140e:	4008      	ands	r0, r1
 8001410:	3801      	subs	r0, #1
 8001412:	bcc0      	pop	{r6, r7}
 8001414:	46b9      	mov	r9, r7
 8001416:	46b0      	mov	r8, r6
 8001418:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800141a:	464d      	mov	r5, r9
 800141c:	432e      	orrs	r6, r5
 800141e:	d129      	bne.n	8001474 <__gedf2+0xb4>
 8001420:	2a00      	cmp	r2, #0
 8001422:	d1f0      	bne.n	8001406 <__gedf2+0x46>
 8001424:	433c      	orrs	r4, r7
 8001426:	d1ee      	bne.n	8001406 <__gedf2+0x46>
 8001428:	2800      	cmp	r0, #0
 800142a:	d1f2      	bne.n	8001412 <__gedf2+0x52>
 800142c:	2001      	movs	r0, #1
 800142e:	4240      	negs	r0, r0
 8001430:	e7ef      	b.n	8001412 <__gedf2+0x52>
 8001432:	003d      	movs	r5, r7
 8001434:	4325      	orrs	r5, r4
 8001436:	d11d      	bne.n	8001474 <__gedf2+0xb4>
 8001438:	4293      	cmp	r3, r2
 800143a:	d0ee      	beq.n	800141a <__gedf2+0x5a>
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1e2      	bne.n	8001406 <__gedf2+0x46>
 8001440:	464c      	mov	r4, r9
 8001442:	4326      	orrs	r6, r4
 8001444:	d1df      	bne.n	8001406 <__gedf2+0x46>
 8001446:	e7e0      	b.n	800140a <__gedf2+0x4a>
 8001448:	2000      	movs	r0, #0
 800144a:	2c00      	cmp	r4, #0
 800144c:	d0e1      	beq.n	8001412 <__gedf2+0x52>
 800144e:	e7dc      	b.n	800140a <__gedf2+0x4a>
 8001450:	429a      	cmp	r2, r3
 8001452:	dc0a      	bgt.n	800146a <__gedf2+0xaa>
 8001454:	dbe8      	blt.n	8001428 <__gedf2+0x68>
 8001456:	454f      	cmp	r7, r9
 8001458:	d8d7      	bhi.n	800140a <__gedf2+0x4a>
 800145a:	d00e      	beq.n	800147a <__gedf2+0xba>
 800145c:	2000      	movs	r0, #0
 800145e:	454f      	cmp	r7, r9
 8001460:	d2d7      	bcs.n	8001412 <__gedf2+0x52>
 8001462:	2900      	cmp	r1, #0
 8001464:	d0e2      	beq.n	800142c <__gedf2+0x6c>
 8001466:	0008      	movs	r0, r1
 8001468:	e7d3      	b.n	8001412 <__gedf2+0x52>
 800146a:	4243      	negs	r3, r0
 800146c:	4158      	adcs	r0, r3
 800146e:	0040      	lsls	r0, r0, #1
 8001470:	3801      	subs	r0, #1
 8001472:	e7ce      	b.n	8001412 <__gedf2+0x52>
 8001474:	2002      	movs	r0, #2
 8001476:	4240      	negs	r0, r0
 8001478:	e7cb      	b.n	8001412 <__gedf2+0x52>
 800147a:	45c4      	cmp	ip, r8
 800147c:	d8c5      	bhi.n	800140a <__gedf2+0x4a>
 800147e:	2000      	movs	r0, #0
 8001480:	45c4      	cmp	ip, r8
 8001482:	d2c6      	bcs.n	8001412 <__gedf2+0x52>
 8001484:	e7ed      	b.n	8001462 <__gedf2+0xa2>
 8001486:	46c0      	nop			; (mov r8, r8)
 8001488:	000007ff 	.word	0x000007ff

0800148c <__ledf2>:
 800148c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800148e:	4647      	mov	r7, r8
 8001490:	46ce      	mov	lr, r9
 8001492:	0004      	movs	r4, r0
 8001494:	0018      	movs	r0, r3
 8001496:	0016      	movs	r6, r2
 8001498:	031b      	lsls	r3, r3, #12
 800149a:	0b1b      	lsrs	r3, r3, #12
 800149c:	4d2c      	ldr	r5, [pc, #176]	; (8001550 <__ledf2+0xc4>)
 800149e:	004a      	lsls	r2, r1, #1
 80014a0:	4699      	mov	r9, r3
 80014a2:	b580      	push	{r7, lr}
 80014a4:	0043      	lsls	r3, r0, #1
 80014a6:	030f      	lsls	r7, r1, #12
 80014a8:	46a4      	mov	ip, r4
 80014aa:	46b0      	mov	r8, r6
 80014ac:	0b3f      	lsrs	r7, r7, #12
 80014ae:	0d52      	lsrs	r2, r2, #21
 80014b0:	0fc9      	lsrs	r1, r1, #31
 80014b2:	0d5b      	lsrs	r3, r3, #21
 80014b4:	0fc0      	lsrs	r0, r0, #31
 80014b6:	42aa      	cmp	r2, r5
 80014b8:	d00d      	beq.n	80014d6 <__ledf2+0x4a>
 80014ba:	42ab      	cmp	r3, r5
 80014bc:	d010      	beq.n	80014e0 <__ledf2+0x54>
 80014be:	2a00      	cmp	r2, #0
 80014c0:	d127      	bne.n	8001512 <__ledf2+0x86>
 80014c2:	433c      	orrs	r4, r7
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d111      	bne.n	80014ec <__ledf2+0x60>
 80014c8:	464d      	mov	r5, r9
 80014ca:	432e      	orrs	r6, r5
 80014cc:	d10e      	bne.n	80014ec <__ledf2+0x60>
 80014ce:	2000      	movs	r0, #0
 80014d0:	2c00      	cmp	r4, #0
 80014d2:	d015      	beq.n	8001500 <__ledf2+0x74>
 80014d4:	e00e      	b.n	80014f4 <__ledf2+0x68>
 80014d6:	003d      	movs	r5, r7
 80014d8:	4325      	orrs	r5, r4
 80014da:	d110      	bne.n	80014fe <__ledf2+0x72>
 80014dc:	4293      	cmp	r3, r2
 80014de:	d118      	bne.n	8001512 <__ledf2+0x86>
 80014e0:	464d      	mov	r5, r9
 80014e2:	432e      	orrs	r6, r5
 80014e4:	d10b      	bne.n	80014fe <__ledf2+0x72>
 80014e6:	2a00      	cmp	r2, #0
 80014e8:	d102      	bne.n	80014f0 <__ledf2+0x64>
 80014ea:	433c      	orrs	r4, r7
 80014ec:	2c00      	cmp	r4, #0
 80014ee:	d00b      	beq.n	8001508 <__ledf2+0x7c>
 80014f0:	4281      	cmp	r1, r0
 80014f2:	d014      	beq.n	800151e <__ledf2+0x92>
 80014f4:	2002      	movs	r0, #2
 80014f6:	3901      	subs	r1, #1
 80014f8:	4008      	ands	r0, r1
 80014fa:	3801      	subs	r0, #1
 80014fc:	e000      	b.n	8001500 <__ledf2+0x74>
 80014fe:	2002      	movs	r0, #2
 8001500:	bcc0      	pop	{r6, r7}
 8001502:	46b9      	mov	r9, r7
 8001504:	46b0      	mov	r8, r6
 8001506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001508:	2800      	cmp	r0, #0
 800150a:	d1f9      	bne.n	8001500 <__ledf2+0x74>
 800150c:	2001      	movs	r0, #1
 800150e:	4240      	negs	r0, r0
 8001510:	e7f6      	b.n	8001500 <__ledf2+0x74>
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1ec      	bne.n	80014f0 <__ledf2+0x64>
 8001516:	464c      	mov	r4, r9
 8001518:	4326      	orrs	r6, r4
 800151a:	d1e9      	bne.n	80014f0 <__ledf2+0x64>
 800151c:	e7ea      	b.n	80014f4 <__ledf2+0x68>
 800151e:	429a      	cmp	r2, r3
 8001520:	dd04      	ble.n	800152c <__ledf2+0xa0>
 8001522:	4243      	negs	r3, r0
 8001524:	4158      	adcs	r0, r3
 8001526:	0040      	lsls	r0, r0, #1
 8001528:	3801      	subs	r0, #1
 800152a:	e7e9      	b.n	8001500 <__ledf2+0x74>
 800152c:	429a      	cmp	r2, r3
 800152e:	dbeb      	blt.n	8001508 <__ledf2+0x7c>
 8001530:	454f      	cmp	r7, r9
 8001532:	d8df      	bhi.n	80014f4 <__ledf2+0x68>
 8001534:	d006      	beq.n	8001544 <__ledf2+0xb8>
 8001536:	2000      	movs	r0, #0
 8001538:	454f      	cmp	r7, r9
 800153a:	d2e1      	bcs.n	8001500 <__ledf2+0x74>
 800153c:	2900      	cmp	r1, #0
 800153e:	d0e5      	beq.n	800150c <__ledf2+0x80>
 8001540:	0008      	movs	r0, r1
 8001542:	e7dd      	b.n	8001500 <__ledf2+0x74>
 8001544:	45c4      	cmp	ip, r8
 8001546:	d8d5      	bhi.n	80014f4 <__ledf2+0x68>
 8001548:	2000      	movs	r0, #0
 800154a:	45c4      	cmp	ip, r8
 800154c:	d2d8      	bcs.n	8001500 <__ledf2+0x74>
 800154e:	e7f5      	b.n	800153c <__ledf2+0xb0>
 8001550:	000007ff 	.word	0x000007ff

08001554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001558:	f001 fec0 	bl	80032dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800155c:	f000 f864 	bl	8001628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001560:	f000 f9b4 	bl	80018cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001564:	f000 f982 	bl	800186c <MX_USART2_UART_Init>
  MX_RTC_Init();
 8001568:	f000 f8e2 	bl	8001730 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  SI2C_init();
 800156c:	f001 fd6a 	bl	8003044 <SI2C_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001570:	f004 ffe4 	bl	800653c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of gy30Queue */
  gy30QueueHandle = osMessageQueueNew (8, sizeof(uint8_t), &gy30Queue_attributes);
 8001574:	4b1c      	ldr	r3, [pc, #112]	; (80015e8 <main+0x94>)
 8001576:	001a      	movs	r2, r3
 8001578:	2101      	movs	r1, #1
 800157a:	2008      	movs	r0, #8
 800157c:	f005 f906 	bl	800678c <osMessageQueueNew>
 8001580:	0002      	movs	r2, r0
 8001582:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <main+0x98>)
 8001584:	601a      	str	r2, [r3, #0]

  /* creation of oledQueue */
  oledQueueHandle = osMessageQueueNew (8, sizeof(QueueData_t), &oledQueue_attributes);
 8001586:	4b1a      	ldr	r3, [pc, #104]	; (80015f0 <main+0x9c>)
 8001588:	001a      	movs	r2, r3
 800158a:	2110      	movs	r1, #16
 800158c:	2008      	movs	r0, #8
 800158e:	f005 f8fd 	bl	800678c <osMessageQueueNew>
 8001592:	0002      	movs	r2, r0
 8001594:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <main+0xa0>)
 8001596:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ledTask */
  ledTaskHandle = osThreadNew(StartLedTask, NULL, &ledTask_attributes);
 8001598:	4a17      	ldr	r2, [pc, #92]	; (80015f8 <main+0xa4>)
 800159a:	4b18      	ldr	r3, [pc, #96]	; (80015fc <main+0xa8>)
 800159c:	2100      	movs	r1, #0
 800159e:	0018      	movs	r0, r3
 80015a0:	f005 f828 	bl	80065f4 <osThreadNew>
 80015a4:	0002      	movs	r2, r0
 80015a6:	4b16      	ldr	r3, [pc, #88]	; (8001600 <main+0xac>)
 80015a8:	601a      	str	r2, [r3, #0]

  /* creation of GY30Task */
  GY30TaskHandle = osThreadNew(StartGY30Task, NULL, &GY30Task_attributes);
 80015aa:	4a16      	ldr	r2, [pc, #88]	; (8001604 <main+0xb0>)
 80015ac:	4b16      	ldr	r3, [pc, #88]	; (8001608 <main+0xb4>)
 80015ae:	2100      	movs	r1, #0
 80015b0:	0018      	movs	r0, r3
 80015b2:	f005 f81f 	bl	80065f4 <osThreadNew>
 80015b6:	0002      	movs	r2, r0
 80015b8:	4b14      	ldr	r3, [pc, #80]	; (800160c <main+0xb8>)
 80015ba:	601a      	str	r2, [r3, #0]

  /* creation of OLEDTask */
  OLEDTaskHandle = osThreadNew(StartOLEDTask, NULL, &OLEDTask_attributes);
 80015bc:	4a14      	ldr	r2, [pc, #80]	; (8001610 <main+0xbc>)
 80015be:	4b15      	ldr	r3, [pc, #84]	; (8001614 <main+0xc0>)
 80015c0:	2100      	movs	r1, #0
 80015c2:	0018      	movs	r0, r3
 80015c4:	f005 f816 	bl	80065f4 <osThreadNew>
 80015c8:	0002      	movs	r2, r0
 80015ca:	4b13      	ldr	r3, [pc, #76]	; (8001618 <main+0xc4>)
 80015cc:	601a      	str	r2, [r3, #0]

  /* creation of RTCTask */
  RTCTaskHandle = osThreadNew(StartRTCTask, NULL, &RTCTask_attributes);
 80015ce:	4a13      	ldr	r2, [pc, #76]	; (800161c <main+0xc8>)
 80015d0:	4b13      	ldr	r3, [pc, #76]	; (8001620 <main+0xcc>)
 80015d2:	2100      	movs	r1, #0
 80015d4:	0018      	movs	r0, r3
 80015d6:	f005 f80d 	bl	80065f4 <osThreadNew>
 80015da:	0002      	movs	r2, r0
 80015dc:	4b11      	ldr	r3, [pc, #68]	; (8001624 <main+0xd0>)
 80015de:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80015e0:	f004 ffd8 	bl	8006594 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <main+0x90>
 80015e6:	46c0      	nop			; (mov r8, r8)
 80015e8:	08009e9c 	.word	0x08009e9c
 80015ec:	2000016c 	.word	0x2000016c
 80015f0:	08009eb4 	.word	0x08009eb4
 80015f4:	20000170 	.word	0x20000170
 80015f8:	08009e0c 	.word	0x08009e0c
 80015fc:	08001a59 	.word	0x08001a59
 8001600:	2000015c 	.word	0x2000015c
 8001604:	08009e30 	.word	0x08009e30
 8001608:	08001a89 	.word	0x08001a89
 800160c:	20000160 	.word	0x20000160
 8001610:	08009e54 	.word	0x08009e54
 8001614:	08001ba9 	.word	0x08001ba9
 8001618:	20000164 	.word	0x20000164
 800161c:	08009e78 	.word	0x08009e78
 8001620:	08001d15 	.word	0x08001d15
 8001624:	20000168 	.word	0x20000168

08001628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001628:	b590      	push	{r4, r7, lr}
 800162a:	b099      	sub	sp, #100	; 0x64
 800162c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800162e:	242c      	movs	r4, #44	; 0x2c
 8001630:	193b      	adds	r3, r7, r4
 8001632:	0018      	movs	r0, r3
 8001634:	2334      	movs	r3, #52	; 0x34
 8001636:	001a      	movs	r2, r3
 8001638:	2100      	movs	r1, #0
 800163a:	f007 fdaf 	bl	800919c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800163e:	2318      	movs	r3, #24
 8001640:	18fb      	adds	r3, r7, r3
 8001642:	0018      	movs	r0, r3
 8001644:	2314      	movs	r3, #20
 8001646:	001a      	movs	r2, r3
 8001648:	2100      	movs	r1, #0
 800164a:	f007 fda7 	bl	800919c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800164e:	003b      	movs	r3, r7
 8001650:	0018      	movs	r0, r3
 8001652:	2318      	movs	r3, #24
 8001654:	001a      	movs	r2, r3
 8001656:	2100      	movs	r1, #0
 8001658:	f007 fda0 	bl	800919c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800165c:	4b31      	ldr	r3, [pc, #196]	; (8001724 <SystemClock_Config+0xfc>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a31      	ldr	r2, [pc, #196]	; (8001728 <SystemClock_Config+0x100>)
 8001662:	401a      	ands	r2, r3
 8001664:	4b2f      	ldr	r3, [pc, #188]	; (8001724 <SystemClock_Config+0xfc>)
 8001666:	2180      	movs	r1, #128	; 0x80
 8001668:	0109      	lsls	r1, r1, #4
 800166a:	430a      	orrs	r2, r1
 800166c:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800166e:	f002 f917 	bl	80038a0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001672:	4b2e      	ldr	r3, [pc, #184]	; (800172c <SystemClock_Config+0x104>)
 8001674:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001676:	4b2d      	ldr	r3, [pc, #180]	; (800172c <SystemClock_Config+0x104>)
 8001678:	492b      	ldr	r1, [pc, #172]	; (8001728 <SystemClock_Config+0x100>)
 800167a:	400a      	ands	r2, r1
 800167c:	651a      	str	r2, [r3, #80]	; 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800167e:	193b      	adds	r3, r7, r4
 8001680:	2206      	movs	r2, #6
 8001682:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001684:	193b      	adds	r3, r7, r4
 8001686:	2280      	movs	r2, #128	; 0x80
 8001688:	0052      	lsls	r2, r2, #1
 800168a:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800168c:	0021      	movs	r1, r4
 800168e:	187b      	adds	r3, r7, r1
 8001690:	2201      	movs	r2, #1
 8001692:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001694:	187b      	adds	r3, r7, r1
 8001696:	2210      	movs	r2, #16
 8001698:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800169a:	187b      	adds	r3, r7, r1
 800169c:	2202      	movs	r2, #2
 800169e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016a0:	187b      	adds	r3, r7, r1
 80016a2:	2200      	movs	r2, #0
 80016a4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80016a6:	187b      	adds	r3, r7, r1
 80016a8:	2280      	movs	r2, #128	; 0x80
 80016aa:	02d2      	lsls	r2, r2, #11
 80016ac:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80016ae:	187b      	adds	r3, r7, r1
 80016b0:	2280      	movs	r2, #128	; 0x80
 80016b2:	03d2      	lsls	r2, r2, #15
 80016b4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b6:	187b      	adds	r3, r7, r1
 80016b8:	0018      	movs	r0, r3
 80016ba:	f002 f8ff 	bl	80038bc <HAL_RCC_OscConfig>
 80016be:	1e03      	subs	r3, r0, #0
 80016c0:	d001      	beq.n	80016c6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80016c2:	f000 fc15 	bl	8001ef0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016c6:	2118      	movs	r1, #24
 80016c8:	187b      	adds	r3, r7, r1
 80016ca:	220f      	movs	r2, #15
 80016cc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ce:	187b      	adds	r3, r7, r1
 80016d0:	2203      	movs	r2, #3
 80016d2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d4:	187b      	adds	r3, r7, r1
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016da:	187b      	adds	r3, r7, r1
 80016dc:	2200      	movs	r2, #0
 80016de:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016e0:	187b      	adds	r3, r7, r1
 80016e2:	2200      	movs	r2, #0
 80016e4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80016e6:	187b      	adds	r3, r7, r1
 80016e8:	2101      	movs	r1, #1
 80016ea:	0018      	movs	r0, r3
 80016ec:	f002 fc62 	bl	8003fb4 <HAL_RCC_ClockConfig>
 80016f0:	1e03      	subs	r3, r0, #0
 80016f2:	d001      	beq.n	80016f8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80016f4:	f000 fbfc 	bl	8001ef0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC;
 80016f8:	003b      	movs	r3, r7
 80016fa:	2222      	movs	r2, #34	; 0x22
 80016fc:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016fe:	003b      	movs	r3, r7
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001704:	003b      	movs	r3, r7
 8001706:	2280      	movs	r2, #128	; 0x80
 8001708:	0252      	lsls	r2, r2, #9
 800170a:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800170c:	003b      	movs	r3, r7
 800170e:	0018      	movs	r0, r3
 8001710:	f002 fea6 	bl	8004460 <HAL_RCCEx_PeriphCLKConfig>
 8001714:	1e03      	subs	r3, r0, #0
 8001716:	d001      	beq.n	800171c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001718:	f000 fbea 	bl	8001ef0 <Error_Handler>
  }
}
 800171c:	46c0      	nop			; (mov r8, r8)
 800171e:	46bd      	mov	sp, r7
 8001720:	b019      	add	sp, #100	; 0x64
 8001722:	bd90      	pop	{r4, r7, pc}
 8001724:	40007000 	.word	0x40007000
 8001728:	ffffe7ff 	.word	0xffffe7ff
 800172c:	40021000 	.word	0x40021000

08001730 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b090      	sub	sp, #64	; 0x40
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001736:	232c      	movs	r3, #44	; 0x2c
 8001738:	18fb      	adds	r3, r7, r3
 800173a:	0018      	movs	r0, r3
 800173c:	2314      	movs	r3, #20
 800173e:	001a      	movs	r2, r3
 8001740:	2100      	movs	r1, #0
 8001742:	f007 fd2b 	bl	800919c <memset>
  RTC_DateTypeDef sDate = {0};
 8001746:	2328      	movs	r3, #40	; 0x28
 8001748:	18fb      	adds	r3, r7, r3
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 800174e:	003b      	movs	r3, r7
 8001750:	0018      	movs	r0, r3
 8001752:	2328      	movs	r3, #40	; 0x28
 8001754:	001a      	movs	r2, r3
 8001756:	2100      	movs	r1, #0
 8001758:	f007 fd20 	bl	800919c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800175c:	4b40      	ldr	r3, [pc, #256]	; (8001860 <MX_RTC_Init+0x130>)
 800175e:	4a41      	ldr	r2, [pc, #260]	; (8001864 <MX_RTC_Init+0x134>)
 8001760:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001762:	4b3f      	ldr	r3, [pc, #252]	; (8001860 <MX_RTC_Init+0x130>)
 8001764:	2200      	movs	r2, #0
 8001766:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001768:	4b3d      	ldr	r3, [pc, #244]	; (8001860 <MX_RTC_Init+0x130>)
 800176a:	227f      	movs	r2, #127	; 0x7f
 800176c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800176e:	4b3c      	ldr	r3, [pc, #240]	; (8001860 <MX_RTC_Init+0x130>)
 8001770:	22ff      	movs	r2, #255	; 0xff
 8001772:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001774:	4b3a      	ldr	r3, [pc, #232]	; (8001860 <MX_RTC_Init+0x130>)
 8001776:	2200      	movs	r2, #0
 8001778:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800177a:	4b39      	ldr	r3, [pc, #228]	; (8001860 <MX_RTC_Init+0x130>)
 800177c:	2200      	movs	r2, #0
 800177e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001780:	4b37      	ldr	r3, [pc, #220]	; (8001860 <MX_RTC_Init+0x130>)
 8001782:	2200      	movs	r2, #0
 8001784:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001786:	4b36      	ldr	r3, [pc, #216]	; (8001860 <MX_RTC_Init+0x130>)
 8001788:	2200      	movs	r2, #0
 800178a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800178c:	4b34      	ldr	r3, [pc, #208]	; (8001860 <MX_RTC_Init+0x130>)
 800178e:	0018      	movs	r0, r3
 8001790:	f002 ff8c 	bl	80046ac <HAL_RTC_Init>
 8001794:	1e03      	subs	r3, r0, #0
 8001796:	d001      	beq.n	800179c <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8001798:	f000 fbaa 	bl	8001ef0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800179c:	212c      	movs	r1, #44	; 0x2c
 800179e:	187b      	adds	r3, r7, r1
 80017a0:	2200      	movs	r2, #0
 80017a2:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80017a4:	187b      	adds	r3, r7, r1
 80017a6:	2200      	movs	r2, #0
 80017a8:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80017aa:	187b      	adds	r3, r7, r1
 80017ac:	2200      	movs	r2, #0
 80017ae:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80017b0:	187b      	adds	r3, r7, r1
 80017b2:	2200      	movs	r2, #0
 80017b4:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80017b6:	187b      	adds	r3, r7, r1
 80017b8:	2200      	movs	r2, #0
 80017ba:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80017bc:	1879      	adds	r1, r7, r1
 80017be:	4b28      	ldr	r3, [pc, #160]	; (8001860 <MX_RTC_Init+0x130>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	0018      	movs	r0, r3
 80017c4:	f003 f810 	bl	80047e8 <HAL_RTC_SetTime>
 80017c8:	1e03      	subs	r3, r0, #0
 80017ca:	d001      	beq.n	80017d0 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 80017cc:	f000 fb90 	bl	8001ef0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 80017d0:	2128      	movs	r1, #40	; 0x28
 80017d2:	187b      	adds	r3, r7, r1
 80017d4:	2207      	movs	r2, #7
 80017d6:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80017d8:	187b      	adds	r3, r7, r1
 80017da:	2201      	movs	r2, #1
 80017dc:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 80017de:	187b      	adds	r3, r7, r1
 80017e0:	2201      	movs	r2, #1
 80017e2:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x53;
 80017e4:	187b      	adds	r3, r7, r1
 80017e6:	2253      	movs	r2, #83	; 0x53
 80017e8:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80017ea:	1879      	adds	r1, r7, r1
 80017ec:	4b1c      	ldr	r3, [pc, #112]	; (8001860 <MX_RTC_Init+0x130>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	0018      	movs	r0, r3
 80017f2:	f003 f919 	bl	8004a28 <HAL_RTC_SetDate>
 80017f6:	1e03      	subs	r3, r0, #0
 80017f8:	d001      	beq.n	80017fe <MX_RTC_Init+0xce>
  {
    Error_Handler();
 80017fa:	f000 fb79 	bl	8001ef0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80017fe:	003b      	movs	r3, r7
 8001800:	2200      	movs	r2, #0
 8001802:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001804:	003b      	movs	r3, r7
 8001806:	2200      	movs	r2, #0
 8001808:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800180a:	003b      	movs	r3, r7
 800180c:	2200      	movs	r2, #0
 800180e:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001810:	003b      	movs	r3, r7
 8001812:	2200      	movs	r2, #0
 8001814:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001816:	003b      	movs	r3, r7
 8001818:	2200      	movs	r2, #0
 800181a:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800181c:	003b      	movs	r3, r7
 800181e:	2200      	movs	r2, #0
 8001820:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 8001822:	003b      	movs	r3, r7
 8001824:	4a10      	ldr	r2, [pc, #64]	; (8001868 <MX_RTC_Init+0x138>)
 8001826:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001828:	003b      	movs	r3, r7
 800182a:	2200      	movs	r2, #0
 800182c:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800182e:	003b      	movs	r3, r7
 8001830:	2200      	movs	r2, #0
 8001832:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001834:	003b      	movs	r3, r7
 8001836:	2220      	movs	r2, #32
 8001838:	2101      	movs	r1, #1
 800183a:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 800183c:	003b      	movs	r3, r7
 800183e:	2280      	movs	r2, #128	; 0x80
 8001840:	0052      	lsls	r2, r2, #1
 8001842:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001844:	0039      	movs	r1, r7
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <MX_RTC_Init+0x130>)
 8001848:	2201      	movs	r2, #1
 800184a:	0018      	movs	r0, r3
 800184c:	f003 f9e8 	bl	8004c20 <HAL_RTC_SetAlarm_IT>
 8001850:	1e03      	subs	r3, r0, #0
 8001852:	d001      	beq.n	8001858 <MX_RTC_Init+0x128>
  {
    Error_Handler();
 8001854:	f000 fb4c 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001858:	46c0      	nop			; (mov r8, r8)
 800185a:	46bd      	mov	sp, r7
 800185c:	b010      	add	sp, #64	; 0x40
 800185e:	bd80      	pop	{r7, pc}
 8001860:	200000b4 	.word	0x200000b4
 8001864:	40002800 	.word	0x40002800
 8001868:	80808080 	.word	0x80808080

0800186c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001870:	4b14      	ldr	r3, [pc, #80]	; (80018c4 <MX_USART2_UART_Init+0x58>)
 8001872:	4a15      	ldr	r2, [pc, #84]	; (80018c8 <MX_USART2_UART_Init+0x5c>)
 8001874:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001876:	4b13      	ldr	r3, [pc, #76]	; (80018c4 <MX_USART2_UART_Init+0x58>)
 8001878:	22e1      	movs	r2, #225	; 0xe1
 800187a:	0252      	lsls	r2, r2, #9
 800187c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800187e:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <MX_USART2_UART_Init+0x58>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001884:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <MX_USART2_UART_Init+0x58>)
 8001886:	2200      	movs	r2, #0
 8001888:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <MX_USART2_UART_Init+0x58>)
 800188c:	2200      	movs	r2, #0
 800188e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001890:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <MX_USART2_UART_Init+0x58>)
 8001892:	220c      	movs	r2, #12
 8001894:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001896:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <MX_USART2_UART_Init+0x58>)
 8001898:	2200      	movs	r2, #0
 800189a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800189c:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <MX_USART2_UART_Init+0x58>)
 800189e:	2200      	movs	r2, #0
 80018a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018a2:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <MX_USART2_UART_Init+0x58>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <MX_USART2_UART_Init+0x58>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018ae:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <MX_USART2_UART_Init+0x58>)
 80018b0:	0018      	movs	r0, r3
 80018b2:	f003 fddd 	bl	8005470 <HAL_UART_Init>
 80018b6:	1e03      	subs	r3, r0, #0
 80018b8:	d001      	beq.n	80018be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80018ba:	f000 fb19 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018be:	46c0      	nop			; (mov r8, r8)
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	200000d8 	.word	0x200000d8
 80018c8:	40004400 	.word	0x40004400

080018cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018cc:	b590      	push	{r4, r7, lr}
 80018ce:	b08b      	sub	sp, #44	; 0x2c
 80018d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d2:	2414      	movs	r4, #20
 80018d4:	193b      	adds	r3, r7, r4
 80018d6:	0018      	movs	r0, r3
 80018d8:	2314      	movs	r3, #20
 80018da:	001a      	movs	r2, r3
 80018dc:	2100      	movs	r1, #0
 80018de:	f007 fc5d 	bl	800919c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018e2:	4b49      	ldr	r3, [pc, #292]	; (8001a08 <MX_GPIO_Init+0x13c>)
 80018e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018e6:	4b48      	ldr	r3, [pc, #288]	; (8001a08 <MX_GPIO_Init+0x13c>)
 80018e8:	2104      	movs	r1, #4
 80018ea:	430a      	orrs	r2, r1
 80018ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80018ee:	4b46      	ldr	r3, [pc, #280]	; (8001a08 <MX_GPIO_Init+0x13c>)
 80018f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f2:	2204      	movs	r2, #4
 80018f4:	4013      	ands	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018fa:	4b43      	ldr	r3, [pc, #268]	; (8001a08 <MX_GPIO_Init+0x13c>)
 80018fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018fe:	4b42      	ldr	r3, [pc, #264]	; (8001a08 <MX_GPIO_Init+0x13c>)
 8001900:	2180      	movs	r1, #128	; 0x80
 8001902:	430a      	orrs	r2, r1
 8001904:	62da      	str	r2, [r3, #44]	; 0x2c
 8001906:	4b40      	ldr	r3, [pc, #256]	; (8001a08 <MX_GPIO_Init+0x13c>)
 8001908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190a:	2280      	movs	r2, #128	; 0x80
 800190c:	4013      	ands	r3, r2
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001912:	4b3d      	ldr	r3, [pc, #244]	; (8001a08 <MX_GPIO_Init+0x13c>)
 8001914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001916:	4b3c      	ldr	r3, [pc, #240]	; (8001a08 <MX_GPIO_Init+0x13c>)
 8001918:	2101      	movs	r1, #1
 800191a:	430a      	orrs	r2, r1
 800191c:	62da      	str	r2, [r3, #44]	; 0x2c
 800191e:	4b3a      	ldr	r3, [pc, #232]	; (8001a08 <MX_GPIO_Init+0x13c>)
 8001920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001922:	2201      	movs	r2, #1
 8001924:	4013      	ands	r3, r2
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800192a:	4b37      	ldr	r3, [pc, #220]	; (8001a08 <MX_GPIO_Init+0x13c>)
 800192c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800192e:	4b36      	ldr	r3, [pc, #216]	; (8001a08 <MX_GPIO_Init+0x13c>)
 8001930:	2102      	movs	r1, #2
 8001932:	430a      	orrs	r2, r1
 8001934:	62da      	str	r2, [r3, #44]	; 0x2c
 8001936:	4b34      	ldr	r3, [pc, #208]	; (8001a08 <MX_GPIO_Init+0x13c>)
 8001938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193a:	2202      	movs	r2, #2
 800193c:	4013      	ands	r3, r2
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001942:	23a0      	movs	r3, #160	; 0xa0
 8001944:	05db      	lsls	r3, r3, #23
 8001946:	2200      	movs	r2, #0
 8001948:	2120      	movs	r1, #32
 800194a:	0018      	movs	r0, r3
 800194c:	f001 ff6f 	bl	800382e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SI2C1_SCL_Pin|SI2C1_SDA_Pin, GPIO_PIN_RESET);
 8001950:	4b2e      	ldr	r3, [pc, #184]	; (8001a0c <MX_GPIO_Init+0x140>)
 8001952:	2200      	movs	r2, #0
 8001954:	2160      	movs	r1, #96	; 0x60
 8001956:	0018      	movs	r0, r3
 8001958:	f001 ff69 	bl	800382e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SI2C0_SCL_Pin|SI2C0_SDA_Pin, GPIO_PIN_RESET);
 800195c:	23c0      	movs	r3, #192	; 0xc0
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	482b      	ldr	r0, [pc, #172]	; (8001a10 <MX_GPIO_Init+0x144>)
 8001962:	2200      	movs	r2, #0
 8001964:	0019      	movs	r1, r3
 8001966:	f001 ff62 	bl	800382e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800196a:	193b      	adds	r3, r7, r4
 800196c:	2280      	movs	r2, #128	; 0x80
 800196e:	0192      	lsls	r2, r2, #6
 8001970:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001972:	193b      	adds	r3, r7, r4
 8001974:	2284      	movs	r2, #132	; 0x84
 8001976:	0392      	lsls	r2, r2, #14
 8001978:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	193b      	adds	r3, r7, r4
 800197c:	2200      	movs	r2, #0
 800197e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001980:	193b      	adds	r3, r7, r4
 8001982:	4a22      	ldr	r2, [pc, #136]	; (8001a0c <MX_GPIO_Init+0x140>)
 8001984:	0019      	movs	r1, r3
 8001986:	0010      	movs	r0, r2
 8001988:	f001 fdb6 	bl	80034f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800198c:	193b      	adds	r3, r7, r4
 800198e:	2220      	movs	r2, #32
 8001990:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001992:	193b      	adds	r3, r7, r4
 8001994:	2201      	movs	r2, #1
 8001996:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	193b      	adds	r3, r7, r4
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199e:	193b      	adds	r3, r7, r4
 80019a0:	2200      	movs	r2, #0
 80019a2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80019a4:	193a      	adds	r2, r7, r4
 80019a6:	23a0      	movs	r3, #160	; 0xa0
 80019a8:	05db      	lsls	r3, r3, #23
 80019aa:	0011      	movs	r1, r2
 80019ac:	0018      	movs	r0, r3
 80019ae:	f001 fda3 	bl	80034f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SI2C1_SCL_Pin SI2C1_SDA_Pin */
  GPIO_InitStruct.Pin = SI2C1_SCL_Pin|SI2C1_SDA_Pin;
 80019b2:	193b      	adds	r3, r7, r4
 80019b4:	2260      	movs	r2, #96	; 0x60
 80019b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b8:	193b      	adds	r3, r7, r4
 80019ba:	2201      	movs	r2, #1
 80019bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	193b      	adds	r3, r7, r4
 80019c0:	2200      	movs	r2, #0
 80019c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c4:	193b      	adds	r3, r7, r4
 80019c6:	2200      	movs	r2, #0
 80019c8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ca:	193b      	adds	r3, r7, r4
 80019cc:	4a0f      	ldr	r2, [pc, #60]	; (8001a0c <MX_GPIO_Init+0x140>)
 80019ce:	0019      	movs	r1, r3
 80019d0:	0010      	movs	r0, r2
 80019d2:	f001 fd91 	bl	80034f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SI2C0_SCL_Pin SI2C0_SDA_Pin */
  GPIO_InitStruct.Pin = SI2C0_SCL_Pin|SI2C0_SDA_Pin;
 80019d6:	0021      	movs	r1, r4
 80019d8:	187b      	adds	r3, r7, r1
 80019da:	22c0      	movs	r2, #192	; 0xc0
 80019dc:	0092      	lsls	r2, r2, #2
 80019de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e0:	187b      	adds	r3, r7, r1
 80019e2:	2201      	movs	r2, #1
 80019e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	187b      	adds	r3, r7, r1
 80019e8:	2200      	movs	r2, #0
 80019ea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ec:	187b      	adds	r3, r7, r1
 80019ee:	2200      	movs	r2, #0
 80019f0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f2:	187b      	adds	r3, r7, r1
 80019f4:	4a06      	ldr	r2, [pc, #24]	; (8001a10 <MX_GPIO_Init+0x144>)
 80019f6:	0019      	movs	r1, r3
 80019f8:	0010      	movs	r0, r2
 80019fa:	f001 fd7d 	bl	80034f8 <HAL_GPIO_Init>

}
 80019fe:	46c0      	nop			; (mov r8, r8)
 8001a00:	46bd      	mov	sp, r7
 8001a02:	b00b      	add	sp, #44	; 0x2c
 8001a04:	bd90      	pop	{r4, r7, pc}
 8001a06:	46c0      	nop			; (mov r8, r8)
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	50000800 	.word	0x50000800
 8001a10:	50000400 	.word	0x50000400

08001a14 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af02      	add	r7, sp, #8
 8001a1a:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken;
	uint32_t ulStatusAlarm = 0x01;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	60fb      	str	r3, [r7, #12]

	xHigherPriorityTaskWoken = pdFALSE;
 8001a20:	2300      	movs	r3, #0
 8001a22:	60bb      	str	r3, [r7, #8]
	xTaskNotifyFromISR( RTCTaskHandle, ulStatusAlarm, eSetBits, &xHigherPriorityTaskWoken );
 8001a24:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <HAL_RTC_AlarmAEventCallback+0x3c>)
 8001a26:	6818      	ldr	r0, [r3, #0]
 8001a28:	68f9      	ldr	r1, [r7, #12]
 8001a2a:	2308      	movs	r3, #8
 8001a2c:	18fb      	adds	r3, r7, r3
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	2300      	movs	r3, #0
 8001a32:	2201      	movs	r2, #1
 8001a34:	f006 fb80 	bl	8008138 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <HAL_RTC_AlarmAEventCallback+0x32>
 8001a3e:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <HAL_RTC_AlarmAEventCallback+0x40>)
 8001a40:	2280      	movs	r2, #128	; 0x80
 8001a42:	0552      	lsls	r2, r2, #21
 8001a44:	601a      	str	r2, [r3, #0]
}
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	b004      	add	sp, #16
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	46c0      	nop			; (mov r8, r8)
 8001a50:	20000168 	.word	0x20000168
 8001a54:	e000ed04 	.word	0xe000ed04

08001a58 <StartLedTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartLedTask */
void StartLedTask(void *argument)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	printf("Led task is run\r\n");
 8001a60:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <StartLedTask+0x28>)
 8001a62:	0018      	movs	r0, r3
 8001a64:	f007 fcc0 	bl	80093e8 <puts>

	for(;;)
	{
//		printf("Toggle LED\r\n");
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001a68:	23a0      	movs	r3, #160	; 0xa0
 8001a6a:	05db      	lsls	r3, r3, #23
 8001a6c:	2120      	movs	r1, #32
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f001 fefa 	bl	8003868 <HAL_GPIO_TogglePin>
		osDelay(3000);
 8001a74:	4b03      	ldr	r3, [pc, #12]	; (8001a84 <StartLedTask+0x2c>)
 8001a76:	0018      	movs	r0, r3
 8001a78:	f004 fe60 	bl	800673c <osDelay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001a7c:	e7f4      	b.n	8001a68 <StartLedTask+0x10>
 8001a7e:	46c0      	nop			; (mov r8, r8)
 8001a80:	08009c30 	.word	0x08009c30
 8001a84:	00000bb8 	.word	0x00000bb8

08001a88 <StartGY30Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGY30Task */
void StartGY30Task(void *argument)
{
 8001a88:	b5b0      	push	{r4, r5, r7, lr}
 8001a8a:	b08e      	sub	sp, #56	; 0x38
 8001a8c:	af02      	add	r7, sp, #8
 8001a8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGY30Task */
	uint32_t ulNotifiedValue;

	uint16_t lux;
	char lux_value[5] = "0000";
 8001a90:	2020      	movs	r0, #32
 8001a92:	183b      	adds	r3, r7, r0
 8001a94:	4a3b      	ldr	r2, [pc, #236]	; (8001b84 <StartGY30Task+0xfc>)
 8001a96:	6811      	ldr	r1, [r2, #0]
 8001a98:	6019      	str	r1, [r3, #0]
 8001a9a:	7912      	ldrb	r2, [r2, #4]
 8001a9c:	711a      	strb	r2, [r3, #4]
	unsigned char size;

	QueueData_t lux_queue = {
 8001a9e:	210c      	movs	r1, #12
 8001aa0:	187b      	adds	r3, r7, r1
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	701a      	strb	r2, [r3, #0]
 8001aa6:	187b      	adds	r3, r7, r1
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	705a      	strb	r2, [r3, #1]
 8001aac:	187b      	adds	r3, r7, r1
 8001aae:	183a      	adds	r2, r7, r0
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	187b      	adds	r3, r7, r1
 8001ab4:	2205      	movs	r2, #5
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	187b      	adds	r3, r7, r1
 8001aba:	2200      	movs	r2, #0
 8001abc:	60da      	str	r2, [r3, #12]
			.message		= lux_value,
			.message_size	= sizeof(lux_value),
			.arg			= 0
	};

	printf("GY-30 task is run\r\n");
 8001abe:	4b32      	ldr	r3, [pc, #200]	; (8001b88 <StartGY30Task+0x100>)
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	f007 fc91 	bl	80093e8 <puts>
	osDelay(200);
 8001ac6:	20c8      	movs	r0, #200	; 0xc8
 8001ac8:	f004 fe38 	bl	800673c <osDelay>

	/* GY-30 Software IIC init */
	SI2C_Params_init(&si2c0Params);
 8001acc:	4b2f      	ldr	r3, [pc, #188]	; (8001b8c <StartGY30Task+0x104>)
 8001ace:	0018      	movs	r0, r3
 8001ad0:	f001 fb26 	bl	8003120 <SI2C_Params_init>
	si2c0Params.bitRate = SI2C_100kHz;
 8001ad4:	4b2d      	ldr	r3, [pc, #180]	; (8001b8c <StartGY30Task+0x104>)
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	701a      	strb	r2, [r3, #0]
	si2c0Params.slaveAddress = GY30_I2C_ADDR;
 8001ada:	4b2c      	ldr	r3, [pc, #176]	; (8001b8c <StartGY30Task+0x104>)
 8001adc:	2223      	movs	r2, #35	; 0x23
 8001ade:	705a      	strb	r2, [r3, #1]
	si2c0 = SI2C_open(DEVICE_SI2C0, &si2c0Params);
 8001ae0:	4b2a      	ldr	r3, [pc, #168]	; (8001b8c <StartGY30Task+0x104>)
 8001ae2:	0019      	movs	r1, r3
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	f001 fae3 	bl	80030b0 <SI2C_open>
 8001aea:	0002      	movs	r2, r0
 8001aec:	4b28      	ldr	r3, [pc, #160]	; (8001b90 <StartGY30Task+0x108>)
 8001aee:	601a      	str	r2, [r3, #0]
	if (si2c0 == NULL) {
 8001af0:	4b27      	ldr	r3, [pc, #156]	; (8001b90 <StartGY30Task+0x108>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d104      	bne.n	8001b02 <StartGY30Task+0x7a>
	  printf("Error Initializing SI2C0\r\n");
 8001af8:	4b26      	ldr	r3, [pc, #152]	; (8001b94 <StartGY30Task+0x10c>)
 8001afa:	0018      	movs	r0, r3
 8001afc:	f007 fc74 	bl	80093e8 <puts>
	  while (1);
 8001b00:	e7fe      	b.n	8001b00 <StartGY30Task+0x78>
	}
	else {
	  printf("SI2C0 Initialized!\r\n");
 8001b02:	4b25      	ldr	r3, [pc, #148]	; (8001b98 <StartGY30Task+0x110>)
 8001b04:	0018      	movs	r0, r3
 8001b06:	f007 fc6f 	bl	80093e8 <puts>
	}

	GY30_Init(si2c0);
 8001b0a:	4b21      	ldr	r3, [pc, #132]	; (8001b90 <StartGY30Task+0x108>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	0018      	movs	r0, r3
 8001b10:	f004 fa2a 	bl	8005f68 <GY30_Init>
	osDelay(100);
 8001b14:	2064      	movs	r0, #100	; 0x64
 8001b16:	f004 fe11 	bl	800673c <osDelay>

  /* Infinite loop */
	for(;;)
	{
		xTaskNotifyWait( 0x00, 0xffffffff, &ulNotifiedValue, portMAX_DELAY );
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	425b      	negs	r3, r3
 8001b1e:	2228      	movs	r2, #40	; 0x28
 8001b20:	18ba      	adds	r2, r7, r2
 8001b22:	2101      	movs	r1, #1
 8001b24:	4249      	negs	r1, r1
 8001b26:	2000      	movs	r0, #0
 8001b28:	f006 fa12 	bl	8007f50 <xTaskNotifyWait>

		lux = GY30_Measurement(si2c0);
 8001b2c:	4b18      	ldr	r3, [pc, #96]	; (8001b90 <StartGY30Task+0x108>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	252e      	movs	r5, #46	; 0x2e
 8001b32:	197c      	adds	r4, r7, r5
 8001b34:	0018      	movs	r0, r3
 8001b36:	f004 f9db 	bl	8005ef0 <GY30_Measurement>
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	8023      	strh	r3, [r4, #0]
		printf("Illumination is: %d lux.\r\n", lux);
 8001b3e:	197b      	adds	r3, r7, r5
 8001b40:	881a      	ldrh	r2, [r3, #0]
 8001b42:	4b16      	ldr	r3, [pc, #88]	; (8001b9c <StartGY30Task+0x114>)
 8001b44:	0011      	movs	r1, r2
 8001b46:	0018      	movs	r0, r3
 8001b48:	f000 fba8 	bl	800229c <printf>

		int_to_ascii( (int)lux, lux_queue.message, &size, 4, ' ' );
 8001b4c:	197b      	adds	r3, r7, r5
 8001b4e:	8818      	ldrh	r0, [r3, #0]
 8001b50:	240c      	movs	r4, #12
 8001b52:	193b      	adds	r3, r7, r4
 8001b54:	6859      	ldr	r1, [r3, #4]
 8001b56:	231f      	movs	r3, #31
 8001b58:	18fa      	adds	r2, r7, r3
 8001b5a:	2320      	movs	r3, #32
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	2304      	movs	r3, #4
 8001b60:	f001 fb44 	bl	80031ec <int_to_ascii>

		if( xQueueSend( oledQueueHandle, &lux_queue, ( TickType_t ) 0 ) != pdPASS )
 8001b64:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <StartGY30Task+0x118>)
 8001b66:	6818      	ldr	r0, [r3, #0]
 8001b68:	1939      	adds	r1, r7, r4
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f005 f86b 	bl	8006c48 <xQueueGenericSend>
 8001b72:	0003      	movs	r3, r0
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d0d0      	beq.n	8001b1a <StartGY30Task+0x92>
		{
			printf("GY-30 Send, oled Queue is Full\r\n");
 8001b78:	4b0a      	ldr	r3, [pc, #40]	; (8001ba4 <StartGY30Task+0x11c>)
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	f007 fc34 	bl	80093e8 <puts>
		xTaskNotifyWait( 0x00, 0xffffffff, &ulNotifiedValue, portMAX_DELAY );
 8001b80:	e7cb      	b.n	8001b1a <StartGY30Task+0x92>
 8001b82:	46c0      	nop			; (mov r8, r8)
 8001b84:	08009cc4 	.word	0x08009cc4
 8001b88:	08009c44 	.word	0x08009c44
 8001b8c:	20000178 	.word	0x20000178
 8001b90:	20000174 	.word	0x20000174
 8001b94:	08009c58 	.word	0x08009c58
 8001b98:	08009c74 	.word	0x08009c74
 8001b9c:	08009c88 	.word	0x08009c88
 8001ba0:	20000170 	.word	0x20000170
 8001ba4:	08009ca4 	.word	0x08009ca4

08001ba8 <StartOLEDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOLEDTask */
void StartOLEDTask(void *argument)
{
 8001ba8:	b590      	push	{r4, r7, lr}
 8001baa:	b089      	sub	sp, #36	; 0x24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOLEDTask */
	BaseType_t xReturn = pdTRUE;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	61bb      	str	r3, [r7, #24]
	QueueData_t oled_queue;

	uint8_t oled_counter = 0;
 8001bb4:	231f      	movs	r3, #31
 8001bb6:	18fb      	adds	r3, r7, r3
 8001bb8:	2200      	movs	r2, #0
 8001bba:	701a      	strb	r2, [r3, #0]

	printf("oled task is run\r\n");
 8001bbc:	4b4d      	ldr	r3, [pc, #308]	; (8001cf4 <StartOLEDTask+0x14c>)
 8001bbe:	0018      	movs	r0, r3
 8001bc0:	f007 fc12 	bl	80093e8 <puts>
	osDelay(500);
 8001bc4:	23fa      	movs	r3, #250	; 0xfa
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	0018      	movs	r0, r3
 8001bca:	f004 fdb7 	bl	800673c <osDelay>

	/* OLED Software IIC init */
	SI2C_Params_init(&si2c1Params);
 8001bce:	4b4a      	ldr	r3, [pc, #296]	; (8001cf8 <StartOLEDTask+0x150>)
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	f001 faa5 	bl	8003120 <SI2C_Params_init>
	si2c1Params.bitRate = SI2C_100kHz;
 8001bd6:	4b48      	ldr	r3, [pc, #288]	; (8001cf8 <StartOLEDTask+0x150>)
 8001bd8:	2202      	movs	r2, #2
 8001bda:	701a      	strb	r2, [r3, #0]
	si2c1Params.slaveAddress = SSD1306_I2C_ADDR;
 8001bdc:	4b46      	ldr	r3, [pc, #280]	; (8001cf8 <StartOLEDTask+0x150>)
 8001bde:	223c      	movs	r2, #60	; 0x3c
 8001be0:	705a      	strb	r2, [r3, #1]
	si2c1 = SI2C_open(DEVICE_SI2C1, &si2c1Params);
 8001be2:	4b45      	ldr	r3, [pc, #276]	; (8001cf8 <StartOLEDTask+0x150>)
 8001be4:	0019      	movs	r1, r3
 8001be6:	2001      	movs	r0, #1
 8001be8:	f001 fa62 	bl	80030b0 <SI2C_open>
 8001bec:	0002      	movs	r2, r0
 8001bee:	4b43      	ldr	r3, [pc, #268]	; (8001cfc <StartOLEDTask+0x154>)
 8001bf0:	601a      	str	r2, [r3, #0]
	if (si2c1 == NULL) {
 8001bf2:	4b42      	ldr	r3, [pc, #264]	; (8001cfc <StartOLEDTask+0x154>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d104      	bne.n	8001c04 <StartOLEDTask+0x5c>
	  printf("Error Initializing SI2C1\r\n");
 8001bfa:	4b41      	ldr	r3, [pc, #260]	; (8001d00 <StartOLEDTask+0x158>)
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	f007 fbf3 	bl	80093e8 <puts>
	  while (1);
 8001c02:	e7fe      	b.n	8001c02 <StartOLEDTask+0x5a>
	}
	else {
	  printf("SI2C1 Initialized!\r\n");
 8001c04:	4b3f      	ldr	r3, [pc, #252]	; (8001d04 <StartOLEDTask+0x15c>)
 8001c06:	0018      	movs	r0, r3
 8001c08:	f007 fbee 	bl	80093e8 <puts>
	}

	OLED_Init(si2c1);
 8001c0c:	4b3b      	ldr	r3, [pc, #236]	; (8001cfc <StartOLEDTask+0x154>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	0018      	movs	r0, r3
 8001c12:	f004 fa49 	bl	80060a8 <OLED_Init>
	SSD1306_Monochrome(si2c1, SSD1306_COLOR_BLACK);
 8001c16:	4b39      	ldr	r3, [pc, #228]	; (8001cfc <StartOLEDTask+0x154>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	f004 fc6f 	bl	8006500 <SSD1306_Monochrome>

  /* Infinite loop */
	for(;;)
	{
		xReturn = xQueueReceive( oledQueueHandle, &oled_queue, portMAX_DELAY);
 8001c22:	4b39      	ldr	r3, [pc, #228]	; (8001d08 <StartOLEDTask+0x160>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2201      	movs	r2, #1
 8001c28:	4252      	negs	r2, r2
 8001c2a:	2408      	movs	r4, #8
 8001c2c:	1939      	adds	r1, r7, r4
 8001c2e:	0018      	movs	r0, r3
 8001c30:	f005 f93f 	bl	8006eb2 <xQueueReceive>
 8001c34:	0003      	movs	r3, r0
 8001c36:	61bb      	str	r3, [r7, #24]
		if(pdPASS == xReturn)
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d12b      	bne.n	8001c96 <StartOLEDTask+0xee>
		{
			switch (oled_queue.send_task)
 8001c3e:	193b      	adds	r3, r7, r4
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d00e      	beq.n	8001c64 <StartOLEDTask+0xbc>
 8001c46:	2b03      	cmp	r3, #3
 8001c48:	d127      	bne.n	8001c9a <StartOLEDTask+0xf2>
			{
			case TASK_RTC :
				SSD1306_SetCursor(8, 0);
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	2008      	movs	r0, #8
 8001c4e:	f004 fc0f 	bl	8006470 <SSD1306_SetCursor>
				SSD1306_WriteString(oled_queue.message, Font_7x10, SSD1306_COLOR_WHITE);
 8001c52:	193b      	adds	r3, r7, r4
 8001c54:	6858      	ldr	r0, [r3, #4]
 8001c56:	4a2d      	ldr	r2, [pc, #180]	; (8001d0c <StartOLEDTask+0x164>)
 8001c58:	2301      	movs	r3, #1
 8001c5a:	6811      	ldr	r1, [r2, #0]
 8001c5c:	6852      	ldr	r2, [r2, #4]
 8001c5e:	f004 fbdd 	bl	800641c <SSD1306_WriteString>
				break;
 8001c62:	e01b      	b.n	8001c9c <StartOLEDTask+0xf4>
			case TASK_GY30 :
				SSD1306_SetCursor(8, 36);
 8001c64:	2124      	movs	r1, #36	; 0x24
 8001c66:	2008      	movs	r0, #8
 8001c68:	f004 fc02 	bl	8006470 <SSD1306_SetCursor>
				SSD1306_WriteString(oled_queue.message, Font_7x10, SSD1306_COLOR_WHITE);
 8001c6c:	2308      	movs	r3, #8
 8001c6e:	18fb      	adds	r3, r7, r3
 8001c70:	6858      	ldr	r0, [r3, #4]
 8001c72:	4a26      	ldr	r2, [pc, #152]	; (8001d0c <StartOLEDTask+0x164>)
 8001c74:	2301      	movs	r3, #1
 8001c76:	6811      	ldr	r1, [r2, #0]
 8001c78:	6852      	ldr	r2, [r2, #4]
 8001c7a:	f004 fbcf 	bl	800641c <SSD1306_WriteString>
				SSD1306_SetCursor(43, 36);
 8001c7e:	2124      	movs	r1, #36	; 0x24
 8001c80:	202b      	movs	r0, #43	; 0x2b
 8001c82:	f004 fbf5 	bl	8006470 <SSD1306_SetCursor>
				SSD1306_WriteString("lux", Font_7x10, SSD1306_COLOR_WHITE);
 8001c86:	4a21      	ldr	r2, [pc, #132]	; (8001d0c <StartOLEDTask+0x164>)
 8001c88:	4821      	ldr	r0, [pc, #132]	; (8001d10 <StartOLEDTask+0x168>)
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	6811      	ldr	r1, [r2, #0]
 8001c8e:	6852      	ldr	r2, [r2, #4]
 8001c90:	f004 fbc4 	bl	800641c <SSD1306_WriteString>
				break;
 8001c94:	e002      	b.n	8001c9c <StartOLEDTask+0xf4>
			default:
				break;
			}
		}
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	e000      	b.n	8001c9c <StartOLEDTask+0xf4>
				break;
 8001c9a:	46c0      	nop			; (mov r8, r8)

		if( (oled_counter >= 0) && (oled_counter < 10) )
 8001c9c:	231f      	movs	r3, #31
 8001c9e:	18fb      	adds	r3, r7, r3
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b09      	cmp	r3, #9
 8001ca4:	d809      	bhi.n	8001cba <StartOLEDTask+0x112>
		{
			SSD1306_ON(si2c1);
 8001ca6:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <StartOLEDTask+0x154>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	0018      	movs	r0, r3
 8001cac:	f004 fbfa 	bl	80064a4 <SSD1306_ON>
			SSD1306_UpdateScreen(si2c1);
 8001cb0:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <StartOLEDTask+0x154>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	f004 f9bf 	bl	8006038 <SSD1306_UpdateScreen>
		}
		if( (oled_counter >= 10) && (oled_counter < 30) )
 8001cba:	221f      	movs	r2, #31
 8001cbc:	18bb      	adds	r3, r7, r2
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b09      	cmp	r3, #9
 8001cc2:	d908      	bls.n	8001cd6 <StartOLEDTask+0x12e>
 8001cc4:	18bb      	adds	r3, r7, r2
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b1d      	cmp	r3, #29
 8001cca:	d804      	bhi.n	8001cd6 <StartOLEDTask+0x12e>
		{
			SSD1306_OFF(si2c1);
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <StartOLEDTask+0x154>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	f004 fbfe 	bl	80064d2 <SSD1306_OFF>
		}
		if( oled_counter == 30 )
 8001cd6:	221f      	movs	r2, #31
 8001cd8:	18bb      	adds	r3, r7, r2
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b1e      	cmp	r3, #30
 8001cde:	d102      	bne.n	8001ce6 <StartOLEDTask+0x13e>
		{
			oled_counter = 0;
 8001ce0:	18bb      	adds	r3, r7, r2
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	701a      	strb	r2, [r3, #0]
		}
		oled_counter++;
 8001ce6:	211f      	movs	r1, #31
 8001ce8:	187b      	adds	r3, r7, r1
 8001cea:	781a      	ldrb	r2, [r3, #0]
 8001cec:	187b      	adds	r3, r7, r1
 8001cee:	3201      	adds	r2, #1
 8001cf0:	701a      	strb	r2, [r3, #0]
		xReturn = xQueueReceive( oledQueueHandle, &oled_queue, portMAX_DELAY);
 8001cf2:	e796      	b.n	8001c22 <StartOLEDTask+0x7a>
 8001cf4:	08009ccc 	.word	0x08009ccc
 8001cf8:	20000184 	.word	0x20000184
 8001cfc:	20000180 	.word	0x20000180
 8001d00:	08009ce0 	.word	0x08009ce0
 8001d04:	08009cfc 	.word	0x08009cfc
 8001d08:	20000170 	.word	0x20000170
 8001d0c:	20000028 	.word	0x20000028
 8001d10:	08009d10 	.word	0x08009d10

08001d14 <StartRTCTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRTCTask */
void StartRTCTask(void *argument)
{
 8001d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d16:	b099      	sub	sp, #100	; 0x64
 8001d18:	af02      	add	r7, sp, #8
 8001d1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRTCTask */
	uint32_t ulNotifiedValue;
	uint32_t ulStatusRTC = 0x01;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	653b      	str	r3, [r7, #80]	; 0x50

	RTC_TimeTypeDef sTime = {0};
 8001d20:	2338      	movs	r3, #56	; 0x38
 8001d22:	18fb      	adds	r3, r7, r3
 8001d24:	0018      	movs	r0, r3
 8001d26:	2314      	movs	r3, #20
 8001d28:	001a      	movs	r2, r3
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	f007 fa36 	bl	800919c <memset>
	RTC_DateTypeDef sDate = {0};
 8001d30:	2334      	movs	r3, #52	; 0x34
 8001d32:	18fb      	adds	r3, r7, r3
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]

	char rtc_time[17] = "2023/01/01-00:00";
 8001d38:	2020      	movs	r0, #32
 8001d3a:	183b      	adds	r3, r7, r0
 8001d3c:	4a5c      	ldr	r2, [pc, #368]	; (8001eb0 <StartRTCTask+0x19c>)
 8001d3e:	ca32      	ldmia	r2!, {r1, r4, r5}
 8001d40:	c332      	stmia	r3!, {r1, r4, r5}
 8001d42:	6811      	ldr	r1, [r2, #0]
 8001d44:	6019      	str	r1, [r3, #0]
 8001d46:	7912      	ldrb	r2, [r2, #4]
 8001d48:	711a      	strb	r2, [r3, #4]
	unsigned char size;

	QueueData_t rtc_queue = {
 8001d4a:	210c      	movs	r1, #12
 8001d4c:	187b      	adds	r3, r7, r1
 8001d4e:	2203      	movs	r2, #3
 8001d50:	701a      	strb	r2, [r3, #0]
 8001d52:	187b      	adds	r3, r7, r1
 8001d54:	2202      	movs	r2, #2
 8001d56:	705a      	strb	r2, [r3, #1]
 8001d58:	187b      	adds	r3, r7, r1
 8001d5a:	183a      	adds	r2, r7, r0
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	187b      	adds	r3, r7, r1
 8001d60:	2211      	movs	r2, #17
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	187b      	adds	r3, r7, r1
 8001d66:	2200      	movs	r2, #0
 8001d68:	60da      	str	r2, [r3, #12]
			.message		= rtc_time,
			.message_size	= sizeof(rtc_time),
			.arg			= 0
	};

	uint8_t rtc_counter = 1;
 8001d6a:	2357      	movs	r3, #87	; 0x57
 8001d6c:	18fb      	adds	r3, r7, r3
 8001d6e:	2201      	movs	r2, #1
 8001d70:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
	for(;;)
	{
		xTaskNotifyWait( 0x00, 0xffffffff, &ulNotifiedValue, portMAX_DELAY );
 8001d72:	2301      	movs	r3, #1
 8001d74:	425b      	negs	r3, r3
 8001d76:	224c      	movs	r2, #76	; 0x4c
 8001d78:	18ba      	adds	r2, r7, r2
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	4249      	negs	r1, r1
 8001d7e:	2000      	movs	r0, #0
 8001d80:	f006 f8e6 	bl	8007f50 <xTaskNotifyWait>

		if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001d84:	2338      	movs	r3, #56	; 0x38
 8001d86:	18f9      	adds	r1, r7, r3
 8001d88:	4b4a      	ldr	r3, [pc, #296]	; (8001eb4 <StartRTCTask+0x1a0>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f002 fdef 	bl	8004970 <HAL_RTC_GetTime>
 8001d92:	1e03      	subs	r3, r0, #0
 8001d94:	d001      	beq.n	8001d9a <StartRTCTask+0x86>
		{
			Error_Handler();
 8001d96:	f000 f8ab 	bl	8001ef0 <Error_Handler>
		}
		if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001d9a:	2334      	movs	r3, #52	; 0x34
 8001d9c:	18f9      	adds	r1, r7, r3
 8001d9e:	4b45      	ldr	r3, [pc, #276]	; (8001eb4 <StartRTCTask+0x1a0>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	0018      	movs	r0, r3
 8001da4:	f002 feee 	bl	8004b84 <HAL_RTC_GetDate>
 8001da8:	1e03      	subs	r3, r0, #0
 8001daa:	d001      	beq.n	8001db0 <StartRTCTask+0x9c>
		{
			Error_Handler();
 8001dac:	f000 f8a0 	bl	8001ef0 <Error_Handler>
		}
//		printf("%02d/%02d/%02d-%02d:%02d:%02d\r\n", 1970 + sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);

		int_to_ascii( (int)(1970 + sDate.Year), rtc_queue.message, &size, 4, '0' );
 8001db0:	2634      	movs	r6, #52	; 0x34
 8001db2:	19bb      	adds	r3, r7, r6
 8001db4:	78db      	ldrb	r3, [r3, #3]
 8001db6:	4a40      	ldr	r2, [pc, #256]	; (8001eb8 <StartRTCTask+0x1a4>)
 8001db8:	1898      	adds	r0, r3, r2
 8001dba:	240c      	movs	r4, #12
 8001dbc:	193b      	adds	r3, r7, r4
 8001dbe:	6859      	ldr	r1, [r3, #4]
 8001dc0:	251f      	movs	r5, #31
 8001dc2:	197a      	adds	r2, r7, r5
 8001dc4:	2330      	movs	r3, #48	; 0x30
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	2304      	movs	r3, #4
 8001dca:	f001 fa0f 	bl	80031ec <int_to_ascii>
		int_to_ascii( (int)(sDate.Month), rtc_queue.message + 5, &size, 2, '0' );
 8001dce:	19bb      	adds	r3, r7, r6
 8001dd0:	785b      	ldrb	r3, [r3, #1]
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	193b      	adds	r3, r7, r4
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	1d59      	adds	r1, r3, #5
 8001dda:	197a      	adds	r2, r7, r5
 8001ddc:	2330      	movs	r3, #48	; 0x30
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	2302      	movs	r3, #2
 8001de2:	f001 fa03 	bl	80031ec <int_to_ascii>
		int_to_ascii( (int)(sDate.Date), rtc_queue.message + 8, &size, 2, '0' );
 8001de6:	19bb      	adds	r3, r7, r6
 8001de8:	789b      	ldrb	r3, [r3, #2]
 8001dea:	0018      	movs	r0, r3
 8001dec:	193b      	adds	r3, r7, r4
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	3308      	adds	r3, #8
 8001df2:	0019      	movs	r1, r3
 8001df4:	197a      	adds	r2, r7, r5
 8001df6:	2330      	movs	r3, #48	; 0x30
 8001df8:	9300      	str	r3, [sp, #0]
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	f001 f9f6 	bl	80031ec <int_to_ascii>
		int_to_ascii( (int)(sTime.Hours), rtc_queue.message + 11, &size, 2, '0' );
 8001e00:	2638      	movs	r6, #56	; 0x38
 8001e02:	19bb      	adds	r3, r7, r6
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	0018      	movs	r0, r3
 8001e08:	193b      	adds	r3, r7, r4
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	330b      	adds	r3, #11
 8001e0e:	0019      	movs	r1, r3
 8001e10:	197a      	adds	r2, r7, r5
 8001e12:	2330      	movs	r3, #48	; 0x30
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	2302      	movs	r3, #2
 8001e18:	f001 f9e8 	bl	80031ec <int_to_ascii>
		int_to_ascii( (int)(sTime.Minutes), rtc_queue.message + 14, &size, 2, '0' );
 8001e1c:	19bb      	adds	r3, r7, r6
 8001e1e:	785b      	ldrb	r3, [r3, #1]
 8001e20:	0018      	movs	r0, r3
 8001e22:	193b      	adds	r3, r7, r4
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	330e      	adds	r3, #14
 8001e28:	0019      	movs	r1, r3
 8001e2a:	197a      	adds	r2, r7, r5
 8001e2c:	2330      	movs	r3, #48	; 0x30
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	2302      	movs	r3, #2
 8001e32:	f001 f9db 	bl	80031ec <int_to_ascii>

		if( (rtc_counter == 0) || (rtc_counter == 60) )
 8001e36:	2257      	movs	r2, #87	; 0x57
 8001e38:	18bb      	adds	r3, r7, r2
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <StartRTCTask+0x134>
 8001e40:	18bb      	adds	r3, r7, r2
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b3c      	cmp	r3, #60	; 0x3c
 8001e46:	d119      	bne.n	8001e7c <StartRTCTask+0x168>
		{
			printf("%s\r\n", rtc_time);
 8001e48:	2320      	movs	r3, #32
 8001e4a:	18fa      	adds	r2, r7, r3
 8001e4c:	4b1b      	ldr	r3, [pc, #108]	; (8001ebc <StartRTCTask+0x1a8>)
 8001e4e:	0011      	movs	r1, r2
 8001e50:	0018      	movs	r0, r3
 8001e52:	f000 fa23 	bl	800229c <printf>
			if( xQueueSend( oledQueueHandle, &rtc_queue, ( TickType_t ) 0 ) != pdPASS )
 8001e56:	4b1a      	ldr	r3, [pc, #104]	; (8001ec0 <StartRTCTask+0x1ac>)
 8001e58:	6818      	ldr	r0, [r3, #0]
 8001e5a:	230c      	movs	r3, #12
 8001e5c:	18f9      	adds	r1, r7, r3
 8001e5e:	2300      	movs	r3, #0
 8001e60:	2200      	movs	r2, #0
 8001e62:	f004 fef1 	bl	8006c48 <xQueueGenericSend>
 8001e66:	0003      	movs	r3, r0
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d003      	beq.n	8001e74 <StartRTCTask+0x160>
			{
				printf("RTC Send, oled Queue is Full\r\n");
 8001e6c:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <StartRTCTask+0x1b0>)
 8001e6e:	0018      	movs	r0, r3
 8001e70:	f007 faba 	bl	80093e8 <puts>
			}

			rtc_counter = 0;
 8001e74:	2357      	movs	r3, #87	; 0x57
 8001e76:	18fb      	adds	r3, r7, r3
 8001e78:	2200      	movs	r2, #0
 8001e7a:	701a      	strb	r2, [r3, #0]
		}

		if( (rtc_counter % 3) == 0 )
 8001e7c:	2357      	movs	r3, #87	; 0x57
 8001e7e:	18fb      	adds	r3, r7, r3
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	2103      	movs	r1, #3
 8001e84:	0018      	movs	r0, r3
 8001e86:	f7fe f9c5 	bl	8000214 <__aeabi_uidivmod>
 8001e8a:	000b      	movs	r3, r1
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d106      	bne.n	8001ea0 <StartRTCTask+0x18c>
		{
			xTaskNotify( GY30TaskHandle, ulStatusRTC, eSetBits );
 8001e92:	4b0d      	ldr	r3, [pc, #52]	; (8001ec8 <StartRTCTask+0x1b4>)
 8001e94:	6818      	ldr	r0, [r3, #0]
 8001e96:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001e98:	2300      	movs	r3, #0
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f006 f8b0 	bl	8008000 <xTaskGenericNotify>
		}

		rtc_counter++;
 8001ea0:	2157      	movs	r1, #87	; 0x57
 8001ea2:	187b      	adds	r3, r7, r1
 8001ea4:	781a      	ldrb	r2, [r3, #0]
 8001ea6:	187b      	adds	r3, r7, r1
 8001ea8:	3201      	adds	r2, #1
 8001eaa:	701a      	strb	r2, [r3, #0]
		xTaskNotifyWait( 0x00, 0xffffffff, &ulNotifiedValue, portMAX_DELAY );
 8001eac:	e761      	b.n	8001d72 <StartRTCTask+0x5e>
 8001eae:	46c0      	nop			; (mov r8, r8)
 8001eb0:	08009d3c 	.word	0x08009d3c
 8001eb4:	200000b4 	.word	0x200000b4
 8001eb8:	000007b2 	.word	0x000007b2
 8001ebc:	08009d14 	.word	0x08009d14
 8001ec0:	20000170 	.word	0x20000170
 8001ec4:	08009d1c 	.word	0x08009d1c
 8001ec8:	20000160 	.word	0x20000160

08001ecc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM22) {
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a04      	ldr	r2, [pc, #16]	; (8001eec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d101      	bne.n	8001ee2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ede:	f001 fa1d 	bl	800331c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ee2:	46c0      	nop			; (mov r8, r8)
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	b002      	add	sp, #8
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	40011400 	.word	0x40011400

08001ef0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ef4:	b672      	cpsid	i
}
 8001ef6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ef8:	e7fe      	b.n	8001ef8 <Error_Handler+0x8>

08001efa <printchar>:
*/

#include <stdarg.h>

static void printchar(char **str, int c)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
 8001f02:	6039      	str	r1, [r7, #0]
	extern int putchar(int c);
	
	if (str) {
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00a      	beq.n	8001f20 <printchar+0x26>
		**str = c;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	b2d2      	uxtb	r2, r2
 8001f12:	701a      	strb	r2, [r3, #0]
		++(*str);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	1c5a      	adds	r2, r3, #1
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	601a      	str	r2, [r3, #0]
	}
	else (void)putchar(c);
}
 8001f1e:	e003      	b.n	8001f28 <printchar+0x2e>
	else (void)putchar(c);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	0018      	movs	r0, r3
 8001f24:	f007 f9da 	bl	80092dc <putchar>
}
 8001f28:	46c0      	nop			; (mov r8, r8)
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	b002      	add	sp, #8
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 8001f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f32:	46c6      	mov	lr, r8
 8001f34:	b500      	push	{lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
 8001f40:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
 8001f42:	2400      	movs	r4, #0
 8001f44:	2320      	movs	r3, #32
 8001f46:	4698      	mov	r8, r3

	if (width > 0) {
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	dd16      	ble.n	8001f7c <prints+0x4c>
		register int len = 0;
 8001f4e:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8001f50:	68be      	ldr	r6, [r7, #8]
 8001f52:	e001      	b.n	8001f58 <prints+0x28>
 8001f54:	3501      	adds	r5, #1
 8001f56:	3601      	adds	r6, #1
 8001f58:	7833      	ldrb	r3, [r6, #0]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1fa      	bne.n	8001f54 <prints+0x24>
		if (len >= width) width = 0;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	429d      	cmp	r5, r3
 8001f62:	db02      	blt.n	8001f6a <prints+0x3a>
 8001f64:	2300      	movs	r3, #0
 8001f66:	607b      	str	r3, [r7, #4]
 8001f68:	e002      	b.n	8001f70 <prints+0x40>
		else width -= len;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	1b5b      	subs	r3, r3, r5
 8001f6e:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	2202      	movs	r2, #2
 8001f74:	4013      	ands	r3, r2
 8001f76:	d001      	beq.n	8001f7c <prints+0x4c>
 8001f78:	2330      	movs	r3, #48	; 0x30
 8001f7a:	4698      	mov	r8, r3
	}
	if (!(pad & PAD_RIGHT)) {
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	4013      	ands	r3, r2
 8001f82:	d119      	bne.n	8001fb8 <prints+0x88>
		for ( ; width > 0; --width) {
 8001f84:	e008      	b.n	8001f98 <prints+0x68>
			printchar (out, padchar);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	4641      	mov	r1, r8
 8001f8a:	0018      	movs	r0, r3
 8001f8c:	f7ff ffb5 	bl	8001efa <printchar>
			++pc;
 8001f90:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	3b01      	subs	r3, #1
 8001f96:	607b      	str	r3, [r7, #4]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	dcf3      	bgt.n	8001f86 <prints+0x56>
		}
	}
	for ( ; *string ; ++string) {
 8001f9e:	e00b      	b.n	8001fb8 <prints+0x88>
		printchar (out, *string);
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	001a      	movs	r2, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	0011      	movs	r1, r2
 8001faa:	0018      	movs	r0, r3
 8001fac:	f7ff ffa5 	bl	8001efa <printchar>
		++pc;
 8001fb0:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	60bb      	str	r3, [r7, #8]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1ef      	bne.n	8001fa0 <prints+0x70>
	}
	for ( ; width > 0; --width) {
 8001fc0:	e008      	b.n	8001fd4 <prints+0xa4>
		printchar (out, padchar);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	4641      	mov	r1, r8
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	f7ff ff97 	bl	8001efa <printchar>
		++pc;
 8001fcc:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	607b      	str	r3, [r7, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	dcf3      	bgt.n	8001fc2 <prints+0x92>
	}

	return pc;
 8001fda:	0023      	movs	r3, r4
}
 8001fdc:	0018      	movs	r0, r3
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	b004      	add	sp, #16
 8001fe2:	bc80      	pop	{r7}
 8001fe4:	46b8      	mov	r8, r7
 8001fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001fe8 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 8001fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fea:	46ce      	mov	lr, r9
 8001fec:	4647      	mov	r7, r8
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b089      	sub	sp, #36	; 0x24
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	60f8      	str	r0, [r7, #12]
 8001ff6:	60b9      	str	r1, [r7, #8]
 8001ff8:	607a      	str	r2, [r7, #4]
 8001ffa:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	4699      	mov	r9, r3
 8002000:	2600      	movs	r6, #0
	register unsigned int u = i;
 8002002:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d10e      	bne.n	8002028 <printi+0x40>
		print_buf[0] = '0';
 800200a:	2114      	movs	r1, #20
 800200c:	187b      	adds	r3, r7, r1
 800200e:	2230      	movs	r2, #48	; 0x30
 8002010:	701a      	strb	r2, [r3, #0]
		print_buf[1] = '\0';
 8002012:	187b      	adds	r3, r7, r1
 8002014:	2200      	movs	r2, #0
 8002016:	705a      	strb	r2, [r3, #1]
		return prints (out, print_buf, width, pad);
 8002018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800201a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800201c:	1879      	adds	r1, r7, r1
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f7ff ff86 	bl	8001f30 <prints>
 8002024:	0003      	movs	r3, r0
 8002026:	e04e      	b.n	80020c6 <printi+0xde>
	}

	if (sg && b == 10 && i < 0) {
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00a      	beq.n	8002044 <printi+0x5c>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b0a      	cmp	r3, #10
 8002032:	d107      	bne.n	8002044 <printi+0x5c>
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	2b00      	cmp	r3, #0
 8002038:	da04      	bge.n	8002044 <printi+0x5c>
		neg = 1;
 800203a:	2301      	movs	r3, #1
 800203c:	4699      	mov	r9, r3
		u = -i;
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	425b      	negs	r3, r3
 8002042:	001d      	movs	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
 8002044:	2314      	movs	r3, #20
 8002046:	18fc      	adds	r4, r7, r3
 8002048:	340b      	adds	r4, #11
	*s = '\0';
 800204a:	2300      	movs	r3, #0
 800204c:	7023      	strb	r3, [r4, #0]

	while (u) {
 800204e:	e019      	b.n	8002084 <printi+0x9c>
		t = u % b;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	0019      	movs	r1, r3
 8002054:	0028      	movs	r0, r5
 8002056:	f7fe f8dd 	bl	8000214 <__aeabi_uidivmod>
 800205a:	000b      	movs	r3, r1
 800205c:	4698      	mov	r8, r3
		if( t >= 10 )
 800205e:	4643      	mov	r3, r8
 8002060:	2b09      	cmp	r3, #9
 8002062:	dd02      	ble.n	800206a <printi+0x82>
			t += letbase - '0' - 10;
 8002064:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002066:	3b3a      	subs	r3, #58	; 0x3a
 8002068:	4498      	add	r8, r3
		*--s = t + '0';
 800206a:	4643      	mov	r3, r8
 800206c:	b2db      	uxtb	r3, r3
 800206e:	3c01      	subs	r4, #1
 8002070:	3330      	adds	r3, #48	; 0x30
 8002072:	b2db      	uxtb	r3, r3
 8002074:	7023      	strb	r3, [r4, #0]
		u /= b;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	0019      	movs	r1, r3
 800207a:	0028      	movs	r0, r5
 800207c:	f7fe f844 	bl	8000108 <__udivsi3>
 8002080:	0003      	movs	r3, r0
 8002082:	001d      	movs	r5, r3
	while (u) {
 8002084:	2d00      	cmp	r5, #0
 8002086:	d1e3      	bne.n	8002050 <printi+0x68>
	}

	if (neg) {
 8002088:	464b      	mov	r3, r9
 800208a:	2b00      	cmp	r3, #0
 800208c:	d013      	beq.n	80020b6 <printi+0xce>
		if( width && (pad & PAD_ZERO) ) {
 800208e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00d      	beq.n	80020b0 <printi+0xc8>
 8002094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002096:	2202      	movs	r2, #2
 8002098:	4013      	ands	r3, r2
 800209a:	d009      	beq.n	80020b0 <printi+0xc8>
			printchar (out, '-');
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	212d      	movs	r1, #45	; 0x2d
 80020a0:	0018      	movs	r0, r3
 80020a2:	f7ff ff2a 	bl	8001efa <printchar>
			++pc;
 80020a6:	3601      	adds	r6, #1
			--width;
 80020a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020aa:	3b01      	subs	r3, #1
 80020ac:	643b      	str	r3, [r7, #64]	; 0x40
 80020ae:	e002      	b.n	80020b6 <printi+0xce>
		}
		else {
			*--s = '-';
 80020b0:	3c01      	subs	r4, #1
 80020b2:	232d      	movs	r3, #45	; 0x2d
 80020b4:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints (out, s, width, pad);
 80020b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	0021      	movs	r1, r4
 80020be:	f7ff ff37 	bl	8001f30 <prints>
 80020c2:	0003      	movs	r3, r0
 80020c4:	18f3      	adds	r3, r6, r3
}
 80020c6:	0018      	movs	r0, r3
 80020c8:	46bd      	mov	sp, r7
 80020ca:	b009      	add	sp, #36	; 0x24
 80020cc:	bcc0      	pop	{r6, r7}
 80020ce:	46b9      	mov	r9, r7
 80020d0:	46b0      	mov	r8, r6
 80020d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020d4 <print>:

static int print( char **out, const char *format, va_list args )
{
 80020d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020d6:	b08b      	sub	sp, #44	; 0x2c
 80020d8:	af04      	add	r7, sp, #16
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 80020e0:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 80020e2:	e0c6      	b.n	8002272 <print+0x19e>
		if (*format == '%') {
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b25      	cmp	r3, #37	; 0x25
 80020ea:	d000      	beq.n	80020ee <print+0x1a>
 80020ec:	e0b2      	b.n	8002254 <print+0x180>
			++format;
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	3301      	adds	r3, #1
 80020f2:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 80020f4:	2600      	movs	r6, #0
 80020f6:	0035      	movs	r5, r6
			if (*format == '\0') break;
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d100      	bne.n	8002102 <print+0x2e>
 8002100:	e0bd      	b.n	800227e <print+0x1aa>
			if (*format == '%') goto out;
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b25      	cmp	r3, #37	; 0x25
 8002108:	d100      	bne.n	800210c <print+0x38>
 800210a:	e0a5      	b.n	8002258 <print+0x184>
			if (*format == '-') {
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b2d      	cmp	r3, #45	; 0x2d
 8002112:	d10a      	bne.n	800212a <print+0x56>
				++format;
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	3301      	adds	r3, #1
 8002118:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 800211a:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 800211c:	e005      	b.n	800212a <print+0x56>
				++format;
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	3301      	adds	r3, #1
 8002122:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 8002124:	2302      	movs	r3, #2
 8002126:	4333      	orrs	r3, r6
 8002128:	001e      	movs	r6, r3
			while (*format == '0') {
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b30      	cmp	r3, #48	; 0x30
 8002130:	d0f5      	beq.n	800211e <print+0x4a>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8002132:	e00b      	b.n	800214c <print+0x78>
				width *= 10;
 8002134:	002b      	movs	r3, r5
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	195b      	adds	r3, r3, r5
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	001d      	movs	r5, r3
				width += *format - '0';
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	3b30      	subs	r3, #48	; 0x30
 8002144:	18ed      	adds	r5, r5, r3
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	3301      	adds	r3, #1
 800214a:	60bb      	str	r3, [r7, #8]
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b2f      	cmp	r3, #47	; 0x2f
 8002152:	d903      	bls.n	800215c <print+0x88>
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b39      	cmp	r3, #57	; 0x39
 800215a:	d9eb      	bls.n	8002134 <print+0x60>
			}
			if( *format == 's' ) {
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b73      	cmp	r3, #115	; 0x73
 8002162:	d10f      	bne.n	8002184 <print+0xb0>
				register char *s = (char *)va_arg( args, int );
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	1d1a      	adds	r2, r3, #4
 8002168:	607a      	str	r2, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	1e19      	subs	r1, r3, #0
				pc += prints (out, s?s:"(null)", width, pad);
 800216e:	d000      	beq.n	8002172 <print+0x9e>
 8002170:	e000      	b.n	8002174 <print+0xa0>
 8002172:	4949      	ldr	r1, [pc, #292]	; (8002298 <print+0x1c4>)
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	0033      	movs	r3, r6
 8002178:	002a      	movs	r2, r5
 800217a:	f7ff fed9 	bl	8001f30 <prints>
 800217e:	0003      	movs	r3, r0
 8002180:	18e4      	adds	r4, r4, r3
				continue;
 8002182:	e073      	b.n	800226c <print+0x198>
			}
			if( *format == 'd' ) {
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b64      	cmp	r3, #100	; 0x64
 800218a:	d10f      	bne.n	80021ac <print+0xd8>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	1d1a      	adds	r2, r3, #4
 8002190:	607a      	str	r2, [r7, #4]
 8002192:	6819      	ldr	r1, [r3, #0]
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	2361      	movs	r3, #97	; 0x61
 8002198:	9302      	str	r3, [sp, #8]
 800219a:	9601      	str	r6, [sp, #4]
 800219c:	9500      	str	r5, [sp, #0]
 800219e:	2301      	movs	r3, #1
 80021a0:	220a      	movs	r2, #10
 80021a2:	f7ff ff21 	bl	8001fe8 <printi>
 80021a6:	0003      	movs	r3, r0
 80021a8:	18e4      	adds	r4, r4, r3
				continue;
 80021aa:	e05f      	b.n	800226c <print+0x198>
			}
			if( *format == 'x' ) {
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b78      	cmp	r3, #120	; 0x78
 80021b2:	d10f      	bne.n	80021d4 <print+0x100>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	1d1a      	adds	r2, r3, #4
 80021b8:	607a      	str	r2, [r7, #4]
 80021ba:	6819      	ldr	r1, [r3, #0]
 80021bc:	68f8      	ldr	r0, [r7, #12]
 80021be:	2361      	movs	r3, #97	; 0x61
 80021c0:	9302      	str	r3, [sp, #8]
 80021c2:	9601      	str	r6, [sp, #4]
 80021c4:	9500      	str	r5, [sp, #0]
 80021c6:	2300      	movs	r3, #0
 80021c8:	2210      	movs	r2, #16
 80021ca:	f7ff ff0d 	bl	8001fe8 <printi>
 80021ce:	0003      	movs	r3, r0
 80021d0:	18e4      	adds	r4, r4, r3
				continue;
 80021d2:	e04b      	b.n	800226c <print+0x198>
			}
			if( *format == 'X' ) {
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b58      	cmp	r3, #88	; 0x58
 80021da:	d10f      	bne.n	80021fc <print+0x128>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	1d1a      	adds	r2, r3, #4
 80021e0:	607a      	str	r2, [r7, #4]
 80021e2:	6819      	ldr	r1, [r3, #0]
 80021e4:	68f8      	ldr	r0, [r7, #12]
 80021e6:	2341      	movs	r3, #65	; 0x41
 80021e8:	9302      	str	r3, [sp, #8]
 80021ea:	9601      	str	r6, [sp, #4]
 80021ec:	9500      	str	r5, [sp, #0]
 80021ee:	2300      	movs	r3, #0
 80021f0:	2210      	movs	r2, #16
 80021f2:	f7ff fef9 	bl	8001fe8 <printi>
 80021f6:	0003      	movs	r3, r0
 80021f8:	18e4      	adds	r4, r4, r3
				continue;
 80021fa:	e037      	b.n	800226c <print+0x198>
			}
			if( *format == 'u' ) {
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	2b75      	cmp	r3, #117	; 0x75
 8002202:	d10f      	bne.n	8002224 <print+0x150>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	1d1a      	adds	r2, r3, #4
 8002208:	607a      	str	r2, [r7, #4]
 800220a:	6819      	ldr	r1, [r3, #0]
 800220c:	68f8      	ldr	r0, [r7, #12]
 800220e:	2361      	movs	r3, #97	; 0x61
 8002210:	9302      	str	r3, [sp, #8]
 8002212:	9601      	str	r6, [sp, #4]
 8002214:	9500      	str	r5, [sp, #0]
 8002216:	2300      	movs	r3, #0
 8002218:	220a      	movs	r2, #10
 800221a:	f7ff fee5 	bl	8001fe8 <printi>
 800221e:	0003      	movs	r3, r0
 8002220:	18e4      	adds	r4, r4, r3
				continue;
 8002222:	e023      	b.n	800226c <print+0x198>
			}
			if( *format == 'c' ) {
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2b63      	cmp	r3, #99	; 0x63
 800222a:	d11f      	bne.n	800226c <print+0x198>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	1d1a      	adds	r2, r3, #4
 8002230:	607a      	str	r2, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	b2da      	uxtb	r2, r3
 8002236:	2114      	movs	r1, #20
 8002238:	187b      	adds	r3, r7, r1
 800223a:	701a      	strb	r2, [r3, #0]
				scr[1] = '\0';
 800223c:	187b      	adds	r3, r7, r1
 800223e:	2200      	movs	r2, #0
 8002240:	705a      	strb	r2, [r3, #1]
				pc += prints (out, scr, width, pad);
 8002242:	1879      	adds	r1, r7, r1
 8002244:	68f8      	ldr	r0, [r7, #12]
 8002246:	0033      	movs	r3, r6
 8002248:	002a      	movs	r2, r5
 800224a:	f7ff fe71 	bl	8001f30 <prints>
 800224e:	0003      	movs	r3, r0
 8002250:	18e4      	adds	r4, r4, r3
				continue;
 8002252:	e00b      	b.n	800226c <print+0x198>
			}
		}
		else {
		out:
 8002254:	46c0      	nop			; (mov r8, r8)
 8002256:	e000      	b.n	800225a <print+0x186>
			if (*format == '%') goto out;
 8002258:	46c0      	nop			; (mov r8, r8)
			printchar (out, *format);
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	001a      	movs	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	0011      	movs	r1, r2
 8002264:	0018      	movs	r0, r3
 8002266:	f7ff fe48 	bl	8001efa <printchar>
			++pc;
 800226a:	3401      	adds	r4, #1
	for (; *format != 0; ++format) {
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	3301      	adds	r3, #1
 8002270:	60bb      	str	r3, [r7, #8]
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d000      	beq.n	800227c <print+0x1a8>
 800227a:	e733      	b.n	80020e4 <print+0x10>
 800227c:	e000      	b.n	8002280 <print+0x1ac>
			if (*format == '\0') break;
 800227e:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (out) **out = '\0';
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <print+0x1ba>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2200      	movs	r2, #0
 800228c:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 800228e:	0023      	movs	r3, r4
}
 8002290:	0018      	movs	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	b007      	add	sp, #28
 8002296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002298:	08009d50 	.word	0x08009d50

0800229c <printf>:

int printf(const char *format, ...)
{
 800229c:	b40f      	push	{r0, r1, r2, r3}
 800229e:	b580      	push	{r7, lr}
 80022a0:	b082      	sub	sp, #8
 80022a2:	af00      	add	r7, sp, #0
        va_list args;
        
        va_start( args, format );
 80022a4:	2314      	movs	r3, #20
 80022a6:	18fb      	adds	r3, r7, r3
 80022a8:	607b      	str	r3, [r7, #4]
        return print( 0, format, args );
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	0019      	movs	r1, r3
 80022b0:	2000      	movs	r0, #0
 80022b2:	f7ff ff0f 	bl	80020d4 <print>
 80022b6:	0003      	movs	r3, r0
}
 80022b8:	0018      	movs	r0, r3
 80022ba:	46bd      	mov	sp, r7
 80022bc:	b002      	add	sp, #8
 80022be:	bc80      	pop	{r7}
 80022c0:	bc08      	pop	{r3}
 80022c2:	b004      	add	sp, #16
 80022c4:	4718      	bx	r3
	...

080022c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022cc:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <HAL_MspInit+0x34>)
 80022ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022d0:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <HAL_MspInit+0x34>)
 80022d2:	2101      	movs	r1, #1
 80022d4:	430a      	orrs	r2, r1
 80022d6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80022d8:	4b08      	ldr	r3, [pc, #32]	; (80022fc <HAL_MspInit+0x34>)
 80022da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022dc:	4b07      	ldr	r3, [pc, #28]	; (80022fc <HAL_MspInit+0x34>)
 80022de:	2180      	movs	r1, #128	; 0x80
 80022e0:	0549      	lsls	r1, r1, #21
 80022e2:	430a      	orrs	r2, r1
 80022e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80022e6:	2302      	movs	r3, #2
 80022e8:	425b      	negs	r3, r3
 80022ea:	2200      	movs	r2, #0
 80022ec:	2103      	movs	r1, #3
 80022ee:	0018      	movs	r0, r3
 80022f0:	f001 f8dc 	bl	80034ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022f4:	46c0      	nop			; (mov r8, r8)
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	46c0      	nop			; (mov r8, r8)
 80022fc:	40021000 	.word	0x40021000

08002300 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a0a      	ldr	r2, [pc, #40]	; (8002338 <HAL_RTC_MspInit+0x38>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d10e      	bne.n	8002330 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002312:	4b0a      	ldr	r3, [pc, #40]	; (800233c <HAL_RTC_MspInit+0x3c>)
 8002314:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002316:	4b09      	ldr	r3, [pc, #36]	; (800233c <HAL_RTC_MspInit+0x3c>)
 8002318:	2180      	movs	r1, #128	; 0x80
 800231a:	02c9      	lsls	r1, r1, #11
 800231c:	430a      	orrs	r2, r1
 800231e:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 3, 0);
 8002320:	2200      	movs	r2, #0
 8002322:	2103      	movs	r1, #3
 8002324:	2002      	movs	r0, #2
 8002326:	f001 f8c1 	bl	80034ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800232a:	2002      	movs	r0, #2
 800232c:	f001 f8d3 	bl	80034d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002330:	46c0      	nop			; (mov r8, r8)
 8002332:	46bd      	mov	sp, r7
 8002334:	b002      	add	sp, #8
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40002800 	.word	0x40002800
 800233c:	40021000 	.word	0x40021000

08002340 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002340:	b590      	push	{r4, r7, lr}
 8002342:	b089      	sub	sp, #36	; 0x24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002348:	240c      	movs	r4, #12
 800234a:	193b      	adds	r3, r7, r4
 800234c:	0018      	movs	r0, r3
 800234e:	2314      	movs	r3, #20
 8002350:	001a      	movs	r2, r3
 8002352:	2100      	movs	r1, #0
 8002354:	f006 ff22 	bl	800919c <memset>
  if(huart->Instance==USART2)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a18      	ldr	r2, [pc, #96]	; (80023c0 <HAL_UART_MspInit+0x80>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d129      	bne.n	80023b6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002362:	4b18      	ldr	r3, [pc, #96]	; (80023c4 <HAL_UART_MspInit+0x84>)
 8002364:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002366:	4b17      	ldr	r3, [pc, #92]	; (80023c4 <HAL_UART_MspInit+0x84>)
 8002368:	2180      	movs	r1, #128	; 0x80
 800236a:	0289      	lsls	r1, r1, #10
 800236c:	430a      	orrs	r2, r1
 800236e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002370:	4b14      	ldr	r3, [pc, #80]	; (80023c4 <HAL_UART_MspInit+0x84>)
 8002372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002374:	4b13      	ldr	r3, [pc, #76]	; (80023c4 <HAL_UART_MspInit+0x84>)
 8002376:	2101      	movs	r1, #1
 8002378:	430a      	orrs	r2, r1
 800237a:	62da      	str	r2, [r3, #44]	; 0x2c
 800237c:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <HAL_UART_MspInit+0x84>)
 800237e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002380:	2201      	movs	r2, #1
 8002382:	4013      	ands	r3, r2
 8002384:	60bb      	str	r3, [r7, #8]
 8002386:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002388:	0021      	movs	r1, r4
 800238a:	187b      	adds	r3, r7, r1
 800238c:	220c      	movs	r2, #12
 800238e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002390:	187b      	adds	r3, r7, r1
 8002392:	2202      	movs	r2, #2
 8002394:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002396:	187b      	adds	r3, r7, r1
 8002398:	2200      	movs	r2, #0
 800239a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800239c:	187b      	adds	r3, r7, r1
 800239e:	2203      	movs	r2, #3
 80023a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80023a2:	187b      	adds	r3, r7, r1
 80023a4:	2204      	movs	r2, #4
 80023a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a8:	187a      	adds	r2, r7, r1
 80023aa:	23a0      	movs	r3, #160	; 0xa0
 80023ac:	05db      	lsls	r3, r3, #23
 80023ae:	0011      	movs	r1, r2
 80023b0:	0018      	movs	r0, r3
 80023b2:	f001 f8a1 	bl	80034f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80023b6:	46c0      	nop			; (mov r8, r8)
 80023b8:	46bd      	mov	sp, r7
 80023ba:	b009      	add	sp, #36	; 0x24
 80023bc:	bd90      	pop	{r4, r7, pc}
 80023be:	46c0      	nop			; (mov r8, r8)
 80023c0:	40004400 	.word	0x40004400
 80023c4:	40021000 	.word	0x40021000

080023c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023c8:	b5b0      	push	{r4, r5, r7, lr}
 80023ca:	b08c      	sub	sp, #48	; 0x30
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;
  /*Configure the TIM22 IRQ priority */
  HAL_NVIC_SetPriority(TIM22_IRQn, TickPriority ,0);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	0019      	movs	r1, r3
 80023d6:	2016      	movs	r0, #22
 80023d8:	f001 f868 	bl	80034ac <HAL_NVIC_SetPriority>

  /* Enable the TIM22 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM22_IRQn);
 80023dc:	2016      	movs	r0, #22
 80023de:	f001 f87a 	bl	80034d6 <HAL_NVIC_EnableIRQ>

  /* Enable TIM22 clock */
  __HAL_RCC_TIM22_CLK_ENABLE();
 80023e2:	4b34      	ldr	r3, [pc, #208]	; (80024b4 <HAL_InitTick+0xec>)
 80023e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023e6:	4b33      	ldr	r3, [pc, #204]	; (80024b4 <HAL_InitTick+0xec>)
 80023e8:	2120      	movs	r1, #32
 80023ea:	430a      	orrs	r2, r1
 80023ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80023ee:	2308      	movs	r3, #8
 80023f0:	18fa      	adds	r2, r7, r3
 80023f2:	240c      	movs	r4, #12
 80023f4:	193b      	adds	r3, r7, r4
 80023f6:	0011      	movs	r1, r2
 80023f8:	0018      	movs	r0, r3
 80023fa:	f001 ffff 	bl	80043fc <HAL_RCC_GetClockConfig>

  /* Get APB2 prescaler */
  uwAPB2Prescaler = clkconfig.APB2CLKDivider;
 80023fe:	193b      	adds	r3, r7, r4
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Compute TIM22 clock */
  if (uwAPB2Prescaler == RCC_HCLK_DIV1)
 8002404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002406:	2b00      	cmp	r3, #0
 8002408:	d104      	bne.n	8002414 <HAL_InitTick+0x4c>
  {
    uwTimclock = HAL_RCC_GetPCLK2Freq();
 800240a:	f001 ffe1 	bl	80043d0 <HAL_RCC_GetPCLK2Freq>
 800240e:	0003      	movs	r3, r0
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
 8002412:	e004      	b.n	800241e <HAL_InitTick+0x56>
  }
  else
  {
    uwTimclock = 2U * HAL_RCC_GetPCLK2Freq();
 8002414:	f001 ffdc 	bl	80043d0 <HAL_RCC_GetPCLK2Freq>
 8002418:	0003      	movs	r3, r0
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800241e:	f001 ffd7 	bl	80043d0 <HAL_RCC_GetPCLK2Freq>
 8002422:	0003      	movs	r3, r0
 8002424:	627b      	str	r3, [r7, #36]	; 0x24

  /* Compute the prescaler value to have TIM22 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	4923      	ldr	r1, [pc, #140]	; (80024b8 <HAL_InitTick+0xf0>)
 800242a:	0018      	movs	r0, r3
 800242c:	f7fd fe6c 	bl	8000108 <__udivsi3>
 8002430:	0003      	movs	r3, r0
 8002432:	3b01      	subs	r3, #1
 8002434:	623b      	str	r3, [r7, #32]

  /* Initialize TIM22 */
  htim22.Instance = TIM22;
 8002436:	4b21      	ldr	r3, [pc, #132]	; (80024bc <HAL_InitTick+0xf4>)
 8002438:	4a21      	ldr	r2, [pc, #132]	; (80024c0 <HAL_InitTick+0xf8>)
 800243a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM22CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim22.Init.Period = (1000000U / 1000U) - 1U;
 800243c:	4b1f      	ldr	r3, [pc, #124]	; (80024bc <HAL_InitTick+0xf4>)
 800243e:	4a21      	ldr	r2, [pc, #132]	; (80024c4 <HAL_InitTick+0xfc>)
 8002440:	60da      	str	r2, [r3, #12]
  htim22.Init.Prescaler = uwPrescalerValue;
 8002442:	4b1e      	ldr	r3, [pc, #120]	; (80024bc <HAL_InitTick+0xf4>)
 8002444:	6a3a      	ldr	r2, [r7, #32]
 8002446:	605a      	str	r2, [r3, #4]
  htim22.Init.ClockDivision = 0;
 8002448:	4b1c      	ldr	r3, [pc, #112]	; (80024bc <HAL_InitTick+0xf4>)
 800244a:	2200      	movs	r2, #0
 800244c:	611a      	str	r2, [r3, #16]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 800244e:	4b1b      	ldr	r3, [pc, #108]	; (80024bc <HAL_InitTick+0xf4>)
 8002450:	2200      	movs	r2, #0
 8002452:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim22);
 8002454:	252f      	movs	r5, #47	; 0x2f
 8002456:	197c      	adds	r4, r7, r5
 8002458:	4b18      	ldr	r3, [pc, #96]	; (80024bc <HAL_InitTick+0xf4>)
 800245a:	0018      	movs	r0, r3
 800245c:	f002 fe18 	bl	8005090 <HAL_TIM_Base_Init>
 8002460:	0003      	movs	r3, r0
 8002462:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8002464:	197b      	adds	r3, r7, r5
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d11b      	bne.n	80024a4 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim22);
 800246c:	197c      	adds	r4, r7, r5
 800246e:	4b13      	ldr	r3, [pc, #76]	; (80024bc <HAL_InitTick+0xf4>)
 8002470:	0018      	movs	r0, r3
 8002472:	f002 fe55 	bl	8005120 <HAL_TIM_Base_Start_IT>
 8002476:	0003      	movs	r3, r0
 8002478:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 800247a:	197b      	adds	r3, r7, r5
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d110      	bne.n	80024a4 <HAL_InitTick+0xdc>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b03      	cmp	r3, #3
 8002486:	d809      	bhi.n	800249c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM22_IRQn, TickPriority, 0U);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	0019      	movs	r1, r3
 800248e:	2016      	movs	r0, #22
 8002490:	f001 f80c 	bl	80034ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002494:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <HAL_InitTick+0x100>)
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	e003      	b.n	80024a4 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 800249c:	232f      	movs	r3, #47	; 0x2f
 800249e:	18fb      	adds	r3, r7, r3
 80024a0:	2201      	movs	r2, #1
 80024a2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 80024a4:	232f      	movs	r3, #47	; 0x2f
 80024a6:	18fb      	adds	r3, r7, r3
 80024a8:	781b      	ldrb	r3, [r3, #0]
}
 80024aa:	0018      	movs	r0, r3
 80024ac:	46bd      	mov	sp, r7
 80024ae:	b00c      	add	sp, #48	; 0x30
 80024b0:	bdb0      	pop	{r4, r5, r7, pc}
 80024b2:	46c0      	nop			; (mov r8, r8)
 80024b4:	40021000 	.word	0x40021000
 80024b8:	000f4240 	.word	0x000f4240
 80024bc:	2000018c 	.word	0x2000018c
 80024c0:	40011400 	.word	0x40011400
 80024c4:	000003e7 	.word	0x000003e7
 80024c8:	20000020 	.word	0x20000020

080024cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024d0:	e7fe      	b.n	80024d0 <NMI_Handler+0x4>

080024d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024d6:	e7fe      	b.n	80024d6 <HardFault_Handler+0x4>

080024d8 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80024dc:	4b03      	ldr	r3, [pc, #12]	; (80024ec <RTC_IRQHandler+0x14>)
 80024de:	0018      	movs	r0, r3
 80024e0:	f002 fcea 	bl	8004eb8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 80024e4:	46c0      	nop			; (mov r8, r8)
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	46c0      	nop			; (mov r8, r8)
 80024ec:	200000b4 	.word	0x200000b4

080024f0 <TIM22_IRQHandler>:

/**
  * @brief This function handles TIM22 global interrupt.
  */
void TIM22_IRQHandler(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM22_IRQn 0 */

  /* USER CODE END TIM22_IRQn 0 */
  HAL_TIM_IRQHandler(&htim22);
 80024f4:	4b03      	ldr	r3, [pc, #12]	; (8002504 <TIM22_IRQHandler+0x14>)
 80024f6:	0018      	movs	r0, r3
 80024f8:	f002 fe5e 	bl	80051b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM22_IRQn 1 */

  /* USER CODE END TIM22_IRQn 1 */
}
 80024fc:	46c0      	nop			; (mov r8, r8)
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	46c0      	nop			; (mov r8, r8)
 8002504:	2000018c 	.word	0x2000018c

08002508 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002514:	2300      	movs	r3, #0
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	e00a      	b.n	8002530 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800251a:	e000      	b.n	800251e <_read+0x16>
 800251c:	bf00      	nop
 800251e:	0001      	movs	r1, r0
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	1c5a      	adds	r2, r3, #1
 8002524:	60ba      	str	r2, [r7, #8]
 8002526:	b2ca      	uxtb	r2, r1
 8002528:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	3301      	adds	r3, #1
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	429a      	cmp	r2, r3
 8002536:	dbf0      	blt.n	800251a <_read+0x12>
  }

  return len;
 8002538:	687b      	ldr	r3, [r7, #4]
}
 800253a:	0018      	movs	r0, r3
 800253c:	46bd      	mov	sp, r7
 800253e:	b006      	add	sp, #24
 8002540:	bd80      	pop	{r7, pc}

08002542 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b086      	sub	sp, #24
 8002546:	af00      	add	r7, sp, #0
 8002548:	60f8      	str	r0, [r7, #12]
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]
 8002552:	e009      	b.n	8002568 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	1c5a      	adds	r2, r3, #1
 8002558:	60ba      	str	r2, [r7, #8]
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	0018      	movs	r0, r3
 800255e:	f000 fe31 	bl	80031c4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	3301      	adds	r3, #1
 8002566:	617b      	str	r3, [r7, #20]
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	429a      	cmp	r2, r3
 800256e:	dbf1      	blt.n	8002554 <_write+0x12>
  }
  return len;
 8002570:	687b      	ldr	r3, [r7, #4]
}
 8002572:	0018      	movs	r0, r3
 8002574:	46bd      	mov	sp, r7
 8002576:	b006      	add	sp, #24
 8002578:	bd80      	pop	{r7, pc}

0800257a <_close>:

int _close(int file)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b082      	sub	sp, #8
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002582:	2301      	movs	r3, #1
 8002584:	425b      	negs	r3, r3
}
 8002586:	0018      	movs	r0, r3
 8002588:	46bd      	mov	sp, r7
 800258a:	b002      	add	sp, #8
 800258c:	bd80      	pop	{r7, pc}

0800258e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b082      	sub	sp, #8
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
 8002596:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	2280      	movs	r2, #128	; 0x80
 800259c:	0192      	lsls	r2, r2, #6
 800259e:	605a      	str	r2, [r3, #4]
  return 0;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	0018      	movs	r0, r3
 80025a4:	46bd      	mov	sp, r7
 80025a6:	b002      	add	sp, #8
 80025a8:	bd80      	pop	{r7, pc}

080025aa <_isatty>:

int _isatty(int file)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025b2:	2301      	movs	r3, #1
}
 80025b4:	0018      	movs	r0, r3
 80025b6:	46bd      	mov	sp, r7
 80025b8:	b002      	add	sp, #8
 80025ba:	bd80      	pop	{r7, pc}

080025bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	0018      	movs	r0, r3
 80025cc:	46bd      	mov	sp, r7
 80025ce:	b004      	add	sp, #16
 80025d0:	bd80      	pop	{r7, pc}
	...

080025d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025dc:	4a14      	ldr	r2, [pc, #80]	; (8002630 <_sbrk+0x5c>)
 80025de:	4b15      	ldr	r3, [pc, #84]	; (8002634 <_sbrk+0x60>)
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025e8:	4b13      	ldr	r3, [pc, #76]	; (8002638 <_sbrk+0x64>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d102      	bne.n	80025f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025f0:	4b11      	ldr	r3, [pc, #68]	; (8002638 <_sbrk+0x64>)
 80025f2:	4a12      	ldr	r2, [pc, #72]	; (800263c <_sbrk+0x68>)
 80025f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025f6:	4b10      	ldr	r3, [pc, #64]	; (8002638 <_sbrk+0x64>)
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	18d3      	adds	r3, r2, r3
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	429a      	cmp	r2, r3
 8002602:	d207      	bcs.n	8002614 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002604:	f006 fc92 	bl	8008f2c <__errno>
 8002608:	0003      	movs	r3, r0
 800260a:	220c      	movs	r2, #12
 800260c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800260e:	2301      	movs	r3, #1
 8002610:	425b      	negs	r3, r3
 8002612:	e009      	b.n	8002628 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002614:	4b08      	ldr	r3, [pc, #32]	; (8002638 <_sbrk+0x64>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800261a:	4b07      	ldr	r3, [pc, #28]	; (8002638 <_sbrk+0x64>)
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	18d2      	adds	r2, r2, r3
 8002622:	4b05      	ldr	r3, [pc, #20]	; (8002638 <_sbrk+0x64>)
 8002624:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002626:	68fb      	ldr	r3, [r7, #12]
}
 8002628:	0018      	movs	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	b006      	add	sp, #24
 800262e:	bd80      	pop	{r7, pc}
 8002630:	20005000 	.word	0x20005000
 8002634:	00000400 	.word	0x00000400
 8002638:	200001cc 	.word	0x200001cc
 800263c:	20002868 	.word	0x20002868

08002640 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002644:	46c0      	nop			; (mov r8, r8)
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
	...

0800264c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800264c:	4813      	ldr	r0, [pc, #76]	; (800269c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800264e:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8002650:	4813      	ldr	r0, [pc, #76]	; (80026a0 <LoopForever+0x6>)
    LDR R1, [R0]
 8002652:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8002654:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8002656:	4a13      	ldr	r2, [pc, #76]	; (80026a4 <LoopForever+0xa>)
    CMP R1, R2
 8002658:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800265a:	d105      	bne.n	8002668 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 800265c:	4812      	ldr	r0, [pc, #72]	; (80026a8 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800265e:	4913      	ldr	r1, [pc, #76]	; (80026ac <LoopForever+0x12>)
    STR R1, [R0]
 8002660:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8002662:	4813      	ldr	r0, [pc, #76]	; (80026b0 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8002664:	4913      	ldr	r1, [pc, #76]	; (80026b4 <LoopForever+0x1a>)
    STR R1, [R0]
 8002666:	6001      	str	r1, [r0, #0]

08002668 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002668:	4813      	ldr	r0, [pc, #76]	; (80026b8 <LoopForever+0x1e>)
  ldr r1, =_edata
 800266a:	4914      	ldr	r1, [pc, #80]	; (80026bc <LoopForever+0x22>)
  ldr r2, =_sidata
 800266c:	4a14      	ldr	r2, [pc, #80]	; (80026c0 <LoopForever+0x26>)
  movs r3, #0
 800266e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002670:	e002      	b.n	8002678 <LoopCopyDataInit>

08002672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002676:	3304      	adds	r3, #4

08002678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800267a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800267c:	d3f9      	bcc.n	8002672 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800267e:	4a11      	ldr	r2, [pc, #68]	; (80026c4 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8002680:	4c11      	ldr	r4, [pc, #68]	; (80026c8 <LoopForever+0x2e>)
  movs r3, #0
 8002682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002684:	e001      	b.n	800268a <LoopFillZerobss>

08002686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002688:	3204      	adds	r2, #4

0800268a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800268a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800268c:	d3fb      	bcc.n	8002686 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800268e:	f7ff ffd7 	bl	8002640 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002692:	f006 fd53 	bl	800913c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002696:	f7fe ff5d 	bl	8001554 <main>

0800269a <LoopForever>:

LoopForever:
    b LoopForever
 800269a:	e7fe      	b.n	800269a <LoopForever>
   ldr   r0, =_estack
 800269c:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 80026a0:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80026a4:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 80026a8:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 80026ac:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80026b0:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80026b4:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80026b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026bc:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80026c0:	0800a7cc 	.word	0x0800a7cc
  ldr r2, =_sbss
 80026c4:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80026c8:	20002868 	.word	0x20002868

080026cc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026cc:	e7fe      	b.n	80026cc <ADC1_IRQHandler>
	...

080026d0 <IIC_Delay>:

#include <Drivers/Simulation/SI2C/SI2C_Device.h>
#include "delay.h"

void IIC_Delay(SI2C_Handle handle)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
	SI2C_Device_Object            *object;
	object = handle->object;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	60fb      	str	r3, [r7, #12]

	delay_us(SI2C_Delay[object->bitRate]);	//10KHz speed
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	685a      	ldr	r2, [r3, #4]
 80026e2:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <IIC_Delay+0x28>)
 80026e4:	0092      	lsls	r2, r2, #2
 80026e6:	58d3      	ldr	r3, [r2, r3]
 80026e8:	0018      	movs	r0, r3
 80026ea:	f000 fd2b 	bl	8003144 <delay_us>
}
 80026ee:	46c0      	nop			; (mov r8, r8)
 80026f0:	46bd      	mov	sp, r7
 80026f2:	b004      	add	sp, #16
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	46c0      	nop			; (mov r8, r8)
 80026f8:	20000004 	.word	0x20000004

080026fc <SDA_IN>:

void SDA_IN(SI2C_Handle handle)
{
 80026fc:	b590      	push	{r4, r7, lr}
 80026fe:	b089      	sub	sp, #36	; 0x24
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
	SI2C_Device_Object            *object;
	object = handle->object;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	61fb      	str	r3, [r7, #28]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800270a:	2408      	movs	r4, #8
 800270c:	193b      	adds	r3, r7, r4
 800270e:	0018      	movs	r0, r3
 8002710:	2314      	movs	r3, #20
 8002712:	001a      	movs	r2, r3
 8002714:	2100      	movs	r1, #0
 8002716:	f006 fd41 	bl	800919c <memset>

	/*Configure GPIO pin : SDA_Pin */
	GPIO_InitStruct.Pin = object->si2cPins.pinSDA;
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800271e:	193b      	adds	r3, r7, r4
 8002720:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002722:	193b      	adds	r3, r7, r4
 8002724:	2200      	movs	r2, #0
 8002726:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	193b      	adds	r3, r7, r4
 800272a:	2200      	movs	r2, #0
 800272c:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(object->si2cPins.portSDA, &GPIO_InitStruct);
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	193a      	adds	r2, r7, r4
 8002734:	0011      	movs	r1, r2
 8002736:	0018      	movs	r0, r3
 8002738:	f000 fede 	bl	80034f8 <HAL_GPIO_Init>
}
 800273c:	46c0      	nop			; (mov r8, r8)
 800273e:	46bd      	mov	sp, r7
 8002740:	b009      	add	sp, #36	; 0x24
 8002742:	bd90      	pop	{r4, r7, pc}

08002744 <READ_SDA>:

SI2C_PinState READ_SDA(SI2C_Handle handle)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
	SI2C_Device_Object            *object;
	object = handle->object;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	60fb      	str	r3, [r7, #12]

	/*Reads the specified input port pin */
	return(HAL_GPIO_ReadPin(object->si2cPins.portSDA, object->si2cPins.pinSDA));
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6a1a      	ldr	r2, [r3, #32]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275a:	b29b      	uxth	r3, r3
 800275c:	0019      	movs	r1, r3
 800275e:	0010      	movs	r0, r2
 8002760:	f001 f848 	bl	80037f4 <HAL_GPIO_ReadPin>
 8002764:	0003      	movs	r3, r0
}
 8002766:	0018      	movs	r0, r3
 8002768:	46bd      	mov	sp, r7
 800276a:	b004      	add	sp, #16
 800276c:	bd80      	pop	{r7, pc}

0800276e <SDA_OUT>:

void SDA_OUT(SI2C_Handle handle)
{
 800276e:	b590      	push	{r4, r7, lr}
 8002770:	b089      	sub	sp, #36	; 0x24
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
	SI2C_Device_Object            *object;
	object = handle->object;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	61fb      	str	r3, [r7, #28]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800277c:	2408      	movs	r4, #8
 800277e:	193b      	adds	r3, r7, r4
 8002780:	0018      	movs	r0, r3
 8002782:	2314      	movs	r3, #20
 8002784:	001a      	movs	r2, r3
 8002786:	2100      	movs	r1, #0
 8002788:	f006 fd08 	bl	800919c <memset>

	/*Configure GPIO pin : SDA_Pin */
	GPIO_InitStruct.Pin = object->si2cPins.pinSDA;
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002790:	193b      	adds	r3, r7, r4
 8002792:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002794:	193b      	adds	r3, r7, r4
 8002796:	2211      	movs	r2, #17
 8002798:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279a:	193b      	adds	r3, r7, r4
 800279c:	2200      	movs	r2, #0
 800279e:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(object->si2cPins.portSDA, &GPIO_InitStruct);
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	193a      	adds	r2, r7, r4
 80027a6:	0011      	movs	r1, r2
 80027a8:	0018      	movs	r0, r3
 80027aa:	f000 fea5 	bl	80034f8 <HAL_GPIO_Init>
}
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	46bd      	mov	sp, r7
 80027b2:	b009      	add	sp, #36	; 0x24
 80027b4:	bd90      	pop	{r4, r7, pc}

080027b6 <IIC_SDA>:

void IIC_SDA(SI2C_Handle handle, SI2C_PinState PinState)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b084      	sub	sp, #16
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
 80027be:	000a      	movs	r2, r1
 80027c0:	1cfb      	adds	r3, r7, #3
 80027c2:	701a      	strb	r2, [r3, #0]
	SI2C_Device_Object            *object;
	object = handle->object;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	60fb      	str	r3, [r7, #12]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(object->si2cPins.portSDA, object->si2cPins.pinSDA, PinState);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6a18      	ldr	r0, [r3, #32]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d2:	b299      	uxth	r1, r3
 80027d4:	1cfb      	adds	r3, r7, #3
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	001a      	movs	r2, r3
 80027da:	f001 f828 	bl	800382e <HAL_GPIO_WritePin>
}
 80027de:	46c0      	nop			; (mov r8, r8)
 80027e0:	46bd      	mov	sp, r7
 80027e2:	b004      	add	sp, #16
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <IIC_SCL>:

void IIC_SCL(SI2C_Handle handle, SI2C_PinState PinState)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b084      	sub	sp, #16
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
 80027ee:	000a      	movs	r2, r1
 80027f0:	1cfb      	adds	r3, r7, #3
 80027f2:	701a      	strb	r2, [r3, #0]
	SI2C_Device_Object            *object;
	object = handle->object;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	60fb      	str	r3, [r7, #12]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(object->si2cPins.portSCL, object->si2cPins.pinSCL, PinState);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002802:	b299      	uxth	r1, r3
 8002804:	1cfb      	adds	r3, r7, #3
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	001a      	movs	r2, r3
 800280a:	f001 f810 	bl	800382e <HAL_GPIO_WritePin>
}
 800280e:	46c0      	nop			; (mov r8, r8)
 8002810:	46bd      	mov	sp, r7
 8002812:	b004      	add	sp, #16
 8002814:	bd80      	pop	{r7, pc}

08002816 <IIC_Start>:

void IIC_Start(SI2C_Handle handle)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b082      	sub	sp, #8
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
	SDA_OUT(handle);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	0018      	movs	r0, r3
 8002822:	f7ff ffa4 	bl	800276e <SDA_OUT>
	IIC_SDA(handle, IIC_HIGH);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2101      	movs	r1, #1
 800282a:	0018      	movs	r0, r3
 800282c:	f7ff ffc3 	bl	80027b6 <IIC_SDA>
	IIC_SCL(handle, IIC_HIGH);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2101      	movs	r1, #1
 8002834:	0018      	movs	r0, r3
 8002836:	f7ff ffd6 	bl	80027e6 <IIC_SCL>
	IIC_Delay(handle);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	0018      	movs	r0, r3
 800283e:	f7ff ff47 	bl	80026d0 <IIC_Delay>
	IIC_SDA(handle, IIC_LOW);	//START:when CLK is high,DATA change form high to low
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2100      	movs	r1, #0
 8002846:	0018      	movs	r0, r3
 8002848:	f7ff ffb5 	bl	80027b6 <IIC_SDA>
	IIC_Delay(handle);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	0018      	movs	r0, r3
 8002850:	f7ff ff3e 	bl	80026d0 <IIC_Delay>
	IIC_SCL(handle, IIC_LOW);	//钳住I2C总线，准备发送或接收数据
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2100      	movs	r1, #0
 8002858:	0018      	movs	r0, r3
 800285a:	f7ff ffc4 	bl	80027e6 <IIC_SCL>
	IIC_Delay(handle);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	0018      	movs	r0, r3
 8002862:	f7ff ff35 	bl	80026d0 <IIC_Delay>
}
 8002866:	46c0      	nop			; (mov r8, r8)
 8002868:	46bd      	mov	sp, r7
 800286a:	b002      	add	sp, #8
 800286c:	bd80      	pop	{r7, pc}

0800286e <IIC_Stop>:

void IIC_Stop(SI2C_Handle handle)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
	SDA_OUT(handle);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	0018      	movs	r0, r3
 800287a:	f7ff ff78 	bl	800276e <SDA_OUT>
	IIC_SDA(handle, IIC_LOW);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2100      	movs	r1, #0
 8002882:	0018      	movs	r0, r3
 8002884:	f7ff ff97 	bl	80027b6 <IIC_SDA>
	IIC_SCL(handle, IIC_HIGH);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2101      	movs	r1, #1
 800288c:	0018      	movs	r0, r3
 800288e:	f7ff ffaa 	bl	80027e6 <IIC_SCL>
	IIC_Delay(handle);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	0018      	movs	r0, r3
 8002896:	f7ff ff1b 	bl	80026d0 <IIC_Delay>
	IIC_SDA(handle, IIC_HIGH);	//STOP:when CLK is high DATA change form low to high
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2101      	movs	r1, #1
 800289e:	0018      	movs	r0, r3
 80028a0:	f7ff ff89 	bl	80027b6 <IIC_SDA>
	IIC_Delay(handle);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	0018      	movs	r0, r3
 80028a8:	f7ff ff12 	bl	80026d0 <IIC_Delay>
}
 80028ac:	46c0      	nop			; (mov r8, r8)
 80028ae:	46bd      	mov	sp, r7
 80028b0:	b002      	add	sp, #8
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <IIC_Wait_Ack>:
 *
 * @return  uint8_t		1，接收应答失败
 *					0，接收应答成功
 */
uint8_t IIC_Wait_Ack(SI2C_Handle handle)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
	uint16_t ucErrTime = 0;
 80028bc:	230e      	movs	r3, #14
 80028be:	18fb      	adds	r3, r7, r3
 80028c0:	2200      	movs	r2, #0
 80028c2:	801a      	strh	r2, [r3, #0]
	SDA_IN(handle);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	0018      	movs	r0, r3
 80028c8:	f7ff ff18 	bl	80026fc <SDA_IN>
//	IIC_SDA(handle, IIC_HIGH);
	IIC_Delay(handle);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	0018      	movs	r0, r3
 80028d0:	f7ff fefe 	bl	80026d0 <IIC_Delay>
	IIC_SCL(handle, IIC_HIGH);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2101      	movs	r1, #1
 80028d8:	0018      	movs	r0, r3
 80028da:	f7ff ff84 	bl	80027e6 <IIC_SCL>
	IIC_Delay(handle);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	0018      	movs	r0, r3
 80028e2:	f7ff fef5 	bl	80026d0 <IIC_Delay>

	while(READ_SDA(handle))
 80028e6:	e012      	b.n	800290e <IIC_Wait_Ack+0x5a>
	{
		ucErrTime++;
 80028e8:	210e      	movs	r1, #14
 80028ea:	187b      	adds	r3, r7, r1
 80028ec:	881a      	ldrh	r2, [r3, #0]
 80028ee:	187b      	adds	r3, r7, r1
 80028f0:	3201      	adds	r2, #1
 80028f2:	801a      	strh	r2, [r3, #0]
		if(ucErrTime > 1000)
 80028f4:	187b      	adds	r3, r7, r1
 80028f6:	881a      	ldrh	r2, [r3, #0]
 80028f8:	23fa      	movs	r3, #250	; 0xfa
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d906      	bls.n	800290e <IIC_Wait_Ack+0x5a>
		{
			IIC_SCL(handle, IIC_LOW);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2100      	movs	r1, #0
 8002904:	0018      	movs	r0, r3
 8002906:	f7ff ff6e 	bl	80027e6 <IIC_SCL>
			return 1;
 800290a:	2301      	movs	r3, #1
 800290c:	e00b      	b.n	8002926 <IIC_Wait_Ack+0x72>
	while(READ_SDA(handle))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	0018      	movs	r0, r3
 8002912:	f7ff ff17 	bl	8002744 <READ_SDA>
 8002916:	1e03      	subs	r3, r0, #0
 8002918:	d1e6      	bne.n	80028e8 <IIC_Wait_Ack+0x34>
		}
	}

	IIC_SCL(handle, IIC_LOW);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2100      	movs	r1, #0
 800291e:	0018      	movs	r0, r3
 8002920:	f7ff ff61 	bl	80027e6 <IIC_SCL>
	return 0;
 8002924:	2300      	movs	r3, #0
}
 8002926:	0018      	movs	r0, r3
 8002928:	46bd      	mov	sp, r7
 800292a:	b004      	add	sp, #16
 800292c:	bd80      	pop	{r7, pc}

0800292e <IIC_Ack>:

void IIC_Ack(SI2C_Handle handle)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b082      	sub	sp, #8
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
	IIC_SCL(handle, IIC_LOW);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2100      	movs	r1, #0
 800293a:	0018      	movs	r0, r3
 800293c:	f7ff ff53 	bl	80027e6 <IIC_SCL>
	SDA_OUT(handle);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	0018      	movs	r0, r3
 8002944:	f7ff ff13 	bl	800276e <SDA_OUT>
	IIC_SDA(handle, IIC_LOW);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2100      	movs	r1, #0
 800294c:	0018      	movs	r0, r3
 800294e:	f7ff ff32 	bl	80027b6 <IIC_SDA>
	IIC_Delay(handle);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	0018      	movs	r0, r3
 8002956:	f7ff febb 	bl	80026d0 <IIC_Delay>
	IIC_SCL(handle, IIC_HIGH);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2101      	movs	r1, #1
 800295e:	0018      	movs	r0, r3
 8002960:	f7ff ff41 	bl	80027e6 <IIC_SCL>
	IIC_Delay(handle);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	0018      	movs	r0, r3
 8002968:	f7ff feb2 	bl	80026d0 <IIC_Delay>
	IIC_SCL(handle, IIC_LOW);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2100      	movs	r1, #0
 8002970:	0018      	movs	r0, r3
 8002972:	f7ff ff38 	bl	80027e6 <IIC_SCL>
}
 8002976:	46c0      	nop			; (mov r8, r8)
 8002978:	46bd      	mov	sp, r7
 800297a:	b002      	add	sp, #8
 800297c:	bd80      	pop	{r7, pc}

0800297e <IIC_NAck>:

void IIC_NAck(SI2C_Handle handle)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b082      	sub	sp, #8
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
	IIC_SCL(handle, IIC_LOW);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2100      	movs	r1, #0
 800298a:	0018      	movs	r0, r3
 800298c:	f7ff ff2b 	bl	80027e6 <IIC_SCL>
	SDA_OUT(handle);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	0018      	movs	r0, r3
 8002994:	f7ff feeb 	bl	800276e <SDA_OUT>
	IIC_SDA(handle, IIC_HIGH);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2101      	movs	r1, #1
 800299c:	0018      	movs	r0, r3
 800299e:	f7ff ff0a 	bl	80027b6 <IIC_SDA>
	IIC_Delay(handle);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	0018      	movs	r0, r3
 80029a6:	f7ff fe93 	bl	80026d0 <IIC_Delay>
	IIC_SCL(handle, IIC_HIGH);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2101      	movs	r1, #1
 80029ae:	0018      	movs	r0, r3
 80029b0:	f7ff ff19 	bl	80027e6 <IIC_SCL>
	IIC_Delay(handle);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	0018      	movs	r0, r3
 80029b8:	f7ff fe8a 	bl	80026d0 <IIC_Delay>
	IIC_SCL(handle, IIC_LOW);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2100      	movs	r1, #0
 80029c0:	0018      	movs	r0, r3
 80029c2:	f7ff ff10 	bl	80027e6 <IIC_SCL>
}
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	46bd      	mov	sp, r7
 80029ca:	b002      	add	sp, #8
 80029cc:	bd80      	pop	{r7, pc}

080029ce <IIC_Send_Byte>:

void IIC_Send_Byte(SI2C_Handle handle, uint8_t tx_data)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b084      	sub	sp, #16
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
 80029d6:	000a      	movs	r2, r1
 80029d8:	1cfb      	adds	r3, r7, #3
 80029da:	701a      	strb	r2, [r3, #0]
	uint8_t t;

	SDA_OUT(handle);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	0018      	movs	r0, r3
 80029e0:	f7ff fec5 	bl	800276e <SDA_OUT>
	IIC_SDA(handle, IIC_LOW);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2100      	movs	r1, #0
 80029e8:	0018      	movs	r0, r3
 80029ea:	f7ff fee4 	bl	80027b6 <IIC_SDA>

	for(t = 0; t < 8; t++)
 80029ee:	230f      	movs	r3, #15
 80029f0:	18fb      	adds	r3, r7, r3
 80029f2:	2200      	movs	r2, #0
 80029f4:	701a      	strb	r2, [r3, #0]
 80029f6:	e025      	b.n	8002a44 <IIC_Send_Byte+0x76>
	{
		IIC_SDA(handle, (tx_data & 0x80) >> 7);
 80029f8:	1cfb      	adds	r3, r7, #3
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	09db      	lsrs	r3, r3, #7
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	0011      	movs	r1, r2
 8002a04:	0018      	movs	r0, r3
 8002a06:	f7ff fed6 	bl	80027b6 <IIC_SDA>
		tx_data = tx_data << 1;
 8002a0a:	1cfa      	adds	r2, r7, #3
 8002a0c:	1cfb      	adds	r3, r7, #3
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	18db      	adds	r3, r3, r3
 8002a12:	7013      	strb	r3, [r2, #0]
		IIC_SCL(handle, IIC_HIGH);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2101      	movs	r1, #1
 8002a18:	0018      	movs	r0, r3
 8002a1a:	f7ff fee4 	bl	80027e6 <IIC_SCL>
		IIC_Delay(handle);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	0018      	movs	r0, r3
 8002a22:	f7ff fe55 	bl	80026d0 <IIC_Delay>
		IIC_SCL(handle, IIC_LOW);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2100      	movs	r1, #0
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f7ff fedb 	bl	80027e6 <IIC_SCL>
		IIC_Delay(handle);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	0018      	movs	r0, r3
 8002a34:	f7ff fe4c 	bl	80026d0 <IIC_Delay>
	for(t = 0; t < 8; t++)
 8002a38:	210f      	movs	r1, #15
 8002a3a:	187b      	adds	r3, r7, r1
 8002a3c:	781a      	ldrb	r2, [r3, #0]
 8002a3e:	187b      	adds	r3, r7, r1
 8002a40:	3201      	adds	r2, #1
 8002a42:	701a      	strb	r2, [r3, #0]
 8002a44:	230f      	movs	r3, #15
 8002a46:	18fb      	adds	r3, r7, r3
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b07      	cmp	r3, #7
 8002a4c:	d9d4      	bls.n	80029f8 <IIC_Send_Byte+0x2a>
	}
}
 8002a4e:	46c0      	nop			; (mov r8, r8)
 8002a50:	46c0      	nop			; (mov r8, r8)
 8002a52:	46bd      	mov	sp, r7
 8002a54:	b004      	add	sp, #16
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <IIC_Check_Device>:

/* Check device */
uint8_t IIC_Check_Device(SI2C_Handle handle, uint8_t Trials)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	000a      	movs	r2, r1
 8002a62:	1cfb      	adds	r3, r7, #3
 8002a64:	701a      	strb	r2, [r3, #0]
	uint8_t status = 1;
 8002a66:	230f      	movs	r3, #15
 8002a68:	18fb      	adds	r3, r7, r3
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	701a      	strb	r2, [r3, #0]
	SI2C_Device_Object            *object;
	object = handle->object;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	60bb      	str	r3, [r7, #8]

	for(uint8_t i = 0; i < Trials; i++)
 8002a74:	230e      	movs	r3, #14
 8002a76:	18fb      	adds	r3, r7, r3
 8002a78:	2200      	movs	r2, #0
 8002a7a:	701a      	strb	r2, [r3, #0]
 8002a7c:	e026      	b.n	8002acc <IIC_Check_Device+0x74>
	{
		IIC_Start(handle);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	0018      	movs	r0, r3
 8002a82:	f7ff fec8 	bl	8002816 <IIC_Start>
		IIC_Send_Byte(handle, (object->slaveAddress << 1) | 0);
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	7a1b      	ldrb	r3, [r3, #8]
 8002a8a:	18db      	adds	r3, r3, r3
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	0011      	movs	r1, r2
 8002a92:	0018      	movs	r0, r3
 8002a94:	f7ff ff9b 	bl	80029ce <IIC_Send_Byte>

		if(IIC_Wait_Ack(handle))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	f7ff ff0a 	bl	80028b4 <IIC_Wait_Ack>
 8002aa0:	1e03      	subs	r3, r0, #0
 8002aa2:	d008      	beq.n	8002ab6 <IIC_Check_Device+0x5e>
		{
			IIC_Stop(handle);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f7ff fee1 	bl	800286e <IIC_Stop>
			status = 1;
 8002aac:	230f      	movs	r3, #15
 8002aae:	18fb      	adds	r3, r7, r3
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	701a      	strb	r2, [r3, #0]
 8002ab4:	e004      	b.n	8002ac0 <IIC_Check_Device+0x68>
		}
		else
		{
			status = 0;
 8002ab6:	230f      	movs	r3, #15
 8002ab8:	18fb      	adds	r3, r7, r3
 8002aba:	2200      	movs	r2, #0
 8002abc:	701a      	strb	r2, [r3, #0]
			break;
 8002abe:	e00c      	b.n	8002ada <IIC_Check_Device+0x82>
	for(uint8_t i = 0; i < Trials; i++)
 8002ac0:	210e      	movs	r1, #14
 8002ac2:	187b      	adds	r3, r7, r1
 8002ac4:	781a      	ldrb	r2, [r3, #0]
 8002ac6:	187b      	adds	r3, r7, r1
 8002ac8:	3201      	adds	r2, #1
 8002aca:	701a      	strb	r2, [r3, #0]
 8002acc:	230e      	movs	r3, #14
 8002ace:	18fa      	adds	r2, r7, r3
 8002ad0:	1cfb      	adds	r3, r7, #3
 8002ad2:	7812      	ldrb	r2, [r2, #0]
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d3d1      	bcc.n	8002a7e <IIC_Check_Device+0x26>
		}
	}

	IIC_Stop(handle);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	0018      	movs	r0, r3
 8002ade:	f7ff fec6 	bl	800286e <IIC_Stop>
	return status;
 8002ae2:	230f      	movs	r3, #15
 8002ae4:	18fb      	adds	r3, r7, r3
 8002ae6:	781b      	ldrb	r3, [r3, #0]
}
 8002ae8:	0018      	movs	r0, r3
 8002aea:	46bd      	mov	sp, r7
 8002aec:	b004      	add	sp, #16
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <IIC_Send_Multi_Byte>:

/* Write Multi data */
uint8_t IIC_Send_Multi_Byte(SI2C_Handle handle, uint8_t *data, uint8_t len)
{
 8002af0:	b590      	push	{r4, r7, lr}
 8002af2:	b087      	sub	sp, #28
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	1dfb      	adds	r3, r7, #7
 8002afc:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	SI2C_Device_Object            *object;
	object = handle->object;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	613b      	str	r3, [r7, #16]

	IIC_Start(handle);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	0018      	movs	r0, r3
 8002b08:	f7ff fe85 	bl	8002816 <IIC_Start>
	IIC_Send_Byte(handle, (object->slaveAddress << 1) | 0);
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	7a1b      	ldrb	r3, [r3, #8]
 8002b10:	18db      	adds	r3, r3, r3
 8002b12:	b2da      	uxtb	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	0011      	movs	r1, r2
 8002b18:	0018      	movs	r0, r3
 8002b1a:	f7ff ff58 	bl	80029ce <IIC_Send_Byte>

	if(IIC_Wait_Ack(handle))
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	0018      	movs	r0, r3
 8002b22:	f7ff fec7 	bl	80028b4 <IIC_Wait_Ack>
 8002b26:	1e03      	subs	r3, r0, #0
 8002b28:	d005      	beq.n	8002b36 <IIC_Send_Multi_Byte+0x46>
	{
		IIC_Stop(handle);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f7ff fe9e 	bl	800286e <IIC_Stop>
		return 1;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e024      	b.n	8002b80 <IIC_Send_Multi_Byte+0x90>
	}

	for(i = 0; i < len; i++)
 8002b36:	2317      	movs	r3, #23
 8002b38:	18fb      	adds	r3, r7, r3
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	701a      	strb	r2, [r3, #0]
 8002b3e:	e013      	b.n	8002b68 <IIC_Send_Multi_Byte+0x78>
	{
		IIC_Send_Byte(handle, data[i]);
 8002b40:	2417      	movs	r4, #23
 8002b42:	193b      	adds	r3, r7, r4
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	18d3      	adds	r3, r2, r3
 8002b4a:	781a      	ldrb	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	0011      	movs	r1, r2
 8002b50:	0018      	movs	r0, r3
 8002b52:	f7ff ff3c 	bl	80029ce <IIC_Send_Byte>
		IIC_Wait_Ack(handle);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	0018      	movs	r0, r3
 8002b5a:	f7ff feab 	bl	80028b4 <IIC_Wait_Ack>
	for(i = 0; i < len; i++)
 8002b5e:	193b      	adds	r3, r7, r4
 8002b60:	781a      	ldrb	r2, [r3, #0]
 8002b62:	193b      	adds	r3, r7, r4
 8002b64:	3201      	adds	r2, #1
 8002b66:	701a      	strb	r2, [r3, #0]
 8002b68:	2317      	movs	r3, #23
 8002b6a:	18fa      	adds	r2, r7, r3
 8002b6c:	1dfb      	adds	r3, r7, #7
 8002b6e:	7812      	ldrb	r2, [r2, #0]
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d3e4      	bcc.n	8002b40 <IIC_Send_Multi_Byte+0x50>
	}

	IIC_Stop(handle);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f7ff fe78 	bl	800286e <IIC_Stop>
	return 0;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	0018      	movs	r0, r3
 8002b82:	46bd      	mov	sp, r7
 8002b84:	b007      	add	sp, #28
 8002b86:	bd90      	pop	{r4, r7, pc}

08002b88 <IIC_Mem_Write>:

/* Write Multi data */
uint8_t IIC_Mem_Write(SI2C_Handle handle, uint8_t MemAddress, uint8_t *data, uint16_t len)
{
 8002b88:	b590      	push	{r4, r7, lr}
 8002b8a:	b087      	sub	sp, #28
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	0008      	movs	r0, r1
 8002b92:	607a      	str	r2, [r7, #4]
 8002b94:	0019      	movs	r1, r3
 8002b96:	230b      	movs	r3, #11
 8002b98:	18fb      	adds	r3, r7, r3
 8002b9a:	1c02      	adds	r2, r0, #0
 8002b9c:	701a      	strb	r2, [r3, #0]
 8002b9e:	2308      	movs	r3, #8
 8002ba0:	18fb      	adds	r3, r7, r3
 8002ba2:	1c0a      	adds	r2, r1, #0
 8002ba4:	801a      	strh	r2, [r3, #0]
	uint16_t i;
	SI2C_Device_Object            *object;
	object = handle->object;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	613b      	str	r3, [r7, #16]

	IIC_Start(handle);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	0018      	movs	r0, r3
 8002bb0:	f7ff fe31 	bl	8002816 <IIC_Start>
	IIC_Send_Byte(handle, (object->slaveAddress << 1) | 0);
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	7a1b      	ldrb	r3, [r3, #8]
 8002bb8:	18db      	adds	r3, r3, r3
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	0011      	movs	r1, r2
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	f7ff ff04 	bl	80029ce <IIC_Send_Byte>

	if(IIC_Wait_Ack(handle))
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f7ff fe73 	bl	80028b4 <IIC_Wait_Ack>
 8002bce:	1e03      	subs	r3, r0, #0
 8002bd0:	d005      	beq.n	8002bde <IIC_Mem_Write+0x56>
	{
		IIC_Stop(handle);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	f7ff fe4a 	bl	800286e <IIC_Stop>
		return 1;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e031      	b.n	8002c42 <IIC_Mem_Write+0xba>
	}

	IIC_Send_Byte(handle, MemAddress);
 8002bde:	230b      	movs	r3, #11
 8002be0:	18fb      	adds	r3, r7, r3
 8002be2:	781a      	ldrb	r2, [r3, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	0011      	movs	r1, r2
 8002be8:	0018      	movs	r0, r3
 8002bea:	f7ff fef0 	bl	80029ce <IIC_Send_Byte>
	IIC_Wait_Ack(handle);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	f7ff fe5f 	bl	80028b4 <IIC_Wait_Ack>

	for(i = 0; i < len; i++)
 8002bf6:	2316      	movs	r3, #22
 8002bf8:	18fb      	adds	r3, r7, r3
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	801a      	strh	r2, [r3, #0]
 8002bfe:	e013      	b.n	8002c28 <IIC_Mem_Write+0xa0>
	{
		IIC_Send_Byte(handle, data[i]);
 8002c00:	2416      	movs	r4, #22
 8002c02:	193b      	adds	r3, r7, r4
 8002c04:	881b      	ldrh	r3, [r3, #0]
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	18d3      	adds	r3, r2, r3
 8002c0a:	781a      	ldrb	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	0011      	movs	r1, r2
 8002c10:	0018      	movs	r0, r3
 8002c12:	f7ff fedc 	bl	80029ce <IIC_Send_Byte>
		IIC_Wait_Ack(handle);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	0018      	movs	r0, r3
 8002c1a:	f7ff fe4b 	bl	80028b4 <IIC_Wait_Ack>
	for(i = 0; i < len; i++)
 8002c1e:	193b      	adds	r3, r7, r4
 8002c20:	881a      	ldrh	r2, [r3, #0]
 8002c22:	193b      	adds	r3, r7, r4
 8002c24:	3201      	adds	r2, #1
 8002c26:	801a      	strh	r2, [r3, #0]
 8002c28:	2316      	movs	r3, #22
 8002c2a:	18fa      	adds	r2, r7, r3
 8002c2c:	2308      	movs	r3, #8
 8002c2e:	18fb      	adds	r3, r7, r3
 8002c30:	8812      	ldrh	r2, [r2, #0]
 8002c32:	881b      	ldrh	r3, [r3, #0]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d3e3      	bcc.n	8002c00 <IIC_Mem_Write+0x78>
	}

	IIC_Stop(handle);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	f7ff fe17 	bl	800286e <IIC_Stop>
	return 0;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	0018      	movs	r0, r3
 8002c44:	46bd      	mov	sp, r7
 8002c46:	b007      	add	sp, #28
 8002c48:	bd90      	pop	{r4, r7, pc}

08002c4a <IIC_Read_Byte>:

uint8_t IIC_Read_Byte(SI2C_Handle handle, uint8_t ack)
{
 8002c4a:	b590      	push	{r4, r7, lr}
 8002c4c:	b085      	sub	sp, #20
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
 8002c52:	000a      	movs	r2, r1
 8002c54:	1cfb      	adds	r3, r7, #3
 8002c56:	701a      	strb	r2, [r3, #0]
	uint8_t i, rx_data =0;
 8002c58:	230e      	movs	r3, #14
 8002c5a:	18fb      	adds	r3, r7, r3
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	701a      	strb	r2, [r3, #0]

	SDA_IN(handle);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	0018      	movs	r0, r3
 8002c64:	f7ff fd4a 	bl	80026fc <SDA_IN>

	for(i = 0; i < 8; i++)
 8002c68:	230f      	movs	r3, #15
 8002c6a:	18fb      	adds	r3, r7, r3
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	701a      	strb	r2, [r3, #0]
 8002c70:	e028      	b.n	8002cc4 <IIC_Read_Byte+0x7a>
	{
		IIC_SCL(handle, IIC_LOW);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2100      	movs	r1, #0
 8002c76:	0018      	movs	r0, r3
 8002c78:	f7ff fdb5 	bl	80027e6 <IIC_SCL>
		IIC_Delay(handle);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	0018      	movs	r0, r3
 8002c80:	f7ff fd26 	bl	80026d0 <IIC_Delay>
		IIC_SCL(handle, IIC_HIGH);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2101      	movs	r1, #1
 8002c88:	0018      	movs	r0, r3
 8002c8a:	f7ff fdac 	bl	80027e6 <IIC_SCL>
		rx_data = rx_data << 1;
 8002c8e:	240e      	movs	r4, #14
 8002c90:	193a      	adds	r2, r7, r4
 8002c92:	193b      	adds	r3, r7, r4
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	18db      	adds	r3, r3, r3
 8002c98:	7013      	strb	r3, [r2, #0]
		if(READ_SDA(handle))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	f7ff fd51 	bl	8002744 <READ_SDA>
 8002ca2:	1e03      	subs	r3, r0, #0
 8002ca4:	d004      	beq.n	8002cb0 <IIC_Read_Byte+0x66>
		{
			rx_data++;
 8002ca6:	193b      	adds	r3, r7, r4
 8002ca8:	781a      	ldrb	r2, [r3, #0]
 8002caa:	193b      	adds	r3, r7, r4
 8002cac:	3201      	adds	r2, #1
 8002cae:	701a      	strb	r2, [r3, #0]
		}
		IIC_Delay(handle);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	f7ff fd0c 	bl	80026d0 <IIC_Delay>
	for(i = 0; i < 8; i++)
 8002cb8:	210f      	movs	r1, #15
 8002cba:	187b      	adds	r3, r7, r1
 8002cbc:	781a      	ldrb	r2, [r3, #0]
 8002cbe:	187b      	adds	r3, r7, r1
 8002cc0:	3201      	adds	r2, #1
 8002cc2:	701a      	strb	r2, [r3, #0]
 8002cc4:	230f      	movs	r3, #15
 8002cc6:	18fb      	adds	r3, r7, r3
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	2b07      	cmp	r3, #7
 8002ccc:	d9d1      	bls.n	8002c72 <IIC_Read_Byte+0x28>
	}

	if(ack)
 8002cce:	1cfb      	adds	r3, r7, #3
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d004      	beq.n	8002ce0 <IIC_Read_Byte+0x96>
	{
		IIC_Ack(handle);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	0018      	movs	r0, r3
 8002cda:	f7ff fe28 	bl	800292e <IIC_Ack>
 8002cde:	e003      	b.n	8002ce8 <IIC_Read_Byte+0x9e>
	} else
	{
		IIC_NAck(handle);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	f7ff fe4b 	bl	800297e <IIC_NAck>
	}

	return rx_data;
 8002ce8:	230e      	movs	r3, #14
 8002cea:	18fb      	adds	r3, r7, r3
 8002cec:	781b      	ldrb	r3, [r3, #0]
}
 8002cee:	0018      	movs	r0, r3
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	b005      	add	sp, #20
 8002cf4:	bd90      	pop	{r4, r7, pc}

08002cf6 <IIC_Read_Multi_Byte>:

/* Read Multi data */
uint8_t IIC_Read_Multi_Byte(SI2C_Handle handle, uint8_t *data, uint8_t len)
{
 8002cf6:	b5b0      	push	{r4, r5, r7, lr}
 8002cf8:	b088      	sub	sp, #32
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	60f8      	str	r0, [r7, #12]
 8002cfe:	60b9      	str	r1, [r7, #8]
 8002d00:	1dfb      	adds	r3, r7, #7
 8002d02:	701a      	strb	r2, [r3, #0]
	uint8_t i, ack;
	SI2C_Device_Object            *object;
	object = handle->object;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	61bb      	str	r3, [r7, #24]

	IIC_Start(handle);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	f7ff fd82 	bl	8002816 <IIC_Start>
	IIC_Send_Byte(handle, (object->slaveAddress << 1) | 1);
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	7a1b      	ldrb	r3, [r3, #8]
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	b25b      	sxtb	r3, r3
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	b25b      	sxtb	r3, r3
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	0011      	movs	r1, r2
 8002d26:	0018      	movs	r0, r3
 8002d28:	f7ff fe51 	bl	80029ce <IIC_Send_Byte>

	if(IIC_Wait_Ack(handle))
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	0018      	movs	r0, r3
 8002d30:	f7ff fdc0 	bl	80028b4 <IIC_Wait_Ack>
 8002d34:	1e03      	subs	r3, r0, #0
 8002d36:	d005      	beq.n	8002d44 <IIC_Read_Multi_Byte+0x4e>
	{
		IIC_Stop(handle);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	f7ff fd97 	bl	800286e <IIC_Stop>
		return 1;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e03a      	b.n	8002dba <IIC_Read_Multi_Byte+0xc4>
	}

	for(i = 0; i < (len - 1); i++)
 8002d44:	231f      	movs	r3, #31
 8002d46:	18fb      	adds	r3, r7, r3
 8002d48:	2200      	movs	r2, #0
 8002d4a:	701a      	strb	r2, [r3, #0]
 8002d4c:	e016      	b.n	8002d7c <IIC_Read_Multi_Byte+0x86>
	{
		ack = 1;
 8002d4e:	2117      	movs	r1, #23
 8002d50:	187b      	adds	r3, r7, r1
 8002d52:	2201      	movs	r2, #1
 8002d54:	701a      	strb	r2, [r3, #0]
		data[i] = IIC_Read_Byte(handle, ack);
 8002d56:	251f      	movs	r5, #31
 8002d58:	197b      	adds	r3, r7, r5
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	18d4      	adds	r4, r2, r3
 8002d60:	187b      	adds	r3, r7, r1
 8002d62:	781a      	ldrb	r2, [r3, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	0011      	movs	r1, r2
 8002d68:	0018      	movs	r0, r3
 8002d6a:	f7ff ff6e 	bl	8002c4a <IIC_Read_Byte>
 8002d6e:	0003      	movs	r3, r0
 8002d70:	7023      	strb	r3, [r4, #0]
	for(i = 0; i < (len - 1); i++)
 8002d72:	197b      	adds	r3, r7, r5
 8002d74:	781a      	ldrb	r2, [r3, #0]
 8002d76:	197b      	adds	r3, r7, r5
 8002d78:	3201      	adds	r2, #1
 8002d7a:	701a      	strb	r2, [r3, #0]
 8002d7c:	231f      	movs	r3, #31
 8002d7e:	18fb      	adds	r3, r7, r3
 8002d80:	781a      	ldrb	r2, [r3, #0]
 8002d82:	1dfb      	adds	r3, r7, #7
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	dbe0      	blt.n	8002d4e <IIC_Read_Multi_Byte+0x58>
	}

	ack = 0;
 8002d8c:	2117      	movs	r1, #23
 8002d8e:	187b      	adds	r3, r7, r1
 8002d90:	2200      	movs	r2, #0
 8002d92:	701a      	strb	r2, [r3, #0]
	data[len - 1] = IIC_Read_Byte(handle, ack);
 8002d94:	1dfb      	adds	r3, r7, #7
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	18d4      	adds	r4, r2, r3
 8002d9e:	187b      	adds	r3, r7, r1
 8002da0:	781a      	ldrb	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	0011      	movs	r1, r2
 8002da6:	0018      	movs	r0, r3
 8002da8:	f7ff ff4f 	bl	8002c4a <IIC_Read_Byte>
 8002dac:	0003      	movs	r3, r0
 8002dae:	7023      	strb	r3, [r4, #0]

	IIC_Stop(handle);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	0018      	movs	r0, r3
 8002db4:	f7ff fd5b 	bl	800286e <IIC_Stop>

	return 0;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	0018      	movs	r0, r3
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	b008      	add	sp, #32
 8002dc0:	bdb0      	pop	{r4, r5, r7, pc}

08002dc2 <SI2C_GPIO_Init>:
    SI2C_Device_open,
    SI2C_Device_transfer
};

static void SI2C_GPIO_Init(SI2C_Handle handle)
{
 8002dc2:	b590      	push	{r4, r7, lr}
 8002dc4:	b089      	sub	sp, #36	; 0x24
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
	SI2C_Device_Object            *object;
	object = handle->object;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	61fb      	str	r3, [r7, #28]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd0:	2408      	movs	r4, #8
 8002dd2:	193b      	adds	r3, r7, r4
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	2314      	movs	r3, #20
 8002dd8:	001a      	movs	r2, r3
 8002dda:	2100      	movs	r1, #0
 8002ddc:	f006 f9de 	bl	800919c <memset>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(object->si2cPins.portSDA, object->si2cPins.pinSDA, GPIO_PIN_SET);
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	6a18      	ldr	r0, [r3, #32]
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	2201      	movs	r2, #1
 8002dec:	0019      	movs	r1, r3
 8002dee:	f000 fd1e 	bl	800382e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(object->si2cPins.portSCL, object->si2cPins.pinSCL, GPIO_PIN_SET);
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	0019      	movs	r1, r3
 8002e00:	f000 fd15 	bl	800382e <HAL_GPIO_WritePin>

	/*Configure GPIO pin : SDA_Pin */
	GPIO_InitStruct.Pin = object->si2cPins.pinSDA;
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e08:	193b      	adds	r3, r7, r4
 8002e0a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e0c:	193b      	adds	r3, r7, r4
 8002e0e:	2201      	movs	r2, #1
 8002e10:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e12:	193b      	adds	r3, r7, r4
 8002e14:	2200      	movs	r2, #0
 8002e16:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(object->si2cPins.portSDA, &GPIO_InitStruct);
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	193a      	adds	r2, r7, r4
 8002e1e:	0011      	movs	r1, r2
 8002e20:	0018      	movs	r0, r3
 8002e22:	f000 fb69 	bl	80034f8 <HAL_GPIO_Init>

	/*Configure GPIO pin : SCL_Pin */
	GPIO_InitStruct.Pin = object->si2cPins.pinSCL;
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e2a:	0021      	movs	r1, r4
 8002e2c:	187b      	adds	r3, r7, r1
 8002e2e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e30:	187b      	adds	r3, r7, r1
 8002e32:	2201      	movs	r2, #1
 8002e34:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e36:	187b      	adds	r3, r7, r1
 8002e38:	2200      	movs	r2, #0
 8002e3a:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(object->si2cPins.portSCL, &GPIO_InitStruct);
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	187a      	adds	r2, r7, r1
 8002e42:	0011      	movs	r1, r2
 8002e44:	0018      	movs	r0, r3
 8002e46:	f000 fb57 	bl	80034f8 <HAL_GPIO_Init>

}
 8002e4a:	46c0      	nop			; (mov r8, r8)
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	b009      	add	sp, #36	; 0x24
 8002e50:	bd90      	pop	{r4, r7, pc}

08002e52 <SI2C_Device_cancel>:

void SI2C_Device_cancel(SI2C_Handle handle)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b084      	sub	sp, #16
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
    SI2C_Device_Object *object = handle->object;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	60fb      	str	r3, [r7, #12]

    /* clean up object */
    object->mode = SI2C_Device_IDLE_MODE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	701a      	strb	r2, [r3, #0]
    object->currentTransaction = NULL;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	60da      	str	r2, [r3, #12]
}
 8002e6c:	46c0      	nop			; (mov r8, r8)
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	b004      	add	sp, #16
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <SI2C_Device_close>:

void SI2C_Device_close(SI2C_Handle handle)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
    SI2C_Device_Object            *object;

    /* Get the pointer to the object and hwAttrs */
    object = handle->object;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	60fb      	str	r3, [r7, #12]

    /* Mark the module as available */
    object->isOpen = false;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2238      	movs	r2, #56	; 0x38
 8002e86:	2100      	movs	r1, #0
 8002e88:	5499      	strb	r1, [r3, r2]

    return;
 8002e8a:	46c0      	nop			; (mov r8, r8)
}
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	b004      	add	sp, #16
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <SI2C_Device_control>:

int_fast16_t SI2C_Device_control(SI2C_Handle handle, uint_fast16_t cmd, void *arg)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b084      	sub	sp, #16
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	60f8      	str	r0, [r7, #12]
 8002e9a:	60b9      	str	r1, [r7, #8]
 8002e9c:	607a      	str	r2, [r7, #4]
    /* No implementation */
    return (SI2C_STATUS_UNDEFINEDCMD);
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	425b      	negs	r3, r3
}
 8002ea2:	0018      	movs	r0, r3
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	b004      	add	sp, #16
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <SI2C_Device_init>:

void SI2C_Device_init(SI2C_Handle handle)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b084      	sub	sp, #16
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
    SI2C_Device_Object           *object;

    /* Get the pointer to the object */
    object = handle->object;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	60fb      	str	r3, [r7, #12]

    /* Initially the drivers is not open */
    object->isOpen = false;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2238      	movs	r2, #56	; 0x38
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	5499      	strb	r1, [r3, r2]

}
 8002ec0:	46c0      	nop			; (mov r8, r8)
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	b004      	add	sp, #16
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <SI2C_Device_open>:

SI2C_Handle SI2C_Device_open(SI2C_Handle handle, SI2C_Params *params)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
    SI2C_Device_Object               *object;

    /* Get the pointer to the object and hwAttrs */
    object = handle->object;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	60fb      	str	r3, [r7, #12]

    if(object->isOpen == true){
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2238      	movs	r2, #56	; 0x38
 8002edc:	5c9b      	ldrb	r3, [r3, r2]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d101      	bne.n	8002ee6 <SI2C_Device_open+0x1e>
        return (NULL);
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	e025      	b.n	8002f32 <SI2C_Device_open+0x6a>
    }

    /* Mark the handle as being used */
    object->isOpen = true;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2238      	movs	r2, #56	; 0x38
 8002eea:	2101      	movs	r1, #1
 8002eec:	5499      	strb	r1, [r3, r2]

    /* Configure the IOs.*/
    if (SI2C_Device_initIO(handle, params->custom)) {
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685a      	ldr	r2, [r3, #4]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	0011      	movs	r1, r2
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	f000 f86c 	bl	8002fd4 <SI2C_Device_initIO>
 8002efc:	1e03      	subs	r3, r0, #0
 8002efe:	d005      	beq.n	8002f0c <SI2C_Device_open+0x44>
      object->isOpen = false;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2238      	movs	r2, #56	; 0x38
 8002f04:	2100      	movs	r1, #0
 8002f06:	5499      	strb	r1, [r3, r2]
      return (NULL);
 8002f08:	2300      	movs	r3, #0
 8002f0a:	e012      	b.n	8002f32 <SI2C_Device_open+0x6a>
    }

    /* Save parameters */
    object->bitRate = params->bitRate;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	001a      	movs	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	605a      	str	r2, [r3, #4]
    object->slaveAddress = params->slaveAddress;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	785a      	ldrb	r2, [r3, #1]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	721a      	strb	r2, [r3, #8]

    /* Specify the idle state for this I2C peripheral */
    object->mode = SI2C_Device_IDLE_MODE;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	701a      	strb	r2, [r3, #0]

    /* Clear the head pointer */
    object->headPtr = NULL;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	631a      	str	r2, [r3, #48]	; 0x30
    object->tailPtr = NULL;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	635a      	str	r2, [r3, #52]	; 0x34

    return (handle);
 8002f30:	687b      	ldr	r3, [r7, #4]
}
 8002f32:	0018      	movs	r0, r3
 8002f34:	46bd      	mov	sp, r7
 8002f36:	b004      	add	sp, #16
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <SI2C_Device_transfer>:

bool_t SI2C_Device_transfer(SI2C_Handle handle,
                        SI2C_Transaction *transaction)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b084      	sub	sp, #16
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
 8002f42:	6039      	str	r1, [r7, #0]
    bool_t                        ret = false;
 8002f44:	210f      	movs	r1, #15
 8002f46:	187b      	adds	r3, r7, r1
 8002f48:	2200      	movs	r2, #0
 8002f4a:	701a      	strb	r2, [r3, #0]
    SI2C_Device_Object           *object;

    /* Get the pointer to the object and hwAttrs */
    object = handle->object;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	60bb      	str	r3, [r7, #8]

    /* Check if anything needs to be written or read */
    if ((!transaction->writeCount) && (!transaction->readCount)) {
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d106      	bne.n	8002f68 <SI2C_Device_transfer+0x2e>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d102      	bne.n	8002f68 <SI2C_Device_transfer+0x2e>
        /* Nothing to write or read */
        return (ret);
 8002f62:	187b      	adds	r3, r7, r1
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	e031      	b.n	8002fcc <SI2C_Device_transfer+0x92>
    }

    /* Store the new internal counters and pointers */
    object->currentTransaction = transaction;
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	60da      	str	r2, [r3, #12]

    object->writeBufIdx = transaction->writeBuf;
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	611a      	str	r2, [r3, #16]
    object->writeCountIdx = transaction->writeCount;
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685a      	ldr	r2, [r3, #4]
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	615a      	str	r2, [r3, #20]

    object->readBufIdx = transaction->readBuf;
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	619a      	str	r2, [r3, #24]
    object->readCountIdx = transaction->readCount;
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	61da      	str	r2, [r3, #28]

    /* Start transfer in Transmit mode */
    if (object->writeCountIdx) {
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00c      	beq.n	8002fb0 <SI2C_Device_transfer+0x76>
    	if(!IIC_Send_Multi_Byte(handle, object->writeBufIdx, object->writeCountIdx))
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	6919      	ldr	r1, [r3, #16]
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	f7ff fda4 	bl	8002af0 <IIC_Send_Multi_Byte>
 8002fa8:	1e03      	subs	r3, r0, #0
 8002faa:	d10e      	bne.n	8002fca <SI2C_Device_transfer+0x90>
    		return (true);
 8002fac:	2301      	movs	r3, #1
 8002fae:	e00d      	b.n	8002fcc <SI2C_Device_transfer+0x92>
    }
    /* Start transfer in Receive mode */
    else {
    	if(!IIC_Read_Multi_Byte(handle, object->readBufIdx, object->readCountIdx))
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	6999      	ldr	r1, [r3, #24]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	69db      	ldr	r3, [r3, #28]
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	f7ff fe9a 	bl	8002cf6 <IIC_Read_Multi_Byte>
 8002fc2:	1e03      	subs	r3, r0, #0
 8002fc4:	d101      	bne.n	8002fca <SI2C_Device_transfer+0x90>
    		return (true);
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e000      	b.n	8002fcc <SI2C_Device_transfer+0x92>
    }
    return (SI2C_STATUS_SUCCESS);
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	0018      	movs	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	b004      	add	sp, #16
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <SI2C_Device_initIO>:


static int SI2C_Device_initIO(SI2C_Handle handle, void *pinCfg) {
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
    SI2C_Device_Object            *object;
    SI2C_Device_HWAttrsV1 const  *hwAttrs;

    /* Get the pointer to the object and hwAttrs */
    object = handle->object;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	60fb      	str	r3, [r7, #12]
    hwAttrs = handle->hwAttrs;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	60bb      	str	r3, [r7, #8]

    /* If the pinCfg pointer is NULL, use hwAttrs pins */
    if (pinCfg == NULL) {
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d110      	bne.n	8003012 <SI2C_Device_initIO+0x3e>
		object->si2cPins.portSDA = hwAttrs->sdaPort;
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	621a      	str	r2, [r3, #32]
    	object->si2cPins.portSCL = hwAttrs->sclPort;
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	625a      	str	r2, [r3, #36]	; 0x24
    	object->si2cPins.pinSDA = hwAttrs->sdaPin;
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	629a      	str	r2, [r3, #40]	; 0x28
    	object->si2cPins.pinSCL = hwAttrs->sclPin;
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	691a      	ldr	r2, [r3, #16]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003010:	e00f      	b.n	8003032 <SI2C_Device_initIO+0x5e>
    } else {
    	object->si2cPins.portSDA = ((SI2C_Device_I2CPinCfg *)pinCfg)->portSDA;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	621a      	str	r2, [r3, #32]
    	object->si2cPins.portSCL = ((SI2C_Device_I2CPinCfg *)pinCfg)->portSCL;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	625a      	str	r2, [r3, #36]	; 0x24
    	object->si2cPins.pinSDA = ((SI2C_Device_I2CPinCfg *)pinCfg)->pinSDA;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	689a      	ldr	r2, [r3, #8]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	629a      	str	r2, [r3, #40]	; 0x28
    	object->si2cPins.pinSCL = ((SI2C_Device_I2CPinCfg *)pinCfg)->pinSCL;
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	68da      	ldr	r2, [r3, #12]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Allocate pins*/
    SI2C_GPIO_Init(handle);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	0018      	movs	r0, r3
 8003036:	f7ff fec4 	bl	8002dc2 <SI2C_GPIO_Init>

    return SI2C_STATUS_SUCCESS;
 800303a:	2300      	movs	r3, #0
}
 800303c:	0018      	movs	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	b004      	add	sp, #16
 8003042:	bd80      	pop	{r7, pc}

08003044 <SI2C_init>:
{
    handle->fxnTablePtr->closeFxn(handle);
}

void SI2C_init(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
    uint_least8_t i;

    if (!isInitialized) {
 800304a:	4b16      	ldr	r3, [pc, #88]	; (80030a4 <SI2C_init+0x60>)
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d124      	bne.n	800309c <SI2C_init+0x58>
        isInitialized = (uint8_t) true;
 8003052:	4b14      	ldr	r3, [pc, #80]	; (80030a4 <SI2C_init+0x60>)
 8003054:	2201      	movs	r2, #1
 8003056:	701a      	strb	r2, [r3, #0]

        /* Call each driver's init function */
        for (i = 0; i < SI2C_count; i++) {
 8003058:	1dfb      	adds	r3, r7, #7
 800305a:	2200      	movs	r2, #0
 800305c:	701a      	strb	r2, [r3, #0]
 800305e:	e017      	b.n	8003090 <SI2C_init+0x4c>
            SI2C_config[i].fxnTablePtr->initFxn((SI2C_Handle)&(SI2C_config[i]));
 8003060:	1dfb      	adds	r3, r7, #7
 8003062:	781a      	ldrb	r2, [r3, #0]
 8003064:	4910      	ldr	r1, [pc, #64]	; (80030a8 <SI2C_init+0x64>)
 8003066:	0013      	movs	r3, r2
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	189b      	adds	r3, r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	585b      	ldr	r3, [r3, r1]
 8003070:	68d9      	ldr	r1, [r3, #12]
 8003072:	1dfb      	adds	r3, r7, #7
 8003074:	781a      	ldrb	r2, [r3, #0]
 8003076:	0013      	movs	r3, r2
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	189b      	adds	r3, r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4a0a      	ldr	r2, [pc, #40]	; (80030a8 <SI2C_init+0x64>)
 8003080:	189b      	adds	r3, r3, r2
 8003082:	0018      	movs	r0, r3
 8003084:	4788      	blx	r1
        for (i = 0; i < SI2C_count; i++) {
 8003086:	1dfb      	adds	r3, r7, #7
 8003088:	781a      	ldrb	r2, [r3, #0]
 800308a:	1dfb      	adds	r3, r7, #7
 800308c:	3201      	adds	r2, #1
 800308e:	701a      	strb	r2, [r3, #0]
 8003090:	4b06      	ldr	r3, [pc, #24]	; (80030ac <SI2C_init+0x68>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	1dfa      	adds	r2, r7, #7
 8003096:	7812      	ldrb	r2, [r2, #0]
 8003098:	429a      	cmp	r2, r3
 800309a:	d3e1      	bcc.n	8003060 <SI2C_init+0x1c>
        }
    }
}
 800309c:	46c0      	nop			; (mov r8, r8)
 800309e:	46bd      	mov	sp, r7
 80030a0:	b002      	add	sp, #8
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	200001d0 	.word	0x200001d0
 80030a8:	08009f38 	.word	0x08009f38
 80030ac:	08009f50 	.word	0x08009f50

080030b0 <SI2C_open>:

SI2C_Handle SI2C_open(uint_least8_t index, SI2C_Params *params)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	0002      	movs	r2, r0
 80030b8:	6039      	str	r1, [r7, #0]
 80030ba:	1dfb      	adds	r3, r7, #7
 80030bc:	701a      	strb	r2, [r3, #0]
    SI2C_Handle handle = NULL;
 80030be:	2300      	movs	r3, #0
 80030c0:	60fb      	str	r3, [r7, #12]

    if (isInitialized && (index < SI2C_count)) {
 80030c2:	4b13      	ldr	r3, [pc, #76]	; (8003110 <SI2C_open+0x60>)
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d01c      	beq.n	8003104 <SI2C_open+0x54>
 80030ca:	4b12      	ldr	r3, [pc, #72]	; (8003114 <SI2C_open+0x64>)
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	1dfa      	adds	r2, r7, #7
 80030d0:	7812      	ldrb	r2, [r2, #0]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d216      	bcs.n	8003104 <SI2C_open+0x54>
        /* If params are NULL use defaults. */
        if (params == NULL) {
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <SI2C_open+0x30>
            params = (SI2C_Params *) &SI2C_defaultParams;
 80030dc:	4b0e      	ldr	r3, [pc, #56]	; (8003118 <SI2C_open+0x68>)
 80030de:	603b      	str	r3, [r7, #0]
        }

        /* Get handle for this driver instance */
        handle = (SI2C_Handle)&(SI2C_config[index]);
 80030e0:	1dfb      	adds	r3, r7, #7
 80030e2:	781a      	ldrb	r2, [r3, #0]
 80030e4:	0013      	movs	r3, r2
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	189b      	adds	r3, r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4a0b      	ldr	r2, [pc, #44]	; (800311c <SI2C_open+0x6c>)
 80030ee:	189b      	adds	r3, r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]
        handle = handle->fxnTablePtr->openFxn(handle, params);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	6839      	ldr	r1, [r7, #0]
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	0010      	movs	r0, r2
 80030fe:	4798      	blx	r3
 8003100:	0003      	movs	r3, r0
 8003102:	60fb      	str	r3, [r7, #12]
    }

    return (handle);
 8003104:	68fb      	ldr	r3, [r7, #12]
}
 8003106:	0018      	movs	r0, r3
 8003108:	46bd      	mov	sp, r7
 800310a:	b004      	add	sp, #16
 800310c:	bd80      	pop	{r7, pc}
 800310e:	46c0      	nop			; (mov r8, r8)
 8003110:	200001d0 	.word	0x200001d0
 8003114:	08009f50 	.word	0x08009f50
 8003118:	08009f08 	.word	0x08009f08
 800311c:	08009f38 	.word	0x08009f38

08003120 <SI2C_Params_init>:

void SI2C_Params_init(SI2C_Params *params)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
    *params = SI2C_defaultParams;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2202      	movs	r2, #2
 800312c:	701a      	strb	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	705a      	strb	r2, [r3, #1]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	605a      	str	r2, [r3, #4]
}
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	46bd      	mov	sp, r7
 800313e:	b002      	add	sp, #8
 8003140:	bd80      	pop	{r7, pc}
	...

08003144 <delay_us>:
 * @param   nus		需要延时多少微秒
 *
 * @return  void
 */
void delay_us(uint32_t nus)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b088      	sub	sp, #32
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
    uint32_t ticks;
    uint32_t told, tnow, tcnt = 0;
 800314c:	2300      	movs	r3, #0
 800314e:	61bb      	str	r3, [r7, #24]
    uint32_t reload = SysTick->LOAD;				//LOAD的值
 8003150:	4b1b      	ldr	r3, [pc, #108]	; (80031c0 <delay_us+0x7c>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	617b      	str	r3, [r7, #20]
    ticks = nus * (SysTick->LOAD + 1UL) / 1000;		//需要的节拍数
 8003156:	4b1a      	ldr	r3, [pc, #104]	; (80031c0 <delay_us+0x7c>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	3301      	adds	r3, #1
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	4353      	muls	r3, r2
 8003160:	22fa      	movs	r2, #250	; 0xfa
 8003162:	0091      	lsls	r1, r2, #2
 8003164:	0018      	movs	r0, r3
 8003166:	f7fc ffcf 	bl	8000108 <__udivsi3>
 800316a:	0003      	movs	r3, r0
 800316c:	613b      	str	r3, [r7, #16]
    told = SysTick->VAL;					//刚进入时的计数器值
 800316e:	4b14      	ldr	r3, [pc, #80]	; (80031c0 <delay_us+0x7c>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	61fb      	str	r3, [r7, #28]

    while(1)
    {
        tnow = SysTick->VAL;
 8003174:	4b12      	ldr	r3, [pc, #72]	; (80031c0 <delay_us+0x7c>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	60fb      	str	r3, [r7, #12]

        if(tnow != told)
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	429a      	cmp	r2, r3
 8003180:	d0f8      	beq.n	8003174 <delay_us+0x30>
        {
            if(tnow < told)
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	429a      	cmp	r2, r3
 8003188:	d206      	bcs.n	8003198 <delay_us+0x54>
            	tcnt += told - tnow;	//这里注意一下SYSTICK是一个递减的计数器就可以了.
 800318a:	69fa      	ldr	r2, [r7, #28]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	18d3      	adds	r3, r2, r3
 8003194:	61bb      	str	r3, [r7, #24]
 8003196:	e007      	b.n	80031a8 <delay_us+0x64>
            else
            	tcnt += reload - tnow + told;
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	1ad2      	subs	r2, r2, r3
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	18d3      	adds	r3, r2, r3
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	18d3      	adds	r3, r2, r3
 80031a6:	61bb      	str	r3, [r7, #24]
			
            told = tnow;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	61fb      	str	r3, [r7, #28]
            if(tcnt >= ticks)
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d200      	bcs.n	80031b6 <delay_us+0x72>
        tnow = SysTick->VAL;
 80031b4:	e7de      	b.n	8003174 <delay_us+0x30>
            	break;			//时间超过/等于要延迟的时间,则退出.
 80031b6:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 80031b8:	46c0      	nop			; (mov r8, r8)
 80031ba:	46bd      	mov	sp, r7
 80031bc:	b008      	add	sp, #32
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	e000e010 	.word	0xe000e010

080031c4 <__io_putchar>:
* @brief  Retargets the C library printf function to the USART.
* @param  None
* @retval None
*/
PUTCHAR_PROTOTYPE
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80031cc:	4b05      	ldr	r3, [pc, #20]	; (80031e4 <__io_putchar+0x20>)
 80031ce:	1d39      	adds	r1, r7, #4
 80031d0:	4805      	ldr	r0, [pc, #20]	; (80031e8 <__io_putchar+0x24>)
 80031d2:	2201      	movs	r2, #1
 80031d4:	f002 f9a0 	bl	8005518 <HAL_UART_Transmit>

  return ch;
 80031d8:	687b      	ldr	r3, [r7, #4]
}
 80031da:	0018      	movs	r0, r3
 80031dc:	46bd      	mov	sp, r7
 80031de:	b002      	add	sp, #8
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	46c0      	nop			; (mov r8, r8)
 80031e4:	0000ffff 	.word	0x0000ffff
 80031e8:	200000d8 	.word	0x200000d8

080031ec <int_to_ascii>:
/*
 * size <= 12
 */

int int_to_ascii( int i, char *out, unsigned char *size, unsigned char need_size, char ascii)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b08a      	sub	sp, #40	; 0x28
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
 80031f8:	001a      	movs	r2, r3
 80031fa:	1cfb      	adds	r3, r7, #3
 80031fc:	701a      	strb	r2, [r3, #0]
	int t;
	unsigned char m, count = 0;
 80031fe:	2326      	movs	r3, #38	; 0x26
 8003200:	18fb      	adds	r3, r7, r3
 8003202:	2200      	movs	r2, #0
 8003204:	701a      	strb	r2, [r3, #0]
	unsigned int u = i;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	623b      	str	r3, [r7, #32]
	char s[12];

	while (u) {
 800320a:	e01c      	b.n	8003246 <int_to_ascii+0x5a>
		t = u % 10;
 800320c:	6a3b      	ldr	r3, [r7, #32]
 800320e:	210a      	movs	r1, #10
 8003210:	0018      	movs	r0, r3
 8003212:	f7fc ffff 	bl	8000214 <__aeabi_uidivmod>
 8003216:	000b      	movs	r3, r1
 8003218:	61fb      	str	r3, [r7, #28]
		s[count] = t + '0';
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	b2da      	uxtb	r2, r3
 800321e:	2026      	movs	r0, #38	; 0x26
 8003220:	183b      	adds	r3, r7, r0
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	3230      	adds	r2, #48	; 0x30
 8003226:	b2d1      	uxtb	r1, r2
 8003228:	2210      	movs	r2, #16
 800322a:	18ba      	adds	r2, r7, r2
 800322c:	54d1      	strb	r1, [r2, r3]
		count++;
 800322e:	183b      	adds	r3, r7, r0
 8003230:	781a      	ldrb	r2, [r3, #0]
 8003232:	183b      	adds	r3, r7, r0
 8003234:	3201      	adds	r2, #1
 8003236:	701a      	strb	r2, [r3, #0]
		u /= 10;
 8003238:	6a3b      	ldr	r3, [r7, #32]
 800323a:	210a      	movs	r1, #10
 800323c:	0018      	movs	r0, r3
 800323e:	f7fc ff63 	bl	8000108 <__udivsi3>
 8003242:	0003      	movs	r3, r0
 8003244:	623b      	str	r3, [r7, #32]
	while (u) {
 8003246:	6a3b      	ldr	r3, [r7, #32]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1df      	bne.n	800320c <int_to_ascii+0x20>
	}
	while ( (need_size != 0) && (count < need_size)) {
 800324c:	e00d      	b.n	800326a <int_to_ascii+0x7e>
		s[count] = ascii;
 800324e:	2026      	movs	r0, #38	; 0x26
 8003250:	183b      	adds	r3, r7, r0
 8003252:	781a      	ldrb	r2, [r3, #0]
 8003254:	2310      	movs	r3, #16
 8003256:	18f9      	adds	r1, r7, r3
 8003258:	2330      	movs	r3, #48	; 0x30
 800325a:	18fb      	adds	r3, r7, r3
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	548b      	strb	r3, [r1, r2]
		count++;
 8003260:	183b      	adds	r3, r7, r0
 8003262:	781a      	ldrb	r2, [r3, #0]
 8003264:	183b      	adds	r3, r7, r0
 8003266:	3201      	adds	r2, #1
 8003268:	701a      	strb	r2, [r3, #0]
	while ( (need_size != 0) && (count < need_size)) {
 800326a:	1cfb      	adds	r3, r7, #3
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d006      	beq.n	8003280 <int_to_ascii+0x94>
 8003272:	2326      	movs	r3, #38	; 0x26
 8003274:	18fa      	adds	r2, r7, r3
 8003276:	1cfb      	adds	r3, r7, #3
 8003278:	7812      	ldrb	r2, [r2, #0]
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	429a      	cmp	r2, r3
 800327e:	d3e6      	bcc.n	800324e <int_to_ascii+0x62>
	}

	*size = count;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2226      	movs	r2, #38	; 0x26
 8003284:	18ba      	adds	r2, r7, r2
 8003286:	7812      	ldrb	r2, [r2, #0]
 8003288:	701a      	strb	r2, [r3, #0]

	for ( m = 0; m < count; m++) {
 800328a:	2327      	movs	r3, #39	; 0x27
 800328c:	18fb      	adds	r3, r7, r3
 800328e:	2200      	movs	r2, #0
 8003290:	701a      	strb	r2, [r3, #0]
 8003292:	e015      	b.n	80032c0 <int_to_ascii+0xd4>
		out[count - 1 - m] = s[m];
 8003294:	2027      	movs	r0, #39	; 0x27
 8003296:	183b      	adds	r3, r7, r0
 8003298:	781a      	ldrb	r2, [r3, #0]
 800329a:	2326      	movs	r3, #38	; 0x26
 800329c:	18fb      	adds	r3, r7, r3
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	1e59      	subs	r1, r3, #1
 80032a2:	183b      	adds	r3, r7, r0
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	1acb      	subs	r3, r1, r3
 80032a8:	0019      	movs	r1, r3
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	185b      	adds	r3, r3, r1
 80032ae:	2110      	movs	r1, #16
 80032b0:	1879      	adds	r1, r7, r1
 80032b2:	5c8a      	ldrb	r2, [r1, r2]
 80032b4:	701a      	strb	r2, [r3, #0]
	for ( m = 0; m < count; m++) {
 80032b6:	183b      	adds	r3, r7, r0
 80032b8:	781a      	ldrb	r2, [r3, #0]
 80032ba:	183b      	adds	r3, r7, r0
 80032bc:	3201      	adds	r2, #1
 80032be:	701a      	strb	r2, [r3, #0]
 80032c0:	2327      	movs	r3, #39	; 0x27
 80032c2:	18fa      	adds	r2, r7, r3
 80032c4:	2326      	movs	r3, #38	; 0x26
 80032c6:	18fb      	adds	r3, r7, r3
 80032c8:	7812      	ldrb	r2, [r2, #0]
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d3e1      	bcc.n	8003294 <int_to_ascii+0xa8>
	}
	return 0;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	0018      	movs	r0, r3
 80032d4:	46bd      	mov	sp, r7
 80032d6:	b00a      	add	sp, #40	; 0x28
 80032d8:	bd80      	pop	{r7, pc}
	...

080032dc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80032e2:	1dfb      	adds	r3, r7, #7
 80032e4:	2200      	movs	r2, #0
 80032e6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80032e8:	4b0b      	ldr	r3, [pc, #44]	; (8003318 <HAL_Init+0x3c>)
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	4b0a      	ldr	r3, [pc, #40]	; (8003318 <HAL_Init+0x3c>)
 80032ee:	2140      	movs	r1, #64	; 0x40
 80032f0:	430a      	orrs	r2, r1
 80032f2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032f4:	2003      	movs	r0, #3
 80032f6:	f7ff f867 	bl	80023c8 <HAL_InitTick>
 80032fa:	1e03      	subs	r3, r0, #0
 80032fc:	d003      	beq.n	8003306 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80032fe:	1dfb      	adds	r3, r7, #7
 8003300:	2201      	movs	r2, #1
 8003302:	701a      	strb	r2, [r3, #0]
 8003304:	e001      	b.n	800330a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003306:	f7fe ffdf 	bl	80022c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800330a:	1dfb      	adds	r3, r7, #7
 800330c:	781b      	ldrb	r3, [r3, #0]
}
 800330e:	0018      	movs	r0, r3
 8003310:	46bd      	mov	sp, r7
 8003312:	b002      	add	sp, #8
 8003314:	bd80      	pop	{r7, pc}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	40022000 	.word	0x40022000

0800331c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003320:	4b05      	ldr	r3, [pc, #20]	; (8003338 <HAL_IncTick+0x1c>)
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	001a      	movs	r2, r3
 8003326:	4b05      	ldr	r3, [pc, #20]	; (800333c <HAL_IncTick+0x20>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	18d2      	adds	r2, r2, r3
 800332c:	4b03      	ldr	r3, [pc, #12]	; (800333c <HAL_IncTick+0x20>)
 800332e:	601a      	str	r2, [r3, #0]
}
 8003330:	46c0      	nop			; (mov r8, r8)
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	46c0      	nop			; (mov r8, r8)
 8003338:	20000024 	.word	0x20000024
 800333c:	2000024c 	.word	0x2000024c

08003340 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  return uwTick;
 8003344:	4b02      	ldr	r3, [pc, #8]	; (8003350 <HAL_GetTick+0x10>)
 8003346:	681b      	ldr	r3, [r3, #0]
}
 8003348:	0018      	movs	r0, r3
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	46c0      	nop			; (mov r8, r8)
 8003350:	2000024c 	.word	0x2000024c

08003354 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800335c:	f7ff fff0 	bl	8003340 <HAL_GetTick>
 8003360:	0003      	movs	r3, r0
 8003362:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	3301      	adds	r3, #1
 800336c:	d005      	beq.n	800337a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800336e:	4b0a      	ldr	r3, [pc, #40]	; (8003398 <HAL_Delay+0x44>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	001a      	movs	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	189b      	adds	r3, r3, r2
 8003378:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800337a:	46c0      	nop			; (mov r8, r8)
 800337c:	f7ff ffe0 	bl	8003340 <HAL_GetTick>
 8003380:	0002      	movs	r2, r0
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	429a      	cmp	r2, r3
 800338a:	d8f7      	bhi.n	800337c <HAL_Delay+0x28>
  {
  }
}
 800338c:	46c0      	nop			; (mov r8, r8)
 800338e:	46c0      	nop			; (mov r8, r8)
 8003390:	46bd      	mov	sp, r7
 8003392:	b004      	add	sp, #16
 8003394:	bd80      	pop	{r7, pc}
 8003396:	46c0      	nop			; (mov r8, r8)
 8003398:	20000024 	.word	0x20000024

0800339c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	0002      	movs	r2, r0
 80033a4:	1dfb      	adds	r3, r7, #7
 80033a6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80033a8:	1dfb      	adds	r3, r7, #7
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	2b7f      	cmp	r3, #127	; 0x7f
 80033ae:	d809      	bhi.n	80033c4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033b0:	1dfb      	adds	r3, r7, #7
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	001a      	movs	r2, r3
 80033b6:	231f      	movs	r3, #31
 80033b8:	401a      	ands	r2, r3
 80033ba:	4b04      	ldr	r3, [pc, #16]	; (80033cc <__NVIC_EnableIRQ+0x30>)
 80033bc:	2101      	movs	r1, #1
 80033be:	4091      	lsls	r1, r2
 80033c0:	000a      	movs	r2, r1
 80033c2:	601a      	str	r2, [r3, #0]
  }
}
 80033c4:	46c0      	nop			; (mov r8, r8)
 80033c6:	46bd      	mov	sp, r7
 80033c8:	b002      	add	sp, #8
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	e000e100 	.word	0xe000e100

080033d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033d0:	b590      	push	{r4, r7, lr}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	0002      	movs	r2, r0
 80033d8:	6039      	str	r1, [r7, #0]
 80033da:	1dfb      	adds	r3, r7, #7
 80033dc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80033de:	1dfb      	adds	r3, r7, #7
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	2b7f      	cmp	r3, #127	; 0x7f
 80033e4:	d828      	bhi.n	8003438 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033e6:	4a2f      	ldr	r2, [pc, #188]	; (80034a4 <__NVIC_SetPriority+0xd4>)
 80033e8:	1dfb      	adds	r3, r7, #7
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	b25b      	sxtb	r3, r3
 80033ee:	089b      	lsrs	r3, r3, #2
 80033f0:	33c0      	adds	r3, #192	; 0xc0
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	589b      	ldr	r3, [r3, r2]
 80033f6:	1dfa      	adds	r2, r7, #7
 80033f8:	7812      	ldrb	r2, [r2, #0]
 80033fa:	0011      	movs	r1, r2
 80033fc:	2203      	movs	r2, #3
 80033fe:	400a      	ands	r2, r1
 8003400:	00d2      	lsls	r2, r2, #3
 8003402:	21ff      	movs	r1, #255	; 0xff
 8003404:	4091      	lsls	r1, r2
 8003406:	000a      	movs	r2, r1
 8003408:	43d2      	mvns	r2, r2
 800340a:	401a      	ands	r2, r3
 800340c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	019b      	lsls	r3, r3, #6
 8003412:	22ff      	movs	r2, #255	; 0xff
 8003414:	401a      	ands	r2, r3
 8003416:	1dfb      	adds	r3, r7, #7
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	0018      	movs	r0, r3
 800341c:	2303      	movs	r3, #3
 800341e:	4003      	ands	r3, r0
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003424:	481f      	ldr	r0, [pc, #124]	; (80034a4 <__NVIC_SetPriority+0xd4>)
 8003426:	1dfb      	adds	r3, r7, #7
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	b25b      	sxtb	r3, r3
 800342c:	089b      	lsrs	r3, r3, #2
 800342e:	430a      	orrs	r2, r1
 8003430:	33c0      	adds	r3, #192	; 0xc0
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003436:	e031      	b.n	800349c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003438:	4a1b      	ldr	r2, [pc, #108]	; (80034a8 <__NVIC_SetPriority+0xd8>)
 800343a:	1dfb      	adds	r3, r7, #7
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	0019      	movs	r1, r3
 8003440:	230f      	movs	r3, #15
 8003442:	400b      	ands	r3, r1
 8003444:	3b08      	subs	r3, #8
 8003446:	089b      	lsrs	r3, r3, #2
 8003448:	3306      	adds	r3, #6
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	18d3      	adds	r3, r2, r3
 800344e:	3304      	adds	r3, #4
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	1dfa      	adds	r2, r7, #7
 8003454:	7812      	ldrb	r2, [r2, #0]
 8003456:	0011      	movs	r1, r2
 8003458:	2203      	movs	r2, #3
 800345a:	400a      	ands	r2, r1
 800345c:	00d2      	lsls	r2, r2, #3
 800345e:	21ff      	movs	r1, #255	; 0xff
 8003460:	4091      	lsls	r1, r2
 8003462:	000a      	movs	r2, r1
 8003464:	43d2      	mvns	r2, r2
 8003466:	401a      	ands	r2, r3
 8003468:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	019b      	lsls	r3, r3, #6
 800346e:	22ff      	movs	r2, #255	; 0xff
 8003470:	401a      	ands	r2, r3
 8003472:	1dfb      	adds	r3, r7, #7
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	0018      	movs	r0, r3
 8003478:	2303      	movs	r3, #3
 800347a:	4003      	ands	r3, r0
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003480:	4809      	ldr	r0, [pc, #36]	; (80034a8 <__NVIC_SetPriority+0xd8>)
 8003482:	1dfb      	adds	r3, r7, #7
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	001c      	movs	r4, r3
 8003488:	230f      	movs	r3, #15
 800348a:	4023      	ands	r3, r4
 800348c:	3b08      	subs	r3, #8
 800348e:	089b      	lsrs	r3, r3, #2
 8003490:	430a      	orrs	r2, r1
 8003492:	3306      	adds	r3, #6
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	18c3      	adds	r3, r0, r3
 8003498:	3304      	adds	r3, #4
 800349a:	601a      	str	r2, [r3, #0]
}
 800349c:	46c0      	nop			; (mov r8, r8)
 800349e:	46bd      	mov	sp, r7
 80034a0:	b003      	add	sp, #12
 80034a2:	bd90      	pop	{r4, r7, pc}
 80034a4:	e000e100 	.word	0xe000e100
 80034a8:	e000ed00 	.word	0xe000ed00

080034ac <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60b9      	str	r1, [r7, #8]
 80034b4:	607a      	str	r2, [r7, #4]
 80034b6:	210f      	movs	r1, #15
 80034b8:	187b      	adds	r3, r7, r1
 80034ba:	1c02      	adds	r2, r0, #0
 80034bc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80034be:	68ba      	ldr	r2, [r7, #8]
 80034c0:	187b      	adds	r3, r7, r1
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	b25b      	sxtb	r3, r3
 80034c6:	0011      	movs	r1, r2
 80034c8:	0018      	movs	r0, r3
 80034ca:	f7ff ff81 	bl	80033d0 <__NVIC_SetPriority>
}
 80034ce:	46c0      	nop			; (mov r8, r8)
 80034d0:	46bd      	mov	sp, r7
 80034d2:	b004      	add	sp, #16
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b082      	sub	sp, #8
 80034da:	af00      	add	r7, sp, #0
 80034dc:	0002      	movs	r2, r0
 80034de:	1dfb      	adds	r3, r7, #7
 80034e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034e2:	1dfb      	adds	r3, r7, #7
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	b25b      	sxtb	r3, r3
 80034e8:	0018      	movs	r0, r3
 80034ea:	f7ff ff57 	bl	800339c <__NVIC_EnableIRQ>
}
 80034ee:	46c0      	nop			; (mov r8, r8)
 80034f0:	46bd      	mov	sp, r7
 80034f2:	b002      	add	sp, #8
 80034f4:	bd80      	pop	{r7, pc}
	...

080034f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003502:	2300      	movs	r3, #0
 8003504:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003506:	2300      	movs	r3, #0
 8003508:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800350a:	2300      	movs	r3, #0
 800350c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800350e:	e155      	b.n	80037bc <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2101      	movs	r1, #1
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	4091      	lsls	r1, r2
 800351a:	000a      	movs	r2, r1
 800351c:	4013      	ands	r3, r2
 800351e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d100      	bne.n	8003528 <HAL_GPIO_Init+0x30>
 8003526:	e146      	b.n	80037b6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	2203      	movs	r2, #3
 800352e:	4013      	ands	r3, r2
 8003530:	2b01      	cmp	r3, #1
 8003532:	d005      	beq.n	8003540 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	2203      	movs	r2, #3
 800353a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800353c:	2b02      	cmp	r3, #2
 800353e:	d130      	bne.n	80035a2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	2203      	movs	r2, #3
 800354c:	409a      	lsls	r2, r3
 800354e:	0013      	movs	r3, r2
 8003550:	43da      	mvns	r2, r3
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	4013      	ands	r3, r2
 8003556:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	68da      	ldr	r2, [r3, #12]
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	409a      	lsls	r2, r3
 8003562:	0013      	movs	r3, r2
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	4313      	orrs	r3, r2
 8003568:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003576:	2201      	movs	r2, #1
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	409a      	lsls	r2, r3
 800357c:	0013      	movs	r3, r2
 800357e:	43da      	mvns	r2, r3
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	4013      	ands	r3, r2
 8003584:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	091b      	lsrs	r3, r3, #4
 800358c:	2201      	movs	r2, #1
 800358e:	401a      	ands	r2, r3
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	409a      	lsls	r2, r3
 8003594:	0013      	movs	r3, r2
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	4313      	orrs	r3, r2
 800359a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2203      	movs	r2, #3
 80035a8:	4013      	ands	r3, r2
 80035aa:	2b03      	cmp	r3, #3
 80035ac:	d017      	beq.n	80035de <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	2203      	movs	r2, #3
 80035ba:	409a      	lsls	r2, r3
 80035bc:	0013      	movs	r3, r2
 80035be:	43da      	mvns	r2, r3
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	4013      	ands	r3, r2
 80035c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	689a      	ldr	r2, [r3, #8]
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	409a      	lsls	r2, r3
 80035d0:	0013      	movs	r3, r2
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2203      	movs	r2, #3
 80035e4:	4013      	ands	r3, r2
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d123      	bne.n	8003632 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	08da      	lsrs	r2, r3, #3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	3208      	adds	r2, #8
 80035f2:	0092      	lsls	r2, r2, #2
 80035f4:	58d3      	ldr	r3, [r2, r3]
 80035f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	2207      	movs	r2, #7
 80035fc:	4013      	ands	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	220f      	movs	r2, #15
 8003602:	409a      	lsls	r2, r3
 8003604:	0013      	movs	r3, r2
 8003606:	43da      	mvns	r2, r3
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	4013      	ands	r3, r2
 800360c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	691a      	ldr	r2, [r3, #16]
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	2107      	movs	r1, #7
 8003616:	400b      	ands	r3, r1
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	409a      	lsls	r2, r3
 800361c:	0013      	movs	r3, r2
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	4313      	orrs	r3, r2
 8003622:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	08da      	lsrs	r2, r3, #3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3208      	adds	r2, #8
 800362c:	0092      	lsls	r2, r2, #2
 800362e:	6939      	ldr	r1, [r7, #16]
 8003630:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	2203      	movs	r2, #3
 800363e:	409a      	lsls	r2, r3
 8003640:	0013      	movs	r3, r2
 8003642:	43da      	mvns	r2, r3
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	4013      	ands	r3, r2
 8003648:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2203      	movs	r2, #3
 8003650:	401a      	ands	r2, r3
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	409a      	lsls	r2, r3
 8003658:	0013      	movs	r3, r2
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	4313      	orrs	r3, r2
 800365e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	23c0      	movs	r3, #192	; 0xc0
 800366c:	029b      	lsls	r3, r3, #10
 800366e:	4013      	ands	r3, r2
 8003670:	d100      	bne.n	8003674 <HAL_GPIO_Init+0x17c>
 8003672:	e0a0      	b.n	80037b6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003674:	4b57      	ldr	r3, [pc, #348]	; (80037d4 <HAL_GPIO_Init+0x2dc>)
 8003676:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003678:	4b56      	ldr	r3, [pc, #344]	; (80037d4 <HAL_GPIO_Init+0x2dc>)
 800367a:	2101      	movs	r1, #1
 800367c:	430a      	orrs	r2, r1
 800367e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003680:	4a55      	ldr	r2, [pc, #340]	; (80037d8 <HAL_GPIO_Init+0x2e0>)
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	089b      	lsrs	r3, r3, #2
 8003686:	3302      	adds	r3, #2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	589b      	ldr	r3, [r3, r2]
 800368c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	2203      	movs	r2, #3
 8003692:	4013      	ands	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	220f      	movs	r2, #15
 8003698:	409a      	lsls	r2, r3
 800369a:	0013      	movs	r3, r2
 800369c:	43da      	mvns	r2, r3
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	4013      	ands	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	23a0      	movs	r3, #160	; 0xa0
 80036a8:	05db      	lsls	r3, r3, #23
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d01f      	beq.n	80036ee <HAL_GPIO_Init+0x1f6>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a4a      	ldr	r2, [pc, #296]	; (80037dc <HAL_GPIO_Init+0x2e4>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d019      	beq.n	80036ea <HAL_GPIO_Init+0x1f2>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a49      	ldr	r2, [pc, #292]	; (80037e0 <HAL_GPIO_Init+0x2e8>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d013      	beq.n	80036e6 <HAL_GPIO_Init+0x1ee>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a48      	ldr	r2, [pc, #288]	; (80037e4 <HAL_GPIO_Init+0x2ec>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d00d      	beq.n	80036e2 <HAL_GPIO_Init+0x1ea>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a47      	ldr	r2, [pc, #284]	; (80037e8 <HAL_GPIO_Init+0x2f0>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d007      	beq.n	80036de <HAL_GPIO_Init+0x1e6>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a46      	ldr	r2, [pc, #280]	; (80037ec <HAL_GPIO_Init+0x2f4>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d101      	bne.n	80036da <HAL_GPIO_Init+0x1e2>
 80036d6:	2305      	movs	r3, #5
 80036d8:	e00a      	b.n	80036f0 <HAL_GPIO_Init+0x1f8>
 80036da:	2306      	movs	r3, #6
 80036dc:	e008      	b.n	80036f0 <HAL_GPIO_Init+0x1f8>
 80036de:	2304      	movs	r3, #4
 80036e0:	e006      	b.n	80036f0 <HAL_GPIO_Init+0x1f8>
 80036e2:	2303      	movs	r3, #3
 80036e4:	e004      	b.n	80036f0 <HAL_GPIO_Init+0x1f8>
 80036e6:	2302      	movs	r3, #2
 80036e8:	e002      	b.n	80036f0 <HAL_GPIO_Init+0x1f8>
 80036ea:	2301      	movs	r3, #1
 80036ec:	e000      	b.n	80036f0 <HAL_GPIO_Init+0x1f8>
 80036ee:	2300      	movs	r3, #0
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	2103      	movs	r1, #3
 80036f4:	400a      	ands	r2, r1
 80036f6:	0092      	lsls	r2, r2, #2
 80036f8:	4093      	lsls	r3, r2
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003700:	4935      	ldr	r1, [pc, #212]	; (80037d8 <HAL_GPIO_Init+0x2e0>)
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	089b      	lsrs	r3, r3, #2
 8003706:	3302      	adds	r3, #2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800370e:	4b38      	ldr	r3, [pc, #224]	; (80037f0 <HAL_GPIO_Init+0x2f8>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	43da      	mvns	r2, r3
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	4013      	ands	r3, r2
 800371c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	2380      	movs	r3, #128	; 0x80
 8003724:	025b      	lsls	r3, r3, #9
 8003726:	4013      	ands	r3, r2
 8003728:	d003      	beq.n	8003732 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4313      	orrs	r3, r2
 8003730:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003732:	4b2f      	ldr	r3, [pc, #188]	; (80037f0 <HAL_GPIO_Init+0x2f8>)
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003738:	4b2d      	ldr	r3, [pc, #180]	; (80037f0 <HAL_GPIO_Init+0x2f8>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	43da      	mvns	r2, r3
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	4013      	ands	r3, r2
 8003746:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	2380      	movs	r3, #128	; 0x80
 800374e:	029b      	lsls	r3, r3, #10
 8003750:	4013      	ands	r3, r2
 8003752:	d003      	beq.n	800375c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	4313      	orrs	r3, r2
 800375a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800375c:	4b24      	ldr	r3, [pc, #144]	; (80037f0 <HAL_GPIO_Init+0x2f8>)
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003762:	4b23      	ldr	r3, [pc, #140]	; (80037f0 <HAL_GPIO_Init+0x2f8>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	43da      	mvns	r2, r3
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	4013      	ands	r3, r2
 8003770:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	2380      	movs	r3, #128	; 0x80
 8003778:	035b      	lsls	r3, r3, #13
 800377a:	4013      	ands	r3, r2
 800377c:	d003      	beq.n	8003786 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4313      	orrs	r3, r2
 8003784:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003786:	4b1a      	ldr	r3, [pc, #104]	; (80037f0 <HAL_GPIO_Init+0x2f8>)
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800378c:	4b18      	ldr	r3, [pc, #96]	; (80037f0 <HAL_GPIO_Init+0x2f8>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	43da      	mvns	r2, r3
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	4013      	ands	r3, r2
 800379a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	2380      	movs	r3, #128	; 0x80
 80037a2:	039b      	lsls	r3, r3, #14
 80037a4:	4013      	ands	r3, r2
 80037a6:	d003      	beq.n	80037b0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80037b0:	4b0f      	ldr	r3, [pc, #60]	; (80037f0 <HAL_GPIO_Init+0x2f8>)
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	3301      	adds	r3, #1
 80037ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	40da      	lsrs	r2, r3
 80037c4:	1e13      	subs	r3, r2, #0
 80037c6:	d000      	beq.n	80037ca <HAL_GPIO_Init+0x2d2>
 80037c8:	e6a2      	b.n	8003510 <HAL_GPIO_Init+0x18>
  }
}
 80037ca:	46c0      	nop			; (mov r8, r8)
 80037cc:	46c0      	nop			; (mov r8, r8)
 80037ce:	46bd      	mov	sp, r7
 80037d0:	b006      	add	sp, #24
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40021000 	.word	0x40021000
 80037d8:	40010000 	.word	0x40010000
 80037dc:	50000400 	.word	0x50000400
 80037e0:	50000800 	.word	0x50000800
 80037e4:	50000c00 	.word	0x50000c00
 80037e8:	50001000 	.word	0x50001000
 80037ec:	50001c00 	.word	0x50001c00
 80037f0:	40010400 	.word	0x40010400

080037f4 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	000a      	movs	r2, r1
 80037fe:	1cbb      	adds	r3, r7, #2
 8003800:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	1cba      	adds	r2, r7, #2
 8003808:	8812      	ldrh	r2, [r2, #0]
 800380a:	4013      	ands	r3, r2
 800380c:	d004      	beq.n	8003818 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800380e:	230f      	movs	r3, #15
 8003810:	18fb      	adds	r3, r7, r3
 8003812:	2201      	movs	r2, #1
 8003814:	701a      	strb	r2, [r3, #0]
 8003816:	e003      	b.n	8003820 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003818:	230f      	movs	r3, #15
 800381a:	18fb      	adds	r3, r7, r3
 800381c:	2200      	movs	r2, #0
 800381e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003820:	230f      	movs	r3, #15
 8003822:	18fb      	adds	r3, r7, r3
 8003824:	781b      	ldrb	r3, [r3, #0]
}
 8003826:	0018      	movs	r0, r3
 8003828:	46bd      	mov	sp, r7
 800382a:	b004      	add	sp, #16
 800382c:	bd80      	pop	{r7, pc}

0800382e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b082      	sub	sp, #8
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
 8003836:	0008      	movs	r0, r1
 8003838:	0011      	movs	r1, r2
 800383a:	1cbb      	adds	r3, r7, #2
 800383c:	1c02      	adds	r2, r0, #0
 800383e:	801a      	strh	r2, [r3, #0]
 8003840:	1c7b      	adds	r3, r7, #1
 8003842:	1c0a      	adds	r2, r1, #0
 8003844:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003846:	1c7b      	adds	r3, r7, #1
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d004      	beq.n	8003858 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800384e:	1cbb      	adds	r3, r7, #2
 8003850:	881a      	ldrh	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003856:	e003      	b.n	8003860 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8003858:	1cbb      	adds	r3, r7, #2
 800385a:	881a      	ldrh	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003860:	46c0      	nop			; (mov r8, r8)
 8003862:	46bd      	mov	sp, r7
 8003864:	b002      	add	sp, #8
 8003866:	bd80      	pop	{r7, pc}

08003868 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	000a      	movs	r2, r1
 8003872:	1cbb      	adds	r3, r7, #2
 8003874:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800387c:	1cbb      	adds	r3, r7, #2
 800387e:	881b      	ldrh	r3, [r3, #0]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	4013      	ands	r3, r2
 8003884:	041a      	lsls	r2, r3, #16
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	43db      	mvns	r3, r3
 800388a:	1cb9      	adds	r1, r7, #2
 800388c:	8809      	ldrh	r1, [r1, #0]
 800388e:	400b      	ands	r3, r1
 8003890:	431a      	orrs	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	619a      	str	r2, [r3, #24]
}
 8003896:	46c0      	nop			; (mov r8, r8)
 8003898:	46bd      	mov	sp, r7
 800389a:	b004      	add	sp, #16
 800389c:	bd80      	pop	{r7, pc}
	...

080038a0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 80038a4:	4b04      	ldr	r3, [pc, #16]	; (80038b8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	4b03      	ldr	r3, [pc, #12]	; (80038b8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80038aa:	2180      	movs	r1, #128	; 0x80
 80038ac:	0049      	lsls	r1, r1, #1
 80038ae:	430a      	orrs	r2, r1
 80038b0:	601a      	str	r2, [r3, #0]
}
 80038b2:	46c0      	nop			; (mov r8, r8)
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	40007000 	.word	0x40007000

080038bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038bc:	b5b0      	push	{r4, r5, r7, lr}
 80038be:	b08a      	sub	sp, #40	; 0x28
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d102      	bne.n	80038d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	f000 fb6c 	bl	8003fa8 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038d0:	4bc8      	ldr	r3, [pc, #800]	; (8003bf4 <HAL_RCC_OscConfig+0x338>)
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	220c      	movs	r2, #12
 80038d6:	4013      	ands	r3, r2
 80038d8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038da:	4bc6      	ldr	r3, [pc, #792]	; (8003bf4 <HAL_RCC_OscConfig+0x338>)
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	2380      	movs	r3, #128	; 0x80
 80038e0:	025b      	lsls	r3, r3, #9
 80038e2:	4013      	ands	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2201      	movs	r2, #1
 80038ec:	4013      	ands	r3, r2
 80038ee:	d100      	bne.n	80038f2 <HAL_RCC_OscConfig+0x36>
 80038f0:	e07d      	b.n	80039ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	2b08      	cmp	r3, #8
 80038f6:	d007      	beq.n	8003908 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	2b0c      	cmp	r3, #12
 80038fc:	d112      	bne.n	8003924 <HAL_RCC_OscConfig+0x68>
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	2380      	movs	r3, #128	; 0x80
 8003902:	025b      	lsls	r3, r3, #9
 8003904:	429a      	cmp	r2, r3
 8003906:	d10d      	bne.n	8003924 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003908:	4bba      	ldr	r3, [pc, #744]	; (8003bf4 <HAL_RCC_OscConfig+0x338>)
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	2380      	movs	r3, #128	; 0x80
 800390e:	029b      	lsls	r3, r3, #10
 8003910:	4013      	ands	r3, r2
 8003912:	d100      	bne.n	8003916 <HAL_RCC_OscConfig+0x5a>
 8003914:	e06a      	b.n	80039ec <HAL_RCC_OscConfig+0x130>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d166      	bne.n	80039ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	f000 fb42 	bl	8003fa8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	2380      	movs	r3, #128	; 0x80
 800392a:	025b      	lsls	r3, r3, #9
 800392c:	429a      	cmp	r2, r3
 800392e:	d107      	bne.n	8003940 <HAL_RCC_OscConfig+0x84>
 8003930:	4bb0      	ldr	r3, [pc, #704]	; (8003bf4 <HAL_RCC_OscConfig+0x338>)
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	4baf      	ldr	r3, [pc, #700]	; (8003bf4 <HAL_RCC_OscConfig+0x338>)
 8003936:	2180      	movs	r1, #128	; 0x80
 8003938:	0249      	lsls	r1, r1, #9
 800393a:	430a      	orrs	r2, r1
 800393c:	601a      	str	r2, [r3, #0]
 800393e:	e027      	b.n	8003990 <HAL_RCC_OscConfig+0xd4>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685a      	ldr	r2, [r3, #4]
 8003944:	23a0      	movs	r3, #160	; 0xa0
 8003946:	02db      	lsls	r3, r3, #11
 8003948:	429a      	cmp	r2, r3
 800394a:	d10e      	bne.n	800396a <HAL_RCC_OscConfig+0xae>
 800394c:	4ba9      	ldr	r3, [pc, #676]	; (8003bf4 <HAL_RCC_OscConfig+0x338>)
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	4ba8      	ldr	r3, [pc, #672]	; (8003bf4 <HAL_RCC_OscConfig+0x338>)
 8003952:	2180      	movs	r1, #128	; 0x80
 8003954:	02c9      	lsls	r1, r1, #11
 8003956:	430a      	orrs	r2, r1
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	4ba6      	ldr	r3, [pc, #664]	; (8003bf4 <HAL_RCC_OscConfig+0x338>)
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	4ba5      	ldr	r3, [pc, #660]	; (8003bf4 <HAL_RCC_OscConfig+0x338>)
 8003960:	2180      	movs	r1, #128	; 0x80
 8003962:	0249      	lsls	r1, r1, #9
 8003964:	430a      	orrs	r2, r1
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	e012      	b.n	8003990 <HAL_RCC_OscConfig+0xd4>
 800396a:	4ba2      	ldr	r3, [pc, #648]	; (8003bf4 <HAL_RCC_OscConfig+0x338>)
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	4ba1      	ldr	r3, [pc, #644]	; (8003bf4 <HAL_RCC_OscConfig+0x338>)
 8003970:	49a1      	ldr	r1, [pc, #644]	; (8003bf8 <HAL_RCC_OscConfig+0x33c>)
 8003972:	400a      	ands	r2, r1
 8003974:	601a      	str	r2, [r3, #0]
 8003976:	4b9f      	ldr	r3, [pc, #636]	; (8003bf4 <HAL_RCC_OscConfig+0x338>)
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	2380      	movs	r3, #128	; 0x80
 800397c:	025b      	lsls	r3, r3, #9
 800397e:	4013      	ands	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	4b9b      	ldr	r3, [pc, #620]	; (8003bf4 <HAL_RCC_OscConfig+0x338>)
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	4b9a      	ldr	r3, [pc, #616]	; (8003bf4 <HAL_RCC_OscConfig+0x338>)
 800398a:	499c      	ldr	r1, [pc, #624]	; (8003bfc <HAL_RCC_OscConfig+0x340>)
 800398c:	400a      	ands	r2, r1
 800398e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d014      	beq.n	80039c2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003998:	f7ff fcd2 	bl	8003340 <HAL_GetTick>
 800399c:	0003      	movs	r3, r0
 800399e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80039a0:	e008      	b.n	80039b4 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039a2:	f7ff fccd 	bl	8003340 <HAL_GetTick>
 80039a6:	0002      	movs	r2, r0
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b64      	cmp	r3, #100	; 0x64
 80039ae:	d901      	bls.n	80039b4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e2f9      	b.n	8003fa8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80039b4:	4b8f      	ldr	r3, [pc, #572]	; (8003bf4 <HAL_RCC_OscConfig+0x338>)
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	2380      	movs	r3, #128	; 0x80
 80039ba:	029b      	lsls	r3, r3, #10
 80039bc:	4013      	ands	r3, r2
 80039be:	d0f0      	beq.n	80039a2 <HAL_RCC_OscConfig+0xe6>
 80039c0:	e015      	b.n	80039ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c2:	f7ff fcbd 	bl	8003340 <HAL_GetTick>
 80039c6:	0003      	movs	r3, r0
 80039c8:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039cc:	f7ff fcb8 	bl	8003340 <HAL_GetTick>
 80039d0:	0002      	movs	r2, r0
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b64      	cmp	r3, #100	; 0x64
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e2e4      	b.n	8003fa8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80039de:	4b85      	ldr	r3, [pc, #532]	; (8003bf4 <HAL_RCC_OscConfig+0x338>)
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	2380      	movs	r3, #128	; 0x80
 80039e4:	029b      	lsls	r3, r3, #10
 80039e6:	4013      	ands	r3, r2
 80039e8:	d1f0      	bne.n	80039cc <HAL_RCC_OscConfig+0x110>
 80039ea:	e000      	b.n	80039ee <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ec:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2202      	movs	r2, #2
 80039f4:	4013      	ands	r3, r2
 80039f6:	d100      	bne.n	80039fa <HAL_RCC_OscConfig+0x13e>
 80039f8:	e099      	b.n	8003b2e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a02:	2220      	movs	r2, #32
 8003a04:	4013      	ands	r3, r2
 8003a06:	d009      	beq.n	8003a1c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003a08:	4b7a      	ldr	r3, [pc, #488]	; (8003bf4 <HAL_RCC_OscConfig+0x338>)
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	4b79      	ldr	r3, [pc, #484]	; (8003bf4 <HAL_RCC_OscConfig+0x338>)
 8003a0e:	2120      	movs	r1, #32
 8003a10:	430a      	orrs	r2, r1
 8003a12:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a16:	2220      	movs	r2, #32
 8003a18:	4393      	bics	r3, r2
 8003a1a:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	d005      	beq.n	8003a2e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	2b0c      	cmp	r3, #12
 8003a26:	d13e      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x1ea>
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d13b      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003a2e:	4b71      	ldr	r3, [pc, #452]	; (8003bf4 <HAL_RCC_OscConfig+0x338>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2204      	movs	r2, #4
 8003a34:	4013      	ands	r3, r2
 8003a36:	d004      	beq.n	8003a42 <HAL_RCC_OscConfig+0x186>
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e2b2      	b.n	8003fa8 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a42:	4b6c      	ldr	r3, [pc, #432]	; (8003bf4 <HAL_RCC_OscConfig+0x338>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	4a6e      	ldr	r2, [pc, #440]	; (8003c00 <HAL_RCC_OscConfig+0x344>)
 8003a48:	4013      	ands	r3, r2
 8003a4a:	0019      	movs	r1, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	021a      	lsls	r2, r3, #8
 8003a52:	4b68      	ldr	r3, [pc, #416]	; (8003bf4 <HAL_RCC_OscConfig+0x338>)
 8003a54:	430a      	orrs	r2, r1
 8003a56:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003a58:	4b66      	ldr	r3, [pc, #408]	; (8003bf4 <HAL_RCC_OscConfig+0x338>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2209      	movs	r2, #9
 8003a5e:	4393      	bics	r3, r2
 8003a60:	0019      	movs	r1, r3
 8003a62:	4b64      	ldr	r3, [pc, #400]	; (8003bf4 <HAL_RCC_OscConfig+0x338>)
 8003a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a66:	430a      	orrs	r2, r1
 8003a68:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a6a:	f000 fbeb 	bl	8004244 <HAL_RCC_GetSysClockFreq>
 8003a6e:	0001      	movs	r1, r0
 8003a70:	4b60      	ldr	r3, [pc, #384]	; (8003bf4 <HAL_RCC_OscConfig+0x338>)
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	091b      	lsrs	r3, r3, #4
 8003a76:	220f      	movs	r2, #15
 8003a78:	4013      	ands	r3, r2
 8003a7a:	4a62      	ldr	r2, [pc, #392]	; (8003c04 <HAL_RCC_OscConfig+0x348>)
 8003a7c:	5cd3      	ldrb	r3, [r2, r3]
 8003a7e:	000a      	movs	r2, r1
 8003a80:	40da      	lsrs	r2, r3
 8003a82:	4b61      	ldr	r3, [pc, #388]	; (8003c08 <HAL_RCC_OscConfig+0x34c>)
 8003a84:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003a86:	4b61      	ldr	r3, [pc, #388]	; (8003c0c <HAL_RCC_OscConfig+0x350>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2513      	movs	r5, #19
 8003a8c:	197c      	adds	r4, r7, r5
 8003a8e:	0018      	movs	r0, r3
 8003a90:	f7fe fc9a 	bl	80023c8 <HAL_InitTick>
 8003a94:	0003      	movs	r3, r0
 8003a96:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003a98:	197b      	adds	r3, r7, r5
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d046      	beq.n	8003b2e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8003aa0:	197b      	adds	r3, r7, r5
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	e280      	b.n	8003fa8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d027      	beq.n	8003afc <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003aac:	4b51      	ldr	r3, [pc, #324]	; (8003bf4 <HAL_RCC_OscConfig+0x338>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2209      	movs	r2, #9
 8003ab2:	4393      	bics	r3, r2
 8003ab4:	0019      	movs	r1, r3
 8003ab6:	4b4f      	ldr	r3, [pc, #316]	; (8003bf4 <HAL_RCC_OscConfig+0x338>)
 8003ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aba:	430a      	orrs	r2, r1
 8003abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003abe:	f7ff fc3f 	bl	8003340 <HAL_GetTick>
 8003ac2:	0003      	movs	r3, r0
 8003ac4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ac8:	f7ff fc3a 	bl	8003340 <HAL_GetTick>
 8003acc:	0002      	movs	r2, r0
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e266      	b.n	8003fa8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ada:	4b46      	ldr	r3, [pc, #280]	; (8003bf4 <HAL_RCC_OscConfig+0x338>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2204      	movs	r2, #4
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	d0f1      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae4:	4b43      	ldr	r3, [pc, #268]	; (8003bf4 <HAL_RCC_OscConfig+0x338>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	4a45      	ldr	r2, [pc, #276]	; (8003c00 <HAL_RCC_OscConfig+0x344>)
 8003aea:	4013      	ands	r3, r2
 8003aec:	0019      	movs	r1, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	021a      	lsls	r2, r3, #8
 8003af4:	4b3f      	ldr	r3, [pc, #252]	; (8003bf4 <HAL_RCC_OscConfig+0x338>)
 8003af6:	430a      	orrs	r2, r1
 8003af8:	605a      	str	r2, [r3, #4]
 8003afa:	e018      	b.n	8003b2e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003afc:	4b3d      	ldr	r3, [pc, #244]	; (8003bf4 <HAL_RCC_OscConfig+0x338>)
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	4b3c      	ldr	r3, [pc, #240]	; (8003bf4 <HAL_RCC_OscConfig+0x338>)
 8003b02:	2101      	movs	r1, #1
 8003b04:	438a      	bics	r2, r1
 8003b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b08:	f7ff fc1a 	bl	8003340 <HAL_GetTick>
 8003b0c:	0003      	movs	r3, r0
 8003b0e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b12:	f7ff fc15 	bl	8003340 <HAL_GetTick>
 8003b16:	0002      	movs	r2, r0
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e241      	b.n	8003fa8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b24:	4b33      	ldr	r3, [pc, #204]	; (8003bf4 <HAL_RCC_OscConfig+0x338>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2204      	movs	r2, #4
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	d1f1      	bne.n	8003b12 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2210      	movs	r2, #16
 8003b34:	4013      	ands	r3, r2
 8003b36:	d100      	bne.n	8003b3a <HAL_RCC_OscConfig+0x27e>
 8003b38:	e0a1      	b.n	8003c7e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d140      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b40:	4b2c      	ldr	r3, [pc, #176]	; (8003bf4 <HAL_RCC_OscConfig+0x338>)
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	2380      	movs	r3, #128	; 0x80
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4013      	ands	r3, r2
 8003b4a:	d005      	beq.n	8003b58 <HAL_RCC_OscConfig+0x29c>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e227      	b.n	8003fa8 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b58:	4b26      	ldr	r3, [pc, #152]	; (8003bf4 <HAL_RCC_OscConfig+0x338>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	4a2c      	ldr	r2, [pc, #176]	; (8003c10 <HAL_RCC_OscConfig+0x354>)
 8003b5e:	4013      	ands	r3, r2
 8003b60:	0019      	movs	r1, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1a      	ldr	r2, [r3, #32]
 8003b66:	4b23      	ldr	r3, [pc, #140]	; (8003bf4 <HAL_RCC_OscConfig+0x338>)
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b6c:	4b21      	ldr	r3, [pc, #132]	; (8003bf4 <HAL_RCC_OscConfig+0x338>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	021b      	lsls	r3, r3, #8
 8003b72:	0a19      	lsrs	r1, r3, #8
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	69db      	ldr	r3, [r3, #28]
 8003b78:	061a      	lsls	r2, r3, #24
 8003b7a:	4b1e      	ldr	r3, [pc, #120]	; (8003bf4 <HAL_RCC_OscConfig+0x338>)
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	0b5b      	lsrs	r3, r3, #13
 8003b86:	3301      	adds	r3, #1
 8003b88:	2280      	movs	r2, #128	; 0x80
 8003b8a:	0212      	lsls	r2, r2, #8
 8003b8c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003b8e:	4b19      	ldr	r3, [pc, #100]	; (8003bf4 <HAL_RCC_OscConfig+0x338>)
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	091b      	lsrs	r3, r3, #4
 8003b94:	210f      	movs	r1, #15
 8003b96:	400b      	ands	r3, r1
 8003b98:	491a      	ldr	r1, [pc, #104]	; (8003c04 <HAL_RCC_OscConfig+0x348>)
 8003b9a:	5ccb      	ldrb	r3, [r1, r3]
 8003b9c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003b9e:	4b1a      	ldr	r3, [pc, #104]	; (8003c08 <HAL_RCC_OscConfig+0x34c>)
 8003ba0:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003ba2:	4b1a      	ldr	r3, [pc, #104]	; (8003c0c <HAL_RCC_OscConfig+0x350>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2513      	movs	r5, #19
 8003ba8:	197c      	adds	r4, r7, r5
 8003baa:	0018      	movs	r0, r3
 8003bac:	f7fe fc0c 	bl	80023c8 <HAL_InitTick>
 8003bb0:	0003      	movs	r3, r0
 8003bb2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003bb4:	197b      	adds	r3, r7, r5
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d060      	beq.n	8003c7e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8003bbc:	197b      	adds	r3, r7, r5
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	e1f2      	b.n	8003fa8 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d03f      	beq.n	8003c4a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003bca:	4b0a      	ldr	r3, [pc, #40]	; (8003bf4 <HAL_RCC_OscConfig+0x338>)
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	4b09      	ldr	r3, [pc, #36]	; (8003bf4 <HAL_RCC_OscConfig+0x338>)
 8003bd0:	2180      	movs	r1, #128	; 0x80
 8003bd2:	0049      	lsls	r1, r1, #1
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd8:	f7ff fbb2 	bl	8003340 <HAL_GetTick>
 8003bdc:	0003      	movs	r3, r0
 8003bde:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003be0:	e018      	b.n	8003c14 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003be2:	f7ff fbad 	bl	8003340 <HAL_GetTick>
 8003be6:	0002      	movs	r2, r0
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d911      	bls.n	8003c14 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e1d9      	b.n	8003fa8 <HAL_RCC_OscConfig+0x6ec>
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	fffeffff 	.word	0xfffeffff
 8003bfc:	fffbffff 	.word	0xfffbffff
 8003c00:	ffffe0ff 	.word	0xffffe0ff
 8003c04:	08009ecc 	.word	0x08009ecc
 8003c08:	20000000 	.word	0x20000000
 8003c0c:	20000020 	.word	0x20000020
 8003c10:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003c14:	4bc9      	ldr	r3, [pc, #804]	; (8003f3c <HAL_RCC_OscConfig+0x680>)
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	2380      	movs	r3, #128	; 0x80
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	d0e0      	beq.n	8003be2 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c20:	4bc6      	ldr	r3, [pc, #792]	; (8003f3c <HAL_RCC_OscConfig+0x680>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	4ac6      	ldr	r2, [pc, #792]	; (8003f40 <HAL_RCC_OscConfig+0x684>)
 8003c26:	4013      	ands	r3, r2
 8003c28:	0019      	movs	r1, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a1a      	ldr	r2, [r3, #32]
 8003c2e:	4bc3      	ldr	r3, [pc, #780]	; (8003f3c <HAL_RCC_OscConfig+0x680>)
 8003c30:	430a      	orrs	r2, r1
 8003c32:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c34:	4bc1      	ldr	r3, [pc, #772]	; (8003f3c <HAL_RCC_OscConfig+0x680>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	021b      	lsls	r3, r3, #8
 8003c3a:	0a19      	lsrs	r1, r3, #8
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	69db      	ldr	r3, [r3, #28]
 8003c40:	061a      	lsls	r2, r3, #24
 8003c42:	4bbe      	ldr	r3, [pc, #760]	; (8003f3c <HAL_RCC_OscConfig+0x680>)
 8003c44:	430a      	orrs	r2, r1
 8003c46:	605a      	str	r2, [r3, #4]
 8003c48:	e019      	b.n	8003c7e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003c4a:	4bbc      	ldr	r3, [pc, #752]	; (8003f3c <HAL_RCC_OscConfig+0x680>)
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	4bbb      	ldr	r3, [pc, #748]	; (8003f3c <HAL_RCC_OscConfig+0x680>)
 8003c50:	49bc      	ldr	r1, [pc, #752]	; (8003f44 <HAL_RCC_OscConfig+0x688>)
 8003c52:	400a      	ands	r2, r1
 8003c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c56:	f7ff fb73 	bl	8003340 <HAL_GetTick>
 8003c5a:	0003      	movs	r3, r0
 8003c5c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003c5e:	e008      	b.n	8003c72 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c60:	f7ff fb6e 	bl	8003340 <HAL_GetTick>
 8003c64:	0002      	movs	r2, r0
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e19a      	b.n	8003fa8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003c72:	4bb2      	ldr	r3, [pc, #712]	; (8003f3c <HAL_RCC_OscConfig+0x680>)
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	2380      	movs	r3, #128	; 0x80
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	d1f0      	bne.n	8003c60 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2208      	movs	r2, #8
 8003c84:	4013      	ands	r3, r2
 8003c86:	d036      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d019      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c90:	4baa      	ldr	r3, [pc, #680]	; (8003f3c <HAL_RCC_OscConfig+0x680>)
 8003c92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c94:	4ba9      	ldr	r3, [pc, #676]	; (8003f3c <HAL_RCC_OscConfig+0x680>)
 8003c96:	2101      	movs	r1, #1
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c9c:	f7ff fb50 	bl	8003340 <HAL_GetTick>
 8003ca0:	0003      	movs	r3, r0
 8003ca2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ca4:	e008      	b.n	8003cb8 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ca6:	f7ff fb4b 	bl	8003340 <HAL_GetTick>
 8003caa:	0002      	movs	r2, r0
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e177      	b.n	8003fa8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cb8:	4ba0      	ldr	r3, [pc, #640]	; (8003f3c <HAL_RCC_OscConfig+0x680>)
 8003cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	d0f1      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x3ea>
 8003cc2:	e018      	b.n	8003cf6 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cc4:	4b9d      	ldr	r3, [pc, #628]	; (8003f3c <HAL_RCC_OscConfig+0x680>)
 8003cc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003cc8:	4b9c      	ldr	r3, [pc, #624]	; (8003f3c <HAL_RCC_OscConfig+0x680>)
 8003cca:	2101      	movs	r1, #1
 8003ccc:	438a      	bics	r2, r1
 8003cce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cd0:	f7ff fb36 	bl	8003340 <HAL_GetTick>
 8003cd4:	0003      	movs	r3, r0
 8003cd6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003cd8:	e008      	b.n	8003cec <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cda:	f7ff fb31 	bl	8003340 <HAL_GetTick>
 8003cde:	0002      	movs	r2, r0
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e15d      	b.n	8003fa8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003cec:	4b93      	ldr	r3, [pc, #588]	; (8003f3c <HAL_RCC_OscConfig+0x680>)
 8003cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf0:	2202      	movs	r2, #2
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	d1f1      	bne.n	8003cda <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2204      	movs	r2, #4
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	d100      	bne.n	8003d02 <HAL_RCC_OscConfig+0x446>
 8003d00:	e0ae      	b.n	8003e60 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d02:	2023      	movs	r0, #35	; 0x23
 8003d04:	183b      	adds	r3, r7, r0
 8003d06:	2200      	movs	r2, #0
 8003d08:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d0a:	4b8c      	ldr	r3, [pc, #560]	; (8003f3c <HAL_RCC_OscConfig+0x680>)
 8003d0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d0e:	2380      	movs	r3, #128	; 0x80
 8003d10:	055b      	lsls	r3, r3, #21
 8003d12:	4013      	ands	r3, r2
 8003d14:	d109      	bne.n	8003d2a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d16:	4b89      	ldr	r3, [pc, #548]	; (8003f3c <HAL_RCC_OscConfig+0x680>)
 8003d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d1a:	4b88      	ldr	r3, [pc, #544]	; (8003f3c <HAL_RCC_OscConfig+0x680>)
 8003d1c:	2180      	movs	r1, #128	; 0x80
 8003d1e:	0549      	lsls	r1, r1, #21
 8003d20:	430a      	orrs	r2, r1
 8003d22:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003d24:	183b      	adds	r3, r7, r0
 8003d26:	2201      	movs	r2, #1
 8003d28:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d2a:	4b87      	ldr	r3, [pc, #540]	; (8003f48 <HAL_RCC_OscConfig+0x68c>)
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	2380      	movs	r3, #128	; 0x80
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	4013      	ands	r3, r2
 8003d34:	d11a      	bne.n	8003d6c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d36:	4b84      	ldr	r3, [pc, #528]	; (8003f48 <HAL_RCC_OscConfig+0x68c>)
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	4b83      	ldr	r3, [pc, #524]	; (8003f48 <HAL_RCC_OscConfig+0x68c>)
 8003d3c:	2180      	movs	r1, #128	; 0x80
 8003d3e:	0049      	lsls	r1, r1, #1
 8003d40:	430a      	orrs	r2, r1
 8003d42:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d44:	f7ff fafc 	bl	8003340 <HAL_GetTick>
 8003d48:	0003      	movs	r3, r0
 8003d4a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d4c:	e008      	b.n	8003d60 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d4e:	f7ff faf7 	bl	8003340 <HAL_GetTick>
 8003d52:	0002      	movs	r2, r0
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b64      	cmp	r3, #100	; 0x64
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e123      	b.n	8003fa8 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d60:	4b79      	ldr	r3, [pc, #484]	; (8003f48 <HAL_RCC_OscConfig+0x68c>)
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	2380      	movs	r3, #128	; 0x80
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	4013      	ands	r3, r2
 8003d6a:	d0f0      	beq.n	8003d4e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689a      	ldr	r2, [r3, #8]
 8003d70:	2380      	movs	r3, #128	; 0x80
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d107      	bne.n	8003d88 <HAL_RCC_OscConfig+0x4cc>
 8003d78:	4b70      	ldr	r3, [pc, #448]	; (8003f3c <HAL_RCC_OscConfig+0x680>)
 8003d7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d7c:	4b6f      	ldr	r3, [pc, #444]	; (8003f3c <HAL_RCC_OscConfig+0x680>)
 8003d7e:	2180      	movs	r1, #128	; 0x80
 8003d80:	0049      	lsls	r1, r1, #1
 8003d82:	430a      	orrs	r2, r1
 8003d84:	651a      	str	r2, [r3, #80]	; 0x50
 8003d86:	e031      	b.n	8003dec <HAL_RCC_OscConfig+0x530>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10c      	bne.n	8003daa <HAL_RCC_OscConfig+0x4ee>
 8003d90:	4b6a      	ldr	r3, [pc, #424]	; (8003f3c <HAL_RCC_OscConfig+0x680>)
 8003d92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d94:	4b69      	ldr	r3, [pc, #420]	; (8003f3c <HAL_RCC_OscConfig+0x680>)
 8003d96:	496b      	ldr	r1, [pc, #428]	; (8003f44 <HAL_RCC_OscConfig+0x688>)
 8003d98:	400a      	ands	r2, r1
 8003d9a:	651a      	str	r2, [r3, #80]	; 0x50
 8003d9c:	4b67      	ldr	r3, [pc, #412]	; (8003f3c <HAL_RCC_OscConfig+0x680>)
 8003d9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003da0:	4b66      	ldr	r3, [pc, #408]	; (8003f3c <HAL_RCC_OscConfig+0x680>)
 8003da2:	496a      	ldr	r1, [pc, #424]	; (8003f4c <HAL_RCC_OscConfig+0x690>)
 8003da4:	400a      	ands	r2, r1
 8003da6:	651a      	str	r2, [r3, #80]	; 0x50
 8003da8:	e020      	b.n	8003dec <HAL_RCC_OscConfig+0x530>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	689a      	ldr	r2, [r3, #8]
 8003dae:	23a0      	movs	r3, #160	; 0xa0
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d10e      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x518>
 8003db6:	4b61      	ldr	r3, [pc, #388]	; (8003f3c <HAL_RCC_OscConfig+0x680>)
 8003db8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003dba:	4b60      	ldr	r3, [pc, #384]	; (8003f3c <HAL_RCC_OscConfig+0x680>)
 8003dbc:	2180      	movs	r1, #128	; 0x80
 8003dbe:	00c9      	lsls	r1, r1, #3
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	651a      	str	r2, [r3, #80]	; 0x50
 8003dc4:	4b5d      	ldr	r3, [pc, #372]	; (8003f3c <HAL_RCC_OscConfig+0x680>)
 8003dc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003dc8:	4b5c      	ldr	r3, [pc, #368]	; (8003f3c <HAL_RCC_OscConfig+0x680>)
 8003dca:	2180      	movs	r1, #128	; 0x80
 8003dcc:	0049      	lsls	r1, r1, #1
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	651a      	str	r2, [r3, #80]	; 0x50
 8003dd2:	e00b      	b.n	8003dec <HAL_RCC_OscConfig+0x530>
 8003dd4:	4b59      	ldr	r3, [pc, #356]	; (8003f3c <HAL_RCC_OscConfig+0x680>)
 8003dd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003dd8:	4b58      	ldr	r3, [pc, #352]	; (8003f3c <HAL_RCC_OscConfig+0x680>)
 8003dda:	495a      	ldr	r1, [pc, #360]	; (8003f44 <HAL_RCC_OscConfig+0x688>)
 8003ddc:	400a      	ands	r2, r1
 8003dde:	651a      	str	r2, [r3, #80]	; 0x50
 8003de0:	4b56      	ldr	r3, [pc, #344]	; (8003f3c <HAL_RCC_OscConfig+0x680>)
 8003de2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003de4:	4b55      	ldr	r3, [pc, #340]	; (8003f3c <HAL_RCC_OscConfig+0x680>)
 8003de6:	4959      	ldr	r1, [pc, #356]	; (8003f4c <HAL_RCC_OscConfig+0x690>)
 8003de8:	400a      	ands	r2, r1
 8003dea:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d015      	beq.n	8003e20 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003df4:	f7ff faa4 	bl	8003340 <HAL_GetTick>
 8003df8:	0003      	movs	r3, r0
 8003dfa:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003dfc:	e009      	b.n	8003e12 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dfe:	f7ff fa9f 	bl	8003340 <HAL_GetTick>
 8003e02:	0002      	movs	r2, r0
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	4a51      	ldr	r2, [pc, #324]	; (8003f50 <HAL_RCC_OscConfig+0x694>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e0ca      	b.n	8003fa8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e12:	4b4a      	ldr	r3, [pc, #296]	; (8003f3c <HAL_RCC_OscConfig+0x680>)
 8003e14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e16:	2380      	movs	r3, #128	; 0x80
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	d0ef      	beq.n	8003dfe <HAL_RCC_OscConfig+0x542>
 8003e1e:	e014      	b.n	8003e4a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e20:	f7ff fa8e 	bl	8003340 <HAL_GetTick>
 8003e24:	0003      	movs	r3, r0
 8003e26:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e28:	e009      	b.n	8003e3e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e2a:	f7ff fa89 	bl	8003340 <HAL_GetTick>
 8003e2e:	0002      	movs	r2, r0
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	4a46      	ldr	r2, [pc, #280]	; (8003f50 <HAL_RCC_OscConfig+0x694>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e0b4      	b.n	8003fa8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e3e:	4b3f      	ldr	r3, [pc, #252]	; (8003f3c <HAL_RCC_OscConfig+0x680>)
 8003e40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e42:	2380      	movs	r3, #128	; 0x80
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	4013      	ands	r3, r2
 8003e48:	d1ef      	bne.n	8003e2a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e4a:	2323      	movs	r3, #35	; 0x23
 8003e4c:	18fb      	adds	r3, r7, r3
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d105      	bne.n	8003e60 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e54:	4b39      	ldr	r3, [pc, #228]	; (8003f3c <HAL_RCC_OscConfig+0x680>)
 8003e56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e58:	4b38      	ldr	r3, [pc, #224]	; (8003f3c <HAL_RCC_OscConfig+0x680>)
 8003e5a:	493e      	ldr	r1, [pc, #248]	; (8003f54 <HAL_RCC_OscConfig+0x698>)
 8003e5c:	400a      	ands	r2, r1
 8003e5e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d100      	bne.n	8003e6a <HAL_RCC_OscConfig+0x5ae>
 8003e68:	e09d      	b.n	8003fa6 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	2b0c      	cmp	r3, #12
 8003e6e:	d100      	bne.n	8003e72 <HAL_RCC_OscConfig+0x5b6>
 8003e70:	e076      	b.n	8003f60 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d145      	bne.n	8003f06 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e7a:	4b30      	ldr	r3, [pc, #192]	; (8003f3c <HAL_RCC_OscConfig+0x680>)
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	4b2f      	ldr	r3, [pc, #188]	; (8003f3c <HAL_RCC_OscConfig+0x680>)
 8003e80:	4935      	ldr	r1, [pc, #212]	; (8003f58 <HAL_RCC_OscConfig+0x69c>)
 8003e82:	400a      	ands	r2, r1
 8003e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e86:	f7ff fa5b 	bl	8003340 <HAL_GetTick>
 8003e8a:	0003      	movs	r3, r0
 8003e8c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e90:	f7ff fa56 	bl	8003340 <HAL_GetTick>
 8003e94:	0002      	movs	r2, r0
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e082      	b.n	8003fa8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003ea2:	4b26      	ldr	r3, [pc, #152]	; (8003f3c <HAL_RCC_OscConfig+0x680>)
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	2380      	movs	r3, #128	; 0x80
 8003ea8:	049b      	lsls	r3, r3, #18
 8003eaa:	4013      	ands	r3, r2
 8003eac:	d1f0      	bne.n	8003e90 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003eae:	4b23      	ldr	r3, [pc, #140]	; (8003f3c <HAL_RCC_OscConfig+0x680>)
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	4a2a      	ldr	r2, [pc, #168]	; (8003f5c <HAL_RCC_OscConfig+0x6a0>)
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	0019      	movs	r1, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	4b1c      	ldr	r3, [pc, #112]	; (8003f3c <HAL_RCC_OscConfig+0x680>)
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ece:	4b1b      	ldr	r3, [pc, #108]	; (8003f3c <HAL_RCC_OscConfig+0x680>)
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	4b1a      	ldr	r3, [pc, #104]	; (8003f3c <HAL_RCC_OscConfig+0x680>)
 8003ed4:	2180      	movs	r1, #128	; 0x80
 8003ed6:	0449      	lsls	r1, r1, #17
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003edc:	f7ff fa30 	bl	8003340 <HAL_GetTick>
 8003ee0:	0003      	movs	r3, r0
 8003ee2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003ee4:	e008      	b.n	8003ef8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ee6:	f7ff fa2b 	bl	8003340 <HAL_GetTick>
 8003eea:	0002      	movs	r2, r0
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e057      	b.n	8003fa8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003ef8:	4b10      	ldr	r3, [pc, #64]	; (8003f3c <HAL_RCC_OscConfig+0x680>)
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	2380      	movs	r3, #128	; 0x80
 8003efe:	049b      	lsls	r3, r3, #18
 8003f00:	4013      	ands	r3, r2
 8003f02:	d0f0      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x62a>
 8003f04:	e04f      	b.n	8003fa6 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f06:	4b0d      	ldr	r3, [pc, #52]	; (8003f3c <HAL_RCC_OscConfig+0x680>)
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	4b0c      	ldr	r3, [pc, #48]	; (8003f3c <HAL_RCC_OscConfig+0x680>)
 8003f0c:	4912      	ldr	r1, [pc, #72]	; (8003f58 <HAL_RCC_OscConfig+0x69c>)
 8003f0e:	400a      	ands	r2, r1
 8003f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f12:	f7ff fa15 	bl	8003340 <HAL_GetTick>
 8003f16:	0003      	movs	r3, r0
 8003f18:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003f1a:	e008      	b.n	8003f2e <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f1c:	f7ff fa10 	bl	8003340 <HAL_GetTick>
 8003f20:	0002      	movs	r2, r0
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e03c      	b.n	8003fa8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003f2e:	4b03      	ldr	r3, [pc, #12]	; (8003f3c <HAL_RCC_OscConfig+0x680>)
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	2380      	movs	r3, #128	; 0x80
 8003f34:	049b      	lsls	r3, r3, #18
 8003f36:	4013      	ands	r3, r2
 8003f38:	d1f0      	bne.n	8003f1c <HAL_RCC_OscConfig+0x660>
 8003f3a:	e034      	b.n	8003fa6 <HAL_RCC_OscConfig+0x6ea>
 8003f3c:	40021000 	.word	0x40021000
 8003f40:	ffff1fff 	.word	0xffff1fff
 8003f44:	fffffeff 	.word	0xfffffeff
 8003f48:	40007000 	.word	0x40007000
 8003f4c:	fffffbff 	.word	0xfffffbff
 8003f50:	00001388 	.word	0x00001388
 8003f54:	efffffff 	.word	0xefffffff
 8003f58:	feffffff 	.word	0xfeffffff
 8003f5c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d101      	bne.n	8003f6c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e01d      	b.n	8003fa8 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f6c:	4b10      	ldr	r3, [pc, #64]	; (8003fb0 <HAL_RCC_OscConfig+0x6f4>)
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	2380      	movs	r3, #128	; 0x80
 8003f76:	025b      	lsls	r3, r3, #9
 8003f78:	401a      	ands	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d10f      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003f82:	69ba      	ldr	r2, [r7, #24]
 8003f84:	23f0      	movs	r3, #240	; 0xf0
 8003f86:	039b      	lsls	r3, r3, #14
 8003f88:	401a      	ands	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d107      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003f92:	69ba      	ldr	r2, [r7, #24]
 8003f94:	23c0      	movs	r3, #192	; 0xc0
 8003f96:	041b      	lsls	r3, r3, #16
 8003f98:	401a      	ands	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d001      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e000      	b.n	8003fa8 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	0018      	movs	r0, r3
 8003faa:	46bd      	mov	sp, r7
 8003fac:	b00a      	add	sp, #40	; 0x28
 8003fae:	bdb0      	pop	{r4, r5, r7, pc}
 8003fb0:	40021000 	.word	0x40021000

08003fb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fb4:	b5b0      	push	{r4, r5, r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e128      	b.n	800421a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fc8:	4b96      	ldr	r3, [pc, #600]	; (8004224 <HAL_RCC_ClockConfig+0x270>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	4013      	ands	r3, r2
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d91e      	bls.n	8004014 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fd6:	4b93      	ldr	r3, [pc, #588]	; (8004224 <HAL_RCC_ClockConfig+0x270>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	4393      	bics	r3, r2
 8003fde:	0019      	movs	r1, r3
 8003fe0:	4b90      	ldr	r3, [pc, #576]	; (8004224 <HAL_RCC_ClockConfig+0x270>)
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003fe8:	f7ff f9aa 	bl	8003340 <HAL_GetTick>
 8003fec:	0003      	movs	r3, r0
 8003fee:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ff0:	e009      	b.n	8004006 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ff2:	f7ff f9a5 	bl	8003340 <HAL_GetTick>
 8003ff6:	0002      	movs	r2, r0
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	4a8a      	ldr	r2, [pc, #552]	; (8004228 <HAL_RCC_ClockConfig+0x274>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e109      	b.n	800421a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004006:	4b87      	ldr	r3, [pc, #540]	; (8004224 <HAL_RCC_ClockConfig+0x270>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2201      	movs	r2, #1
 800400c:	4013      	ands	r3, r2
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	429a      	cmp	r2, r3
 8004012:	d1ee      	bne.n	8003ff2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2202      	movs	r2, #2
 800401a:	4013      	ands	r3, r2
 800401c:	d009      	beq.n	8004032 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800401e:	4b83      	ldr	r3, [pc, #524]	; (800422c <HAL_RCC_ClockConfig+0x278>)
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	22f0      	movs	r2, #240	; 0xf0
 8004024:	4393      	bics	r3, r2
 8004026:	0019      	movs	r1, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	4b7f      	ldr	r3, [pc, #508]	; (800422c <HAL_RCC_ClockConfig+0x278>)
 800402e:	430a      	orrs	r2, r1
 8004030:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2201      	movs	r2, #1
 8004038:	4013      	ands	r3, r2
 800403a:	d100      	bne.n	800403e <HAL_RCC_ClockConfig+0x8a>
 800403c:	e089      	b.n	8004152 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	2b02      	cmp	r3, #2
 8004044:	d107      	bne.n	8004056 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004046:	4b79      	ldr	r3, [pc, #484]	; (800422c <HAL_RCC_ClockConfig+0x278>)
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	2380      	movs	r3, #128	; 0x80
 800404c:	029b      	lsls	r3, r3, #10
 800404e:	4013      	ands	r3, r2
 8004050:	d120      	bne.n	8004094 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e0e1      	b.n	800421a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	2b03      	cmp	r3, #3
 800405c:	d107      	bne.n	800406e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800405e:	4b73      	ldr	r3, [pc, #460]	; (800422c <HAL_RCC_ClockConfig+0x278>)
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	2380      	movs	r3, #128	; 0x80
 8004064:	049b      	lsls	r3, r3, #18
 8004066:	4013      	ands	r3, r2
 8004068:	d114      	bne.n	8004094 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e0d5      	b.n	800421a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	2b01      	cmp	r3, #1
 8004074:	d106      	bne.n	8004084 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004076:	4b6d      	ldr	r3, [pc, #436]	; (800422c <HAL_RCC_ClockConfig+0x278>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2204      	movs	r2, #4
 800407c:	4013      	ands	r3, r2
 800407e:	d109      	bne.n	8004094 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e0ca      	b.n	800421a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004084:	4b69      	ldr	r3, [pc, #420]	; (800422c <HAL_RCC_ClockConfig+0x278>)
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	2380      	movs	r3, #128	; 0x80
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4013      	ands	r3, r2
 800408e:	d101      	bne.n	8004094 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e0c2      	b.n	800421a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004094:	4b65      	ldr	r3, [pc, #404]	; (800422c <HAL_RCC_ClockConfig+0x278>)
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	2203      	movs	r2, #3
 800409a:	4393      	bics	r3, r2
 800409c:	0019      	movs	r1, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	4b62      	ldr	r3, [pc, #392]	; (800422c <HAL_RCC_ClockConfig+0x278>)
 80040a4:	430a      	orrs	r2, r1
 80040a6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040a8:	f7ff f94a 	bl	8003340 <HAL_GetTick>
 80040ac:	0003      	movs	r3, r0
 80040ae:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d111      	bne.n	80040dc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80040b8:	e009      	b.n	80040ce <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040ba:	f7ff f941 	bl	8003340 <HAL_GetTick>
 80040be:	0002      	movs	r2, r0
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	4a58      	ldr	r2, [pc, #352]	; (8004228 <HAL_RCC_ClockConfig+0x274>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e0a5      	b.n	800421a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80040ce:	4b57      	ldr	r3, [pc, #348]	; (800422c <HAL_RCC_ClockConfig+0x278>)
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	220c      	movs	r2, #12
 80040d4:	4013      	ands	r3, r2
 80040d6:	2b08      	cmp	r3, #8
 80040d8:	d1ef      	bne.n	80040ba <HAL_RCC_ClockConfig+0x106>
 80040da:	e03a      	b.n	8004152 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	2b03      	cmp	r3, #3
 80040e2:	d111      	bne.n	8004108 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040e4:	e009      	b.n	80040fa <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040e6:	f7ff f92b 	bl	8003340 <HAL_GetTick>
 80040ea:	0002      	movs	r2, r0
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	4a4d      	ldr	r2, [pc, #308]	; (8004228 <HAL_RCC_ClockConfig+0x274>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e08f      	b.n	800421a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040fa:	4b4c      	ldr	r3, [pc, #304]	; (800422c <HAL_RCC_ClockConfig+0x278>)
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	220c      	movs	r2, #12
 8004100:	4013      	ands	r3, r2
 8004102:	2b0c      	cmp	r3, #12
 8004104:	d1ef      	bne.n	80040e6 <HAL_RCC_ClockConfig+0x132>
 8004106:	e024      	b.n	8004152 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d11b      	bne.n	8004148 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004110:	e009      	b.n	8004126 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004112:	f7ff f915 	bl	8003340 <HAL_GetTick>
 8004116:	0002      	movs	r2, r0
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	4a42      	ldr	r2, [pc, #264]	; (8004228 <HAL_RCC_ClockConfig+0x274>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e079      	b.n	800421a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004126:	4b41      	ldr	r3, [pc, #260]	; (800422c <HAL_RCC_ClockConfig+0x278>)
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	220c      	movs	r2, #12
 800412c:	4013      	ands	r3, r2
 800412e:	2b04      	cmp	r3, #4
 8004130:	d1ef      	bne.n	8004112 <HAL_RCC_ClockConfig+0x15e>
 8004132:	e00e      	b.n	8004152 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004134:	f7ff f904 	bl	8003340 <HAL_GetTick>
 8004138:	0002      	movs	r2, r0
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	4a3a      	ldr	r2, [pc, #232]	; (8004228 <HAL_RCC_ClockConfig+0x274>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d901      	bls.n	8004148 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e068      	b.n	800421a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004148:	4b38      	ldr	r3, [pc, #224]	; (800422c <HAL_RCC_ClockConfig+0x278>)
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	220c      	movs	r2, #12
 800414e:	4013      	ands	r3, r2
 8004150:	d1f0      	bne.n	8004134 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004152:	4b34      	ldr	r3, [pc, #208]	; (8004224 <HAL_RCC_ClockConfig+0x270>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2201      	movs	r2, #1
 8004158:	4013      	ands	r3, r2
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	429a      	cmp	r2, r3
 800415e:	d21e      	bcs.n	800419e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004160:	4b30      	ldr	r3, [pc, #192]	; (8004224 <HAL_RCC_ClockConfig+0x270>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2201      	movs	r2, #1
 8004166:	4393      	bics	r3, r2
 8004168:	0019      	movs	r1, r3
 800416a:	4b2e      	ldr	r3, [pc, #184]	; (8004224 <HAL_RCC_ClockConfig+0x270>)
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004172:	f7ff f8e5 	bl	8003340 <HAL_GetTick>
 8004176:	0003      	movs	r3, r0
 8004178:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800417a:	e009      	b.n	8004190 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800417c:	f7ff f8e0 	bl	8003340 <HAL_GetTick>
 8004180:	0002      	movs	r2, r0
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	4a28      	ldr	r2, [pc, #160]	; (8004228 <HAL_RCC_ClockConfig+0x274>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d901      	bls.n	8004190 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e044      	b.n	800421a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004190:	4b24      	ldr	r3, [pc, #144]	; (8004224 <HAL_RCC_ClockConfig+0x270>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2201      	movs	r2, #1
 8004196:	4013      	ands	r3, r2
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	429a      	cmp	r2, r3
 800419c:	d1ee      	bne.n	800417c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2204      	movs	r2, #4
 80041a4:	4013      	ands	r3, r2
 80041a6:	d009      	beq.n	80041bc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041a8:	4b20      	ldr	r3, [pc, #128]	; (800422c <HAL_RCC_ClockConfig+0x278>)
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	4a20      	ldr	r2, [pc, #128]	; (8004230 <HAL_RCC_ClockConfig+0x27c>)
 80041ae:	4013      	ands	r3, r2
 80041b0:	0019      	movs	r1, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68da      	ldr	r2, [r3, #12]
 80041b6:	4b1d      	ldr	r3, [pc, #116]	; (800422c <HAL_RCC_ClockConfig+0x278>)
 80041b8:	430a      	orrs	r2, r1
 80041ba:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2208      	movs	r2, #8
 80041c2:	4013      	ands	r3, r2
 80041c4:	d00a      	beq.n	80041dc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041c6:	4b19      	ldr	r3, [pc, #100]	; (800422c <HAL_RCC_ClockConfig+0x278>)
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	4a1a      	ldr	r2, [pc, #104]	; (8004234 <HAL_RCC_ClockConfig+0x280>)
 80041cc:	4013      	ands	r3, r2
 80041ce:	0019      	movs	r1, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	00da      	lsls	r2, r3, #3
 80041d6:	4b15      	ldr	r3, [pc, #84]	; (800422c <HAL_RCC_ClockConfig+0x278>)
 80041d8:	430a      	orrs	r2, r1
 80041da:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041dc:	f000 f832 	bl	8004244 <HAL_RCC_GetSysClockFreq>
 80041e0:	0001      	movs	r1, r0
 80041e2:	4b12      	ldr	r3, [pc, #72]	; (800422c <HAL_RCC_ClockConfig+0x278>)
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	091b      	lsrs	r3, r3, #4
 80041e8:	220f      	movs	r2, #15
 80041ea:	4013      	ands	r3, r2
 80041ec:	4a12      	ldr	r2, [pc, #72]	; (8004238 <HAL_RCC_ClockConfig+0x284>)
 80041ee:	5cd3      	ldrb	r3, [r2, r3]
 80041f0:	000a      	movs	r2, r1
 80041f2:	40da      	lsrs	r2, r3
 80041f4:	4b11      	ldr	r3, [pc, #68]	; (800423c <HAL_RCC_ClockConfig+0x288>)
 80041f6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80041f8:	4b11      	ldr	r3, [pc, #68]	; (8004240 <HAL_RCC_ClockConfig+0x28c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	250b      	movs	r5, #11
 80041fe:	197c      	adds	r4, r7, r5
 8004200:	0018      	movs	r0, r3
 8004202:	f7fe f8e1 	bl	80023c8 <HAL_InitTick>
 8004206:	0003      	movs	r3, r0
 8004208:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800420a:	197b      	adds	r3, r7, r5
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d002      	beq.n	8004218 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004212:	197b      	adds	r3, r7, r5
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	e000      	b.n	800421a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	0018      	movs	r0, r3
 800421c:	46bd      	mov	sp, r7
 800421e:	b004      	add	sp, #16
 8004220:	bdb0      	pop	{r4, r5, r7, pc}
 8004222:	46c0      	nop			; (mov r8, r8)
 8004224:	40022000 	.word	0x40022000
 8004228:	00001388 	.word	0x00001388
 800422c:	40021000 	.word	0x40021000
 8004230:	fffff8ff 	.word	0xfffff8ff
 8004234:	ffffc7ff 	.word	0xffffc7ff
 8004238:	08009ecc 	.word	0x08009ecc
 800423c:	20000000 	.word	0x20000000
 8004240:	20000020 	.word	0x20000020

08004244 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004244:	b5b0      	push	{r4, r5, r7, lr}
 8004246:	b08e      	sub	sp, #56	; 0x38
 8004248:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800424a:	4b4c      	ldr	r3, [pc, #304]	; (800437c <HAL_RCC_GetSysClockFreq+0x138>)
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004250:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004252:	230c      	movs	r3, #12
 8004254:	4013      	ands	r3, r2
 8004256:	2b0c      	cmp	r3, #12
 8004258:	d014      	beq.n	8004284 <HAL_RCC_GetSysClockFreq+0x40>
 800425a:	d900      	bls.n	800425e <HAL_RCC_GetSysClockFreq+0x1a>
 800425c:	e07b      	b.n	8004356 <HAL_RCC_GetSysClockFreq+0x112>
 800425e:	2b04      	cmp	r3, #4
 8004260:	d002      	beq.n	8004268 <HAL_RCC_GetSysClockFreq+0x24>
 8004262:	2b08      	cmp	r3, #8
 8004264:	d00b      	beq.n	800427e <HAL_RCC_GetSysClockFreq+0x3a>
 8004266:	e076      	b.n	8004356 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004268:	4b44      	ldr	r3, [pc, #272]	; (800437c <HAL_RCC_GetSysClockFreq+0x138>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2210      	movs	r2, #16
 800426e:	4013      	ands	r3, r2
 8004270:	d002      	beq.n	8004278 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004272:	4b43      	ldr	r3, [pc, #268]	; (8004380 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004274:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004276:	e07c      	b.n	8004372 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8004278:	4b42      	ldr	r3, [pc, #264]	; (8004384 <HAL_RCC_GetSysClockFreq+0x140>)
 800427a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800427c:	e079      	b.n	8004372 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800427e:	4b42      	ldr	r3, [pc, #264]	; (8004388 <HAL_RCC_GetSysClockFreq+0x144>)
 8004280:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004282:	e076      	b.n	8004372 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004286:	0c9a      	lsrs	r2, r3, #18
 8004288:	230f      	movs	r3, #15
 800428a:	401a      	ands	r2, r3
 800428c:	4b3f      	ldr	r3, [pc, #252]	; (800438c <HAL_RCC_GetSysClockFreq+0x148>)
 800428e:	5c9b      	ldrb	r3, [r3, r2]
 8004290:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004294:	0d9a      	lsrs	r2, r3, #22
 8004296:	2303      	movs	r3, #3
 8004298:	4013      	ands	r3, r2
 800429a:	3301      	adds	r3, #1
 800429c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800429e:	4b37      	ldr	r3, [pc, #220]	; (800437c <HAL_RCC_GetSysClockFreq+0x138>)
 80042a0:	68da      	ldr	r2, [r3, #12]
 80042a2:	2380      	movs	r3, #128	; 0x80
 80042a4:	025b      	lsls	r3, r3, #9
 80042a6:	4013      	ands	r3, r2
 80042a8:	d01a      	beq.n	80042e0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80042aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ac:	61bb      	str	r3, [r7, #24]
 80042ae:	2300      	movs	r3, #0
 80042b0:	61fb      	str	r3, [r7, #28]
 80042b2:	4a35      	ldr	r2, [pc, #212]	; (8004388 <HAL_RCC_GetSysClockFreq+0x144>)
 80042b4:	2300      	movs	r3, #0
 80042b6:	69b8      	ldr	r0, [r7, #24]
 80042b8:	69f9      	ldr	r1, [r7, #28]
 80042ba:	f7fb ffd1 	bl	8000260 <__aeabi_lmul>
 80042be:	0002      	movs	r2, r0
 80042c0:	000b      	movs	r3, r1
 80042c2:	0010      	movs	r0, r2
 80042c4:	0019      	movs	r1, r3
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	613b      	str	r3, [r7, #16]
 80042ca:	2300      	movs	r3, #0
 80042cc:	617b      	str	r3, [r7, #20]
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	f7fb ffa5 	bl	8000220 <__aeabi_uldivmod>
 80042d6:	0002      	movs	r2, r0
 80042d8:	000b      	movs	r3, r1
 80042da:	0013      	movs	r3, r2
 80042dc:	637b      	str	r3, [r7, #52]	; 0x34
 80042de:	e037      	b.n	8004350 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80042e0:	4b26      	ldr	r3, [pc, #152]	; (800437c <HAL_RCC_GetSysClockFreq+0x138>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2210      	movs	r2, #16
 80042e6:	4013      	ands	r3, r2
 80042e8:	d01a      	beq.n	8004320 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80042ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ec:	60bb      	str	r3, [r7, #8]
 80042ee:	2300      	movs	r3, #0
 80042f0:	60fb      	str	r3, [r7, #12]
 80042f2:	4a23      	ldr	r2, [pc, #140]	; (8004380 <HAL_RCC_GetSysClockFreq+0x13c>)
 80042f4:	2300      	movs	r3, #0
 80042f6:	68b8      	ldr	r0, [r7, #8]
 80042f8:	68f9      	ldr	r1, [r7, #12]
 80042fa:	f7fb ffb1 	bl	8000260 <__aeabi_lmul>
 80042fe:	0002      	movs	r2, r0
 8004300:	000b      	movs	r3, r1
 8004302:	0010      	movs	r0, r2
 8004304:	0019      	movs	r1, r3
 8004306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004308:	603b      	str	r3, [r7, #0]
 800430a:	2300      	movs	r3, #0
 800430c:	607b      	str	r3, [r7, #4]
 800430e:	683a      	ldr	r2, [r7, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f7fb ff85 	bl	8000220 <__aeabi_uldivmod>
 8004316:	0002      	movs	r2, r0
 8004318:	000b      	movs	r3, r1
 800431a:	0013      	movs	r3, r2
 800431c:	637b      	str	r3, [r7, #52]	; 0x34
 800431e:	e017      	b.n	8004350 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004322:	0018      	movs	r0, r3
 8004324:	2300      	movs	r3, #0
 8004326:	0019      	movs	r1, r3
 8004328:	4a16      	ldr	r2, [pc, #88]	; (8004384 <HAL_RCC_GetSysClockFreq+0x140>)
 800432a:	2300      	movs	r3, #0
 800432c:	f7fb ff98 	bl	8000260 <__aeabi_lmul>
 8004330:	0002      	movs	r2, r0
 8004332:	000b      	movs	r3, r1
 8004334:	0010      	movs	r0, r2
 8004336:	0019      	movs	r1, r3
 8004338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433a:	001c      	movs	r4, r3
 800433c:	2300      	movs	r3, #0
 800433e:	001d      	movs	r5, r3
 8004340:	0022      	movs	r2, r4
 8004342:	002b      	movs	r3, r5
 8004344:	f7fb ff6c 	bl	8000220 <__aeabi_uldivmod>
 8004348:	0002      	movs	r2, r0
 800434a:	000b      	movs	r3, r1
 800434c:	0013      	movs	r3, r2
 800434e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8004350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004352:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004354:	e00d      	b.n	8004372 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004356:	4b09      	ldr	r3, [pc, #36]	; (800437c <HAL_RCC_GetSysClockFreq+0x138>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	0b5b      	lsrs	r3, r3, #13
 800435c:	2207      	movs	r2, #7
 800435e:	4013      	ands	r3, r2
 8004360:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004362:	6a3b      	ldr	r3, [r7, #32]
 8004364:	3301      	adds	r3, #1
 8004366:	2280      	movs	r2, #128	; 0x80
 8004368:	0212      	lsls	r2, r2, #8
 800436a:	409a      	lsls	r2, r3
 800436c:	0013      	movs	r3, r2
 800436e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004370:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004374:	0018      	movs	r0, r3
 8004376:	46bd      	mov	sp, r7
 8004378:	b00e      	add	sp, #56	; 0x38
 800437a:	bdb0      	pop	{r4, r5, r7, pc}
 800437c:	40021000 	.word	0x40021000
 8004380:	003d0900 	.word	0x003d0900
 8004384:	00f42400 	.word	0x00f42400
 8004388:	007a1200 	.word	0x007a1200
 800438c:	08009ee4 	.word	0x08009ee4

08004390 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004394:	4b02      	ldr	r3, [pc, #8]	; (80043a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004396:	681b      	ldr	r3, [r3, #0]
}
 8004398:	0018      	movs	r0, r3
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	46c0      	nop			; (mov r8, r8)
 80043a0:	20000000 	.word	0x20000000

080043a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043a8:	f7ff fff2 	bl	8004390 <HAL_RCC_GetHCLKFreq>
 80043ac:	0001      	movs	r1, r0
 80043ae:	4b06      	ldr	r3, [pc, #24]	; (80043c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	0a1b      	lsrs	r3, r3, #8
 80043b4:	2207      	movs	r2, #7
 80043b6:	4013      	ands	r3, r2
 80043b8:	4a04      	ldr	r2, [pc, #16]	; (80043cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80043ba:	5cd3      	ldrb	r3, [r2, r3]
 80043bc:	40d9      	lsrs	r1, r3
 80043be:	000b      	movs	r3, r1
}
 80043c0:	0018      	movs	r0, r3
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	46c0      	nop			; (mov r8, r8)
 80043c8:	40021000 	.word	0x40021000
 80043cc:	08009edc 	.word	0x08009edc

080043d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80043d4:	f7ff ffdc 	bl	8004390 <HAL_RCC_GetHCLKFreq>
 80043d8:	0001      	movs	r1, r0
 80043da:	4b06      	ldr	r3, [pc, #24]	; (80043f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	0adb      	lsrs	r3, r3, #11
 80043e0:	2207      	movs	r2, #7
 80043e2:	4013      	ands	r3, r2
 80043e4:	4a04      	ldr	r2, [pc, #16]	; (80043f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80043e6:	5cd3      	ldrb	r3, [r2, r3]
 80043e8:	40d9      	lsrs	r1, r3
 80043ea:	000b      	movs	r3, r1
}
 80043ec:	0018      	movs	r0, r3
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	46c0      	nop			; (mov r8, r8)
 80043f4:	40021000 	.word	0x40021000
 80043f8:	08009edc 	.word	0x08009edc

080043fc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	220f      	movs	r2, #15
 800440a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800440c:	4b12      	ldr	r3, [pc, #72]	; (8004458 <HAL_RCC_GetClockConfig+0x5c>)
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	2203      	movs	r2, #3
 8004412:	401a      	ands	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004418:	4b0f      	ldr	r3, [pc, #60]	; (8004458 <HAL_RCC_GetClockConfig+0x5c>)
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	22f0      	movs	r2, #240	; 0xf0
 800441e:	401a      	ands	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004424:	4b0c      	ldr	r3, [pc, #48]	; (8004458 <HAL_RCC_GetClockConfig+0x5c>)
 8004426:	68da      	ldr	r2, [r3, #12]
 8004428:	23e0      	movs	r3, #224	; 0xe0
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	401a      	ands	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004432:	4b09      	ldr	r3, [pc, #36]	; (8004458 <HAL_RCC_GetClockConfig+0x5c>)
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	08da      	lsrs	r2, r3, #3
 8004438:	23e0      	movs	r3, #224	; 0xe0
 800443a:	00db      	lsls	r3, r3, #3
 800443c:	401a      	ands	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004442:	4b06      	ldr	r3, [pc, #24]	; (800445c <HAL_RCC_GetClockConfig+0x60>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2201      	movs	r2, #1
 8004448:	401a      	ands	r2, r3
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	601a      	str	r2, [r3, #0]
}
 800444e:	46c0      	nop			; (mov r8, r8)
 8004450:	46bd      	mov	sp, r7
 8004452:	b002      	add	sp, #8
 8004454:	bd80      	pop	{r7, pc}
 8004456:	46c0      	nop			; (mov r8, r8)
 8004458:	40021000 	.word	0x40021000
 800445c:	40022000 	.word	0x40022000

08004460 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004468:	2017      	movs	r0, #23
 800446a:	183b      	adds	r3, r7, r0
 800446c:	2200      	movs	r2, #0
 800446e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2220      	movs	r2, #32
 8004476:	4013      	ands	r3, r2
 8004478:	d100      	bne.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800447a:	e0c2      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800447c:	4b81      	ldr	r3, [pc, #516]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800447e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004480:	2380      	movs	r3, #128	; 0x80
 8004482:	055b      	lsls	r3, r3, #21
 8004484:	4013      	ands	r3, r2
 8004486:	d109      	bne.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004488:	4b7e      	ldr	r3, [pc, #504]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800448a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800448c:	4b7d      	ldr	r3, [pc, #500]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800448e:	2180      	movs	r1, #128	; 0x80
 8004490:	0549      	lsls	r1, r1, #21
 8004492:	430a      	orrs	r2, r1
 8004494:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004496:	183b      	adds	r3, r7, r0
 8004498:	2201      	movs	r2, #1
 800449a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800449c:	4b7a      	ldr	r3, [pc, #488]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	2380      	movs	r3, #128	; 0x80
 80044a2:	005b      	lsls	r3, r3, #1
 80044a4:	4013      	ands	r3, r2
 80044a6:	d11a      	bne.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044a8:	4b77      	ldr	r3, [pc, #476]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	4b76      	ldr	r3, [pc, #472]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80044ae:	2180      	movs	r1, #128	; 0x80
 80044b0:	0049      	lsls	r1, r1, #1
 80044b2:	430a      	orrs	r2, r1
 80044b4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044b6:	f7fe ff43 	bl	8003340 <HAL_GetTick>
 80044ba:	0003      	movs	r3, r0
 80044bc:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044be:	e008      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044c0:	f7fe ff3e 	bl	8003340 <HAL_GetTick>
 80044c4:	0002      	movs	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b64      	cmp	r3, #100	; 0x64
 80044cc:	d901      	bls.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e0d4      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d2:	4b6d      	ldr	r3, [pc, #436]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	2380      	movs	r3, #128	; 0x80
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	4013      	ands	r3, r2
 80044dc:	d0f0      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80044de:	4b69      	ldr	r3, [pc, #420]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	23c0      	movs	r3, #192	; 0xc0
 80044e4:	039b      	lsls	r3, r3, #14
 80044e6:	4013      	ands	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	23c0      	movs	r3, #192	; 0xc0
 80044f0:	039b      	lsls	r3, r3, #14
 80044f2:	4013      	ands	r3, r2
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d013      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	23c0      	movs	r3, #192	; 0xc0
 8004500:	029b      	lsls	r3, r3, #10
 8004502:	401a      	ands	r2, r3
 8004504:	23c0      	movs	r3, #192	; 0xc0
 8004506:	029b      	lsls	r3, r3, #10
 8004508:	429a      	cmp	r2, r3
 800450a:	d10a      	bne.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800450c:	4b5d      	ldr	r3, [pc, #372]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	2380      	movs	r3, #128	; 0x80
 8004512:	029b      	lsls	r3, r3, #10
 8004514:	401a      	ands	r2, r3
 8004516:	2380      	movs	r3, #128	; 0x80
 8004518:	029b      	lsls	r3, r3, #10
 800451a:	429a      	cmp	r2, r3
 800451c:	d101      	bne.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e0ac      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004522:	4b58      	ldr	r3, [pc, #352]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004524:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004526:	23c0      	movs	r3, #192	; 0xc0
 8004528:	029b      	lsls	r3, r3, #10
 800452a:	4013      	ands	r3, r2
 800452c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d03b      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	23c0      	movs	r3, #192	; 0xc0
 800453a:	029b      	lsls	r3, r3, #10
 800453c:	4013      	ands	r3, r2
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	429a      	cmp	r2, r3
 8004542:	d033      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2220      	movs	r2, #32
 800454a:	4013      	ands	r3, r2
 800454c:	d02e      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800454e:	4b4d      	ldr	r3, [pc, #308]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004552:	4a4e      	ldr	r2, [pc, #312]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004554:	4013      	ands	r3, r2
 8004556:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004558:	4b4a      	ldr	r3, [pc, #296]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800455a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800455c:	4b49      	ldr	r3, [pc, #292]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800455e:	2180      	movs	r1, #128	; 0x80
 8004560:	0309      	lsls	r1, r1, #12
 8004562:	430a      	orrs	r2, r1
 8004564:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004566:	4b47      	ldr	r3, [pc, #284]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004568:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800456a:	4b46      	ldr	r3, [pc, #280]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800456c:	4948      	ldr	r1, [pc, #288]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800456e:	400a      	ands	r2, r1
 8004570:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004572:	4b44      	ldr	r3, [pc, #272]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	2380      	movs	r3, #128	; 0x80
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	4013      	ands	r3, r2
 8004580:	d014      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004582:	f7fe fedd 	bl	8003340 <HAL_GetTick>
 8004586:	0003      	movs	r3, r0
 8004588:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800458a:	e009      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800458c:	f7fe fed8 	bl	8003340 <HAL_GetTick>
 8004590:	0002      	movs	r2, r0
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	4a3f      	ldr	r2, [pc, #252]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d901      	bls.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e06d      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045a0:	4b38      	ldr	r3, [pc, #224]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80045a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045a4:	2380      	movs	r3, #128	; 0x80
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4013      	ands	r3, r2
 80045aa:	d0ef      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	23c0      	movs	r3, #192	; 0xc0
 80045b2:	029b      	lsls	r3, r3, #10
 80045b4:	401a      	ands	r2, r3
 80045b6:	23c0      	movs	r3, #192	; 0xc0
 80045b8:	029b      	lsls	r3, r3, #10
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d10c      	bne.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80045be:	4b31      	ldr	r3, [pc, #196]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a35      	ldr	r2, [pc, #212]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80045c4:	4013      	ands	r3, r2
 80045c6:	0019      	movs	r1, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685a      	ldr	r2, [r3, #4]
 80045cc:	23c0      	movs	r3, #192	; 0xc0
 80045ce:	039b      	lsls	r3, r3, #14
 80045d0:	401a      	ands	r2, r3
 80045d2:	4b2c      	ldr	r3, [pc, #176]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80045d4:	430a      	orrs	r2, r1
 80045d6:	601a      	str	r2, [r3, #0]
 80045d8:	4b2a      	ldr	r3, [pc, #168]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80045da:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	23c0      	movs	r3, #192	; 0xc0
 80045e2:	029b      	lsls	r3, r3, #10
 80045e4:	401a      	ands	r2, r3
 80045e6:	4b27      	ldr	r3, [pc, #156]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80045e8:	430a      	orrs	r2, r1
 80045ea:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80045ec:	2317      	movs	r3, #23
 80045ee:	18fb      	adds	r3, r7, r3
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d105      	bne.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045f6:	4b23      	ldr	r3, [pc, #140]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80045f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045fa:	4b22      	ldr	r3, [pc, #136]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80045fc:	4927      	ldr	r1, [pc, #156]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80045fe:	400a      	ands	r2, r1
 8004600:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2202      	movs	r2, #2
 8004608:	4013      	ands	r3, r2
 800460a:	d009      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800460c:	4b1d      	ldr	r3, [pc, #116]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800460e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004610:	220c      	movs	r2, #12
 8004612:	4393      	bics	r3, r2
 8004614:	0019      	movs	r1, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	689a      	ldr	r2, [r3, #8]
 800461a:	4b1a      	ldr	r3, [pc, #104]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800461c:	430a      	orrs	r2, r1
 800461e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2204      	movs	r2, #4
 8004626:	4013      	ands	r3, r2
 8004628:	d009      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800462a:	4b16      	ldr	r3, [pc, #88]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800462c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800462e:	4a1c      	ldr	r2, [pc, #112]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004630:	4013      	ands	r3, r2
 8004632:	0019      	movs	r1, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68da      	ldr	r2, [r3, #12]
 8004638:	4b12      	ldr	r3, [pc, #72]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800463a:	430a      	orrs	r2, r1
 800463c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2208      	movs	r2, #8
 8004644:	4013      	ands	r3, r2
 8004646:	d009      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004648:	4b0e      	ldr	r3, [pc, #56]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800464a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800464c:	4a15      	ldr	r2, [pc, #84]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800464e:	4013      	ands	r3, r2
 8004650:	0019      	movs	r1, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	691a      	ldr	r2, [r3, #16]
 8004656:	4b0b      	ldr	r3, [pc, #44]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004658:	430a      	orrs	r2, r1
 800465a:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2280      	movs	r2, #128	; 0x80
 8004662:	4013      	ands	r3, r2
 8004664:	d009      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004666:	4b07      	ldr	r3, [pc, #28]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800466a:	4a0f      	ldr	r2, [pc, #60]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800466c:	4013      	ands	r3, r2
 800466e:	0019      	movs	r1, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	695a      	ldr	r2, [r3, #20]
 8004674:	4b03      	ldr	r3, [pc, #12]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004676:	430a      	orrs	r2, r1
 8004678:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	0018      	movs	r0, r3
 800467e:	46bd      	mov	sp, r7
 8004680:	b006      	add	sp, #24
 8004682:	bd80      	pop	{r7, pc}
 8004684:	40021000 	.word	0x40021000
 8004688:	40007000 	.word	0x40007000
 800468c:	fffcffff 	.word	0xfffcffff
 8004690:	fff7ffff 	.word	0xfff7ffff
 8004694:	00001388 	.word	0x00001388
 8004698:	ffcfffff 	.word	0xffcfffff
 800469c:	efffffff 	.word	0xefffffff
 80046a0:	fffff3ff 	.word	0xfffff3ff
 80046a4:	ffffcfff 	.word	0xffffcfff
 80046a8:	fff3ffff 	.word	0xfff3ffff

080046ac <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e08e      	b.n	80047dc <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2221      	movs	r2, #33	; 0x21
 80046c2:	5c9b      	ldrb	r3, [r3, r2]
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d107      	bne.n	80046da <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2220      	movs	r2, #32
 80046ce:	2100      	movs	r1, #0
 80046d0:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	0018      	movs	r0, r3
 80046d6:	f7fd fe13 	bl	8002300 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2221      	movs	r2, #33	; 0x21
 80046de:	2102      	movs	r1, #2
 80046e0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	22ca      	movs	r2, #202	; 0xca
 80046e8:	625a      	str	r2, [r3, #36]	; 0x24
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2253      	movs	r2, #83	; 0x53
 80046f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	0018      	movs	r0, r3
 80046f6:	f000 fc54 	bl	8004fa2 <RTC_EnterInitMode>
 80046fa:	1e03      	subs	r3, r0, #0
 80046fc:	d009      	beq.n	8004712 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	22ff      	movs	r2, #255	; 0xff
 8004704:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2221      	movs	r2, #33	; 0x21
 800470a:	2104      	movs	r1, #4
 800470c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e064      	b.n	80047dc <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	689a      	ldr	r2, [r3, #8]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4931      	ldr	r1, [pc, #196]	; (80047e4 <HAL_RTC_Init+0x138>)
 800471e:	400a      	ands	r2, r1
 8004720:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	6899      	ldr	r1, [r3, #8]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	431a      	orrs	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	431a      	orrs	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	430a      	orrs	r2, r1
 800473e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	68d2      	ldr	r2, [r2, #12]
 8004748:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	6919      	ldr	r1, [r3, #16]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	041a      	lsls	r2, r3, #16
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68da      	ldr	r2, [r3, #12]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2180      	movs	r1, #128	; 0x80
 800476a:	438a      	bics	r2, r1
 800476c:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2103      	movs	r1, #3
 800477a:	438a      	bics	r2, r1
 800477c:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	69da      	ldr	r2, [r3, #28]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	431a      	orrs	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	2220      	movs	r2, #32
 800479e:	4013      	ands	r3, r2
 80047a0:	d113      	bne.n	80047ca <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	0018      	movs	r0, r3
 80047a6:	f000 fbd5 	bl	8004f54 <HAL_RTC_WaitForSynchro>
 80047aa:	1e03      	subs	r3, r0, #0
 80047ac:	d00d      	beq.n	80047ca <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	22ff      	movs	r2, #255	; 0xff
 80047b4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2221      	movs	r2, #33	; 0x21
 80047ba:	2104      	movs	r1, #4
 80047bc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2220      	movs	r2, #32
 80047c2:	2100      	movs	r1, #0
 80047c4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e008      	b.n	80047dc <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	22ff      	movs	r2, #255	; 0xff
 80047d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2221      	movs	r2, #33	; 0x21
 80047d6:	2101      	movs	r1, #1
 80047d8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80047da:	2300      	movs	r3, #0
  }
}
 80047dc:	0018      	movs	r0, r3
 80047de:	46bd      	mov	sp, r7
 80047e0:	b002      	add	sp, #8
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	ff8fffbf 	.word	0xff8fffbf

080047e8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80047e8:	b590      	push	{r4, r7, lr}
 80047ea:	b087      	sub	sp, #28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2220      	movs	r2, #32
 80047f8:	5c9b      	ldrb	r3, [r3, r2]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d101      	bne.n	8004802 <HAL_RTC_SetTime+0x1a>
 80047fe:	2302      	movs	r3, #2
 8004800:	e0ad      	b.n	800495e <HAL_RTC_SetTime+0x176>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2220      	movs	r2, #32
 8004806:	2101      	movs	r1, #1
 8004808:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2221      	movs	r2, #33	; 0x21
 800480e:	2102      	movs	r1, #2
 8004810:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d125      	bne.n	8004864 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	2240      	movs	r2, #64	; 0x40
 8004820:	4013      	ands	r3, r2
 8004822:	d102      	bne.n	800482a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	2200      	movs	r2, #0
 8004828:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	0018      	movs	r0, r3
 8004830:	f000 fbe1 	bl	8004ff6 <RTC_ByteToBcd2>
 8004834:	0003      	movs	r3, r0
 8004836:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	785b      	ldrb	r3, [r3, #1]
 800483c:	0018      	movs	r0, r3
 800483e:	f000 fbda 	bl	8004ff6 <RTC_ByteToBcd2>
 8004842:	0003      	movs	r3, r0
 8004844:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004846:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	789b      	ldrb	r3, [r3, #2]
 800484c:	0018      	movs	r0, r3
 800484e:	f000 fbd2 	bl	8004ff6 <RTC_ByteToBcd2>
 8004852:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004854:	0022      	movs	r2, r4
 8004856:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	78db      	ldrb	r3, [r3, #3]
 800485c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800485e:	4313      	orrs	r3, r2
 8004860:	617b      	str	r3, [r7, #20]
 8004862:	e017      	b.n	8004894 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	2240      	movs	r2, #64	; 0x40
 800486c:	4013      	ands	r3, r2
 800486e:	d102      	bne.n	8004876 <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	2200      	movs	r2, #0
 8004874:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	785b      	ldrb	r3, [r3, #1]
 8004880:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004882:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004888:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	78db      	ldrb	r3, [r3, #3]
 800488e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004890:	4313      	orrs	r3, r2
 8004892:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	22ca      	movs	r2, #202	; 0xca
 800489a:	625a      	str	r2, [r3, #36]	; 0x24
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2253      	movs	r2, #83	; 0x53
 80048a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	0018      	movs	r0, r3
 80048a8:	f000 fb7b 	bl	8004fa2 <RTC_EnterInitMode>
 80048ac:	1e03      	subs	r3, r0, #0
 80048ae:	d00d      	beq.n	80048cc <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	22ff      	movs	r2, #255	; 0xff
 80048b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2221      	movs	r2, #33	; 0x21
 80048bc:	2104      	movs	r1, #4
 80048be:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2220      	movs	r2, #32
 80048c4:	2100      	movs	r1, #0
 80048c6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e048      	b.n	800495e <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	4925      	ldr	r1, [pc, #148]	; (8004968 <HAL_RTC_SetTime+0x180>)
 80048d4:	400a      	ands	r2, r1
 80048d6:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	689a      	ldr	r2, [r3, #8]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4922      	ldr	r1, [pc, #136]	; (800496c <HAL_RTC_SetTime+0x184>)
 80048e4:	400a      	ands	r2, r1
 80048e6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6899      	ldr	r1, [r3, #8]
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	68da      	ldr	r2, [r3, #12]
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	431a      	orrs	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	430a      	orrs	r2, r1
 80048fe:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68da      	ldr	r2, [r3, #12]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2180      	movs	r1, #128	; 0x80
 800490c:	438a      	bics	r2, r1
 800490e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	2220      	movs	r2, #32
 8004918:	4013      	ands	r3, r2
 800491a:	d113      	bne.n	8004944 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	0018      	movs	r0, r3
 8004920:	f000 fb18 	bl	8004f54 <HAL_RTC_WaitForSynchro>
 8004924:	1e03      	subs	r3, r0, #0
 8004926:	d00d      	beq.n	8004944 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	22ff      	movs	r2, #255	; 0xff
 800492e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2221      	movs	r2, #33	; 0x21
 8004934:	2104      	movs	r1, #4
 8004936:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2220      	movs	r2, #32
 800493c:	2100      	movs	r1, #0
 800493e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e00c      	b.n	800495e <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	22ff      	movs	r2, #255	; 0xff
 800494a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2221      	movs	r2, #33	; 0x21
 8004950:	2101      	movs	r1, #1
 8004952:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2220      	movs	r2, #32
 8004958:	2100      	movs	r1, #0
 800495a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800495c:	2300      	movs	r3, #0
  }
}
 800495e:	0018      	movs	r0, r3
 8004960:	46bd      	mov	sp, r7
 8004962:	b007      	add	sp, #28
 8004964:	bd90      	pop	{r4, r7, pc}
 8004966:	46c0      	nop			; (mov r8, r8)
 8004968:	007f7f7f 	.word	0x007f7f7f
 800496c:	fffbffff 	.word	0xfffbffff

08004970 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	045b      	lsls	r3, r3, #17
 800498e:	0c5a      	lsrs	r2, r3, #17
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a22      	ldr	r2, [pc, #136]	; (8004a24 <HAL_RTC_GetTime+0xb4>)
 800499c:	4013      	ands	r3, r2
 800499e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	0c1b      	lsrs	r3, r3, #16
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	223f      	movs	r2, #63	; 0x3f
 80049a8:	4013      	ands	r3, r2
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	0a1b      	lsrs	r3, r3, #8
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	227f      	movs	r2, #127	; 0x7f
 80049b8:	4013      	ands	r3, r2
 80049ba:	b2da      	uxtb	r2, r3
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	227f      	movs	r2, #127	; 0x7f
 80049c6:	4013      	ands	r3, r2
 80049c8:	b2da      	uxtb	r2, r3
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	0c1b      	lsrs	r3, r3, #16
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2240      	movs	r2, #64	; 0x40
 80049d6:	4013      	ands	r3, r2
 80049d8:	b2da      	uxtb	r2, r3
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d11a      	bne.n	8004a1a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	0018      	movs	r0, r3
 80049ea:	f000 fb2c 	bl	8005046 <RTC_Bcd2ToByte>
 80049ee:	0003      	movs	r3, r0
 80049f0:	001a      	movs	r2, r3
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	785b      	ldrb	r3, [r3, #1]
 80049fa:	0018      	movs	r0, r3
 80049fc:	f000 fb23 	bl	8005046 <RTC_Bcd2ToByte>
 8004a00:	0003      	movs	r3, r0
 8004a02:	001a      	movs	r2, r3
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	789b      	ldrb	r3, [r3, #2]
 8004a0c:	0018      	movs	r0, r3
 8004a0e:	f000 fb1a 	bl	8005046 <RTC_Bcd2ToByte>
 8004a12:	0003      	movs	r3, r0
 8004a14:	001a      	movs	r2, r3
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	0018      	movs	r0, r3
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	b006      	add	sp, #24
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	007f7f7f 	.word	0x007f7f7f

08004a28 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004a28:	b590      	push	{r4, r7, lr}
 8004a2a:	b087      	sub	sp, #28
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2220      	movs	r2, #32
 8004a38:	5c9b      	ldrb	r3, [r3, r2]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d101      	bne.n	8004a42 <HAL_RTC_SetDate+0x1a>
 8004a3e:	2302      	movs	r3, #2
 8004a40:	e099      	b.n	8004b76 <HAL_RTC_SetDate+0x14e>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2220      	movs	r2, #32
 8004a46:	2101      	movs	r1, #1
 8004a48:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2221      	movs	r2, #33	; 0x21
 8004a4e:	2102      	movs	r1, #2
 8004a50:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10e      	bne.n	8004a76 <HAL_RTC_SetDate+0x4e>
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	785b      	ldrb	r3, [r3, #1]
 8004a5c:	001a      	movs	r2, r3
 8004a5e:	2310      	movs	r3, #16
 8004a60:	4013      	ands	r3, r2
 8004a62:	d008      	beq.n	8004a76 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	785b      	ldrb	r3, [r3, #1]
 8004a68:	2210      	movs	r2, #16
 8004a6a:	4393      	bics	r3, r2
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	330a      	adds	r3, #10
 8004a70:	b2da      	uxtb	r2, r3
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d11c      	bne.n	8004ab6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	78db      	ldrb	r3, [r3, #3]
 8004a80:	0018      	movs	r0, r3
 8004a82:	f000 fab8 	bl	8004ff6 <RTC_ByteToBcd2>
 8004a86:	0003      	movs	r3, r0
 8004a88:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	785b      	ldrb	r3, [r3, #1]
 8004a8e:	0018      	movs	r0, r3
 8004a90:	f000 fab1 	bl	8004ff6 <RTC_ByteToBcd2>
 8004a94:	0003      	movs	r3, r0
 8004a96:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004a98:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	789b      	ldrb	r3, [r3, #2]
 8004a9e:	0018      	movs	r0, r3
 8004aa0:	f000 faa9 	bl	8004ff6 <RTC_ByteToBcd2>
 8004aa4:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004aa6:	0022      	movs	r2, r4
 8004aa8:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	617b      	str	r3, [r7, #20]
 8004ab4:	e00e      	b.n	8004ad4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	78db      	ldrb	r3, [r3, #3]
 8004aba:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	785b      	ldrb	r3, [r3, #1]
 8004ac0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004ac2:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8004ac8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	22ca      	movs	r2, #202	; 0xca
 8004ada:	625a      	str	r2, [r3, #36]	; 0x24
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2253      	movs	r2, #83	; 0x53
 8004ae2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	0018      	movs	r0, r3
 8004ae8:	f000 fa5b 	bl	8004fa2 <RTC_EnterInitMode>
 8004aec:	1e03      	subs	r3, r0, #0
 8004aee:	d00d      	beq.n	8004b0c <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	22ff      	movs	r2, #255	; 0xff
 8004af6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2221      	movs	r2, #33	; 0x21
 8004afc:	2104      	movs	r1, #4
 8004afe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2220      	movs	r2, #32
 8004b04:	2100      	movs	r1, #0
 8004b06:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e034      	b.n	8004b76 <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	697a      	ldr	r2, [r7, #20]
 8004b12:	491b      	ldr	r1, [pc, #108]	; (8004b80 <HAL_RTC_SetDate+0x158>)
 8004b14:	400a      	ands	r2, r1
 8004b16:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68da      	ldr	r2, [r3, #12]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2180      	movs	r1, #128	; 0x80
 8004b24:	438a      	bics	r2, r1
 8004b26:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	4013      	ands	r3, r2
 8004b32:	d113      	bne.n	8004b5c <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	0018      	movs	r0, r3
 8004b38:	f000 fa0c 	bl	8004f54 <HAL_RTC_WaitForSynchro>
 8004b3c:	1e03      	subs	r3, r0, #0
 8004b3e:	d00d      	beq.n	8004b5c <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	22ff      	movs	r2, #255	; 0xff
 8004b46:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2221      	movs	r2, #33	; 0x21
 8004b4c:	2104      	movs	r1, #4
 8004b4e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2220      	movs	r2, #32
 8004b54:	2100      	movs	r1, #0
 8004b56:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e00c      	b.n	8004b76 <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	22ff      	movs	r2, #255	; 0xff
 8004b62:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2221      	movs	r2, #33	; 0x21
 8004b68:	2101      	movs	r1, #1
 8004b6a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	2100      	movs	r1, #0
 8004b72:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004b74:	2300      	movs	r3, #0
  }
}
 8004b76:	0018      	movs	r0, r3
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	b007      	add	sp, #28
 8004b7c:	bd90      	pop	{r4, r7, pc}
 8004b7e:	46c0      	nop			; (mov r8, r8)
 8004b80:	00ffff3f 	.word	0x00ffff3f

08004b84 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	4a21      	ldr	r2, [pc, #132]	; (8004c1c <HAL_RTC_GetDate+0x98>)
 8004b98:	4013      	ands	r3, r2
 8004b9a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	0c1b      	lsrs	r3, r3, #16
 8004ba0:	b2da      	uxtb	r2, r3
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	0a1b      	lsrs	r3, r3, #8
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	221f      	movs	r2, #31
 8004bae:	4013      	ands	r3, r2
 8004bb0:	b2da      	uxtb	r2, r3
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	223f      	movs	r2, #63	; 0x3f
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	b2da      	uxtb	r2, r3
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	0b5b      	lsrs	r3, r3, #13
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2207      	movs	r2, #7
 8004bcc:	4013      	ands	r3, r2
 8004bce:	b2da      	uxtb	r2, r3
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d11a      	bne.n	8004c10 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	78db      	ldrb	r3, [r3, #3]
 8004bde:	0018      	movs	r0, r3
 8004be0:	f000 fa31 	bl	8005046 <RTC_Bcd2ToByte>
 8004be4:	0003      	movs	r3, r0
 8004be6:	001a      	movs	r2, r3
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	785b      	ldrb	r3, [r3, #1]
 8004bf0:	0018      	movs	r0, r3
 8004bf2:	f000 fa28 	bl	8005046 <RTC_Bcd2ToByte>
 8004bf6:	0003      	movs	r3, r0
 8004bf8:	001a      	movs	r2, r3
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	789b      	ldrb	r3, [r3, #2]
 8004c02:	0018      	movs	r0, r3
 8004c04:	f000 fa1f 	bl	8005046 <RTC_Bcd2ToByte>
 8004c08:	0003      	movs	r3, r0
 8004c0a:	001a      	movs	r2, r3
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	0018      	movs	r0, r3
 8004c14:	46bd      	mov	sp, r7
 8004c16:	b006      	add	sp, #24
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	46c0      	nop			; (mov r8, r8)
 8004c1c:	00ffff3f 	.word	0x00ffff3f

08004c20 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004c20:	b590      	push	{r4, r7, lr}
 8004c22:	b089      	sub	sp, #36	; 0x24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2220      	movs	r2, #32
 8004c30:	5c9b      	ldrb	r3, [r3, r2]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d101      	bne.n	8004c3a <HAL_RTC_SetAlarm_IT+0x1a>
 8004c36:	2302      	movs	r3, #2
 8004c38:	e130      	b.n	8004e9c <HAL_RTC_SetAlarm_IT+0x27c>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	2101      	movs	r1, #1
 8004c40:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2221      	movs	r2, #33	; 0x21
 8004c46:	2102      	movs	r1, #2
 8004c48:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d136      	bne.n	8004cbe <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	2240      	movs	r2, #64	; 0x40
 8004c58:	4013      	ands	r3, r2
 8004c5a:	d102      	bne.n	8004c62 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	0018      	movs	r0, r3
 8004c68:	f000 f9c5 	bl	8004ff6 <RTC_ByteToBcd2>
 8004c6c:	0003      	movs	r3, r0
 8004c6e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	785b      	ldrb	r3, [r3, #1]
 8004c74:	0018      	movs	r0, r3
 8004c76:	f000 f9be 	bl	8004ff6 <RTC_ByteToBcd2>
 8004c7a:	0003      	movs	r3, r0
 8004c7c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004c7e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	789b      	ldrb	r3, [r3, #2]
 8004c84:	0018      	movs	r0, r3
 8004c86:	f000 f9b6 	bl	8004ff6 <RTC_ByteToBcd2>
 8004c8a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004c8c:	0022      	movs	r2, r4
 8004c8e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	78db      	ldrb	r3, [r3, #3]
 8004c94:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8004c96:	431a      	orrs	r2, r3
 8004c98:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	5c9b      	ldrb	r3, [r3, r2]
 8004ca0:	0018      	movs	r0, r3
 8004ca2:	f000 f9a8 	bl	8004ff6 <RTC_ByteToBcd2>
 8004ca6:	0003      	movs	r3, r0
 8004ca8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004caa:	0022      	movs	r2, r4
 8004cac:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004cb2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	61fb      	str	r3, [r7, #28]
 8004cbc:	e022      	b.n	8004d04 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	2240      	movs	r2, #64	; 0x40
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	d102      	bne.n	8004cd0 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	785b      	ldrb	r3, [r3, #1]
 8004cda:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004cdc:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004ce2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	78db      	ldrb	r3, [r3, #3]
 8004ce8:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8004cea:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	2120      	movs	r1, #32
 8004cf0:	5c5b      	ldrb	r3, [r3, r1]
 8004cf2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004cf4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004cfa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004d00:	4313      	orrs	r3, r2
 8004d02:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	22ca      	movs	r2, #202	; 0xca
 8004d16:	625a      	str	r2, [r3, #36]	; 0x24
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2253      	movs	r2, #83	; 0x53
 8004d1e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d24:	2380      	movs	r3, #128	; 0x80
 8004d26:	005b      	lsls	r3, r3, #1
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d14e      	bne.n	8004dca <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689a      	ldr	r2, [r3, #8]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	495b      	ldr	r1, [pc, #364]	; (8004ea4 <HAL_RTC_SetAlarm_IT+0x284>)
 8004d38:	400a      	ands	r2, r1
 8004d3a:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	22ff      	movs	r2, #255	; 0xff
 8004d44:	401a      	ands	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4957      	ldr	r1, [pc, #348]	; (8004ea8 <HAL_RTC_SetAlarm_IT+0x288>)
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004d50:	f7fe faf6 	bl	8003340 <HAL_GetTick>
 8004d54:	0003      	movs	r3, r0
 8004d56:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004d58:	e016      	b.n	8004d88 <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004d5a:	f7fe faf1 	bl	8003340 <HAL_GetTick>
 8004d5e:	0002      	movs	r2, r0
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	1ad2      	subs	r2, r2, r3
 8004d64:	23fa      	movs	r3, #250	; 0xfa
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d90d      	bls.n	8004d88 <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	22ff      	movs	r2, #255	; 0xff
 8004d72:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2221      	movs	r2, #33	; 0x21
 8004d78:	2103      	movs	r1, #3
 8004d7a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2220      	movs	r2, #32
 8004d80:	2100      	movs	r1, #0
 8004d82:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e089      	b.n	8004e9c <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	4013      	ands	r3, r2
 8004d92:	d0e2      	beq.n	8004d5a <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	69fa      	ldr	r2, [r7, #28]
 8004d9a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	689a      	ldr	r2, [r3, #8]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2180      	movs	r1, #128	; 0x80
 8004db0:	0049      	lsls	r1, r1, #1
 8004db2:	430a      	orrs	r2, r1
 8004db4:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	689a      	ldr	r2, [r3, #8]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2180      	movs	r1, #128	; 0x80
 8004dc2:	0149      	lsls	r1, r1, #5
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	609a      	str	r2, [r3, #8]
 8004dc8:	e04d      	b.n	8004e66 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4935      	ldr	r1, [pc, #212]	; (8004eac <HAL_RTC_SetAlarm_IT+0x28c>)
 8004dd6:	400a      	ands	r2, r1
 8004dd8:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	22ff      	movs	r2, #255	; 0xff
 8004de2:	401a      	ands	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4931      	ldr	r1, [pc, #196]	; (8004eb0 <HAL_RTC_SetAlarm_IT+0x290>)
 8004dea:	430a      	orrs	r2, r1
 8004dec:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004dee:	f7fe faa7 	bl	8003340 <HAL_GetTick>
 8004df2:	0003      	movs	r3, r0
 8004df4:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004df6:	e016      	b.n	8004e26 <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004df8:	f7fe faa2 	bl	8003340 <HAL_GetTick>
 8004dfc:	0002      	movs	r2, r0
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	1ad2      	subs	r2, r2, r3
 8004e02:	23fa      	movs	r3, #250	; 0xfa
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d90d      	bls.n	8004e26 <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	22ff      	movs	r2, #255	; 0xff
 8004e10:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2221      	movs	r2, #33	; 0x21
 8004e16:	2103      	movs	r1, #3
 8004e18:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	2100      	movs	r1, #0
 8004e20:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e03a      	b.n	8004e9c <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	2202      	movs	r2, #2
 8004e2e:	4013      	ands	r3, r2
 8004e30:	d0e2      	beq.n	8004df8 <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	69fa      	ldr	r2, [r7, #28]
 8004e38:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	69ba      	ldr	r2, [r7, #24]
 8004e40:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2180      	movs	r1, #128	; 0x80
 8004e4e:	0089      	lsls	r1, r1, #2
 8004e50:	430a      	orrs	r2, r1
 8004e52:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	689a      	ldr	r2, [r3, #8]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2180      	movs	r1, #128	; 0x80
 8004e60:	0189      	lsls	r1, r1, #6
 8004e62:	430a      	orrs	r2, r1
 8004e64:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004e66:	4b13      	ldr	r3, [pc, #76]	; (8004eb4 <HAL_RTC_SetAlarm_IT+0x294>)
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	4b12      	ldr	r3, [pc, #72]	; (8004eb4 <HAL_RTC_SetAlarm_IT+0x294>)
 8004e6c:	2180      	movs	r1, #128	; 0x80
 8004e6e:	0289      	lsls	r1, r1, #10
 8004e70:	430a      	orrs	r2, r1
 8004e72:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004e74:	4b0f      	ldr	r3, [pc, #60]	; (8004eb4 <HAL_RTC_SetAlarm_IT+0x294>)
 8004e76:	689a      	ldr	r2, [r3, #8]
 8004e78:	4b0e      	ldr	r3, [pc, #56]	; (8004eb4 <HAL_RTC_SetAlarm_IT+0x294>)
 8004e7a:	2180      	movs	r1, #128	; 0x80
 8004e7c:	0289      	lsls	r1, r1, #10
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	22ff      	movs	r2, #255	; 0xff
 8004e88:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2221      	movs	r2, #33	; 0x21
 8004e8e:	2101      	movs	r1, #1
 8004e90:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2220      	movs	r2, #32
 8004e96:	2100      	movs	r1, #0
 8004e98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	0018      	movs	r0, r3
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	b009      	add	sp, #36	; 0x24
 8004ea2:	bd90      	pop	{r4, r7, pc}
 8004ea4:	fffffeff 	.word	0xfffffeff
 8004ea8:	fffffe7f 	.word	0xfffffe7f
 8004eac:	fffffdff 	.word	0xfffffdff
 8004eb0:	fffffd7f 	.word	0xfffffd7f
 8004eb4:	40010400 	.word	0x40010400

08004eb8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689a      	ldr	r2, [r3, #8]
 8004ec6:	2380      	movs	r3, #128	; 0x80
 8004ec8:	015b      	lsls	r3, r3, #5
 8004eca:	4013      	ands	r3, r2
 8004ecc:	d014      	beq.n	8004ef8 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68da      	ldr	r2, [r3, #12]
 8004ed4:	2380      	movs	r3, #128	; 0x80
 8004ed6:	005b      	lsls	r3, r3, #1
 8004ed8:	4013      	ands	r3, r2
 8004eda:	d00d      	beq.n	8004ef8 <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	0018      	movs	r0, r3
 8004ee0:	f7fc fd98 	bl	8001a14 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	22ff      	movs	r2, #255	; 0xff
 8004eec:	401a      	ands	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4915      	ldr	r1, [pc, #84]	; (8004f48 <HAL_RTC_AlarmIRQHandler+0x90>)
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	689a      	ldr	r2, [r3, #8]
 8004efe:	2380      	movs	r3, #128	; 0x80
 8004f00:	019b      	lsls	r3, r3, #6
 8004f02:	4013      	ands	r3, r2
 8004f04:	d014      	beq.n	8004f30 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68da      	ldr	r2, [r3, #12]
 8004f0c:	2380      	movs	r3, #128	; 0x80
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4013      	ands	r3, r2
 8004f12:	d00d      	beq.n	8004f30 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	0018      	movs	r0, r3
 8004f18:	f000 f8b2 	bl	8005080 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	22ff      	movs	r2, #255	; 0xff
 8004f24:	401a      	ands	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4908      	ldr	r1, [pc, #32]	; (8004f4c <HAL_RTC_AlarmIRQHandler+0x94>)
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004f30:	4b07      	ldr	r3, [pc, #28]	; (8004f50 <HAL_RTC_AlarmIRQHandler+0x98>)
 8004f32:	2280      	movs	r2, #128	; 0x80
 8004f34:	0292      	lsls	r2, r2, #10
 8004f36:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2221      	movs	r2, #33	; 0x21
 8004f3c:	2101      	movs	r1, #1
 8004f3e:	5499      	strb	r1, [r3, r2]
}
 8004f40:	46c0      	nop			; (mov r8, r8)
 8004f42:	46bd      	mov	sp, r7
 8004f44:	b002      	add	sp, #8
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	fffffe7f 	.word	0xfffffe7f
 8004f4c:	fffffd7f 	.word	0xfffffd7f
 8004f50:	40010400 	.word	0x40010400

08004f54 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68da      	ldr	r2, [r3, #12]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	21a0      	movs	r1, #160	; 0xa0
 8004f68:	438a      	bics	r2, r1
 8004f6a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004f6c:	f7fe f9e8 	bl	8003340 <HAL_GetTick>
 8004f70:	0003      	movs	r3, r0
 8004f72:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004f74:	e00a      	b.n	8004f8c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004f76:	f7fe f9e3 	bl	8003340 <HAL_GetTick>
 8004f7a:	0002      	movs	r2, r0
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	1ad2      	subs	r2, r2, r3
 8004f80:	23fa      	movs	r3, #250	; 0xfa
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d901      	bls.n	8004f8c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e006      	b.n	8004f9a <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	2220      	movs	r2, #32
 8004f94:	4013      	ands	r3, r2
 8004f96:	d0ee      	beq.n	8004f76 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	0018      	movs	r0, r3
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	b004      	add	sp, #16
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b084      	sub	sp, #16
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	2240      	movs	r2, #64	; 0x40
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	d11a      	bne.n	8004fec <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	4252      	negs	r2, r2
 8004fbe:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004fc0:	f7fe f9be 	bl	8003340 <HAL_GetTick>
 8004fc4:	0003      	movs	r3, r0
 8004fc6:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004fc8:	e00a      	b.n	8004fe0 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004fca:	f7fe f9b9 	bl	8003340 <HAL_GetTick>
 8004fce:	0002      	movs	r2, r0
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	1ad2      	subs	r2, r2, r3
 8004fd4:	23fa      	movs	r3, #250	; 0xfa
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d901      	bls.n	8004fe0 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e006      	b.n	8004fee <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	2240      	movs	r2, #64	; 0x40
 8004fe8:	4013      	ands	r3, r2
 8004fea:	d0ee      	beq.n	8004fca <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	0018      	movs	r0, r3
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	b004      	add	sp, #16
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b084      	sub	sp, #16
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	0002      	movs	r2, r0
 8004ffe:	1dfb      	adds	r3, r7, #7
 8005000:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8005002:	2300      	movs	r3, #0
 8005004:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005006:	230b      	movs	r3, #11
 8005008:	18fb      	adds	r3, r7, r3
 800500a:	1dfa      	adds	r2, r7, #7
 800500c:	7812      	ldrb	r2, [r2, #0]
 800500e:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8005010:	e008      	b.n	8005024 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	3301      	adds	r3, #1
 8005016:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005018:	220b      	movs	r2, #11
 800501a:	18bb      	adds	r3, r7, r2
 800501c:	18ba      	adds	r2, r7, r2
 800501e:	7812      	ldrb	r2, [r2, #0]
 8005020:	3a0a      	subs	r2, #10
 8005022:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8005024:	210b      	movs	r1, #11
 8005026:	187b      	adds	r3, r7, r1
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	2b09      	cmp	r3, #9
 800502c:	d8f1      	bhi.n	8005012 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	b2db      	uxtb	r3, r3
 8005032:	011b      	lsls	r3, r3, #4
 8005034:	b2da      	uxtb	r2, r3
 8005036:	187b      	adds	r3, r7, r1
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	4313      	orrs	r3, r2
 800503c:	b2db      	uxtb	r3, r3
}
 800503e:	0018      	movs	r0, r3
 8005040:	46bd      	mov	sp, r7
 8005042:	b004      	add	sp, #16
 8005044:	bd80      	pop	{r7, pc}

08005046 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b084      	sub	sp, #16
 800504a:	af00      	add	r7, sp, #0
 800504c:	0002      	movs	r2, r0
 800504e:	1dfb      	adds	r3, r7, #7
 8005050:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8005052:	1dfb      	adds	r3, r7, #7
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	091b      	lsrs	r3, r3, #4
 8005058:	b2db      	uxtb	r3, r3
 800505a:	001a      	movs	r2, r3
 800505c:	0013      	movs	r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	189b      	adds	r3, r3, r2
 8005062:	005b      	lsls	r3, r3, #1
 8005064:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	b2da      	uxtb	r2, r3
 800506a:	1dfb      	adds	r3, r7, #7
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	210f      	movs	r1, #15
 8005070:	400b      	ands	r3, r1
 8005072:	b2db      	uxtb	r3, r3
 8005074:	18d3      	adds	r3, r2, r3
 8005076:	b2db      	uxtb	r3, r3
}
 8005078:	0018      	movs	r0, r3
 800507a:	46bd      	mov	sp, r7
 800507c:	b004      	add	sp, #16
 800507e:	bd80      	pop	{r7, pc}

08005080 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005088:	46c0      	nop			; (mov r8, r8)
 800508a:	46bd      	mov	sp, r7
 800508c:	b002      	add	sp, #8
 800508e:	bd80      	pop	{r7, pc}

08005090 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d101      	bne.n	80050a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e032      	b.n	8005108 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2239      	movs	r2, #57	; 0x39
 80050a6:	5c9b      	ldrb	r3, [r3, r2]
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d107      	bne.n	80050be <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2238      	movs	r2, #56	; 0x38
 80050b2:	2100      	movs	r1, #0
 80050b4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	0018      	movs	r0, r3
 80050ba:	f000 f829 	bl	8005110 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2239      	movs	r2, #57	; 0x39
 80050c2:	2102      	movs	r1, #2
 80050c4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	3304      	adds	r3, #4
 80050ce:	0019      	movs	r1, r3
 80050d0:	0010      	movs	r0, r2
 80050d2:	f000 f979 	bl	80053c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	223e      	movs	r2, #62	; 0x3e
 80050da:	2101      	movs	r1, #1
 80050dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	223a      	movs	r2, #58	; 0x3a
 80050e2:	2101      	movs	r1, #1
 80050e4:	5499      	strb	r1, [r3, r2]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	223b      	movs	r2, #59	; 0x3b
 80050ea:	2101      	movs	r1, #1
 80050ec:	5499      	strb	r1, [r3, r2]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	223c      	movs	r2, #60	; 0x3c
 80050f2:	2101      	movs	r1, #1
 80050f4:	5499      	strb	r1, [r3, r2]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	223d      	movs	r2, #61	; 0x3d
 80050fa:	2101      	movs	r1, #1
 80050fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2239      	movs	r2, #57	; 0x39
 8005102:	2101      	movs	r1, #1
 8005104:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005106:	2300      	movs	r3, #0
}
 8005108:	0018      	movs	r0, r3
 800510a:	46bd      	mov	sp, r7
 800510c:	b002      	add	sp, #8
 800510e:	bd80      	pop	{r7, pc}

08005110 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005118:	46c0      	nop			; (mov r8, r8)
 800511a:	46bd      	mov	sp, r7
 800511c:	b002      	add	sp, #8
 800511e:	bd80      	pop	{r7, pc}

08005120 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2239      	movs	r2, #57	; 0x39
 800512c:	5c9b      	ldrb	r3, [r3, r2]
 800512e:	b2db      	uxtb	r3, r3
 8005130:	2b01      	cmp	r3, #1
 8005132:	d001      	beq.n	8005138 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e036      	b.n	80051a6 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2239      	movs	r2, #57	; 0x39
 800513c:	2102      	movs	r1, #2
 800513e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68da      	ldr	r2, [r3, #12]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2101      	movs	r1, #1
 800514c:	430a      	orrs	r2, r1
 800514e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	2380      	movs	r3, #128	; 0x80
 8005156:	05db      	lsls	r3, r3, #23
 8005158:	429a      	cmp	r2, r3
 800515a:	d009      	beq.n	8005170 <HAL_TIM_Base_Start_IT+0x50>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a13      	ldr	r2, [pc, #76]	; (80051b0 <HAL_TIM_Base_Start_IT+0x90>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d004      	beq.n	8005170 <HAL_TIM_Base_Start_IT+0x50>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a12      	ldr	r2, [pc, #72]	; (80051b4 <HAL_TIM_Base_Start_IT+0x94>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d111      	bne.n	8005194 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	2207      	movs	r2, #7
 8005178:	4013      	ands	r3, r2
 800517a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2b06      	cmp	r3, #6
 8005180:	d010      	beq.n	80051a4 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2101      	movs	r1, #1
 800518e:	430a      	orrs	r2, r1
 8005190:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005192:	e007      	b.n	80051a4 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2101      	movs	r1, #1
 80051a0:	430a      	orrs	r2, r1
 80051a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	0018      	movs	r0, r3
 80051a8:	46bd      	mov	sp, r7
 80051aa:	b004      	add	sp, #16
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	46c0      	nop			; (mov r8, r8)
 80051b0:	40010800 	.word	0x40010800
 80051b4:	40011400 	.word	0x40011400

080051b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	2202      	movs	r2, #2
 80051c8:	4013      	ands	r3, r2
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d124      	bne.n	8005218 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	2202      	movs	r2, #2
 80051d6:	4013      	ands	r3, r2
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d11d      	bne.n	8005218 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2203      	movs	r2, #3
 80051e2:	4252      	negs	r2, r2
 80051e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2201      	movs	r2, #1
 80051ea:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	2203      	movs	r2, #3
 80051f4:	4013      	ands	r3, r2
 80051f6:	d004      	beq.n	8005202 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	0018      	movs	r0, r3
 80051fc:	f000 f8cc 	bl	8005398 <HAL_TIM_IC_CaptureCallback>
 8005200:	e007      	b.n	8005212 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	0018      	movs	r0, r3
 8005206:	f000 f8bf 	bl	8005388 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	0018      	movs	r0, r3
 800520e:	f000 f8cb 	bl	80053a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	2204      	movs	r2, #4
 8005220:	4013      	ands	r3, r2
 8005222:	2b04      	cmp	r3, #4
 8005224:	d125      	bne.n	8005272 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	2204      	movs	r2, #4
 800522e:	4013      	ands	r3, r2
 8005230:	2b04      	cmp	r3, #4
 8005232:	d11e      	bne.n	8005272 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2205      	movs	r2, #5
 800523a:	4252      	negs	r2, r2
 800523c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2202      	movs	r2, #2
 8005242:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	699a      	ldr	r2, [r3, #24]
 800524a:	23c0      	movs	r3, #192	; 0xc0
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	4013      	ands	r3, r2
 8005250:	d004      	beq.n	800525c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	0018      	movs	r0, r3
 8005256:	f000 f89f 	bl	8005398 <HAL_TIM_IC_CaptureCallback>
 800525a:	e007      	b.n	800526c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	0018      	movs	r0, r3
 8005260:	f000 f892 	bl	8005388 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	0018      	movs	r0, r3
 8005268:	f000 f89e 	bl	80053a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	2208      	movs	r2, #8
 800527a:	4013      	ands	r3, r2
 800527c:	2b08      	cmp	r3, #8
 800527e:	d124      	bne.n	80052ca <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	2208      	movs	r2, #8
 8005288:	4013      	ands	r3, r2
 800528a:	2b08      	cmp	r3, #8
 800528c:	d11d      	bne.n	80052ca <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2209      	movs	r2, #9
 8005294:	4252      	negs	r2, r2
 8005296:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2204      	movs	r2, #4
 800529c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	69db      	ldr	r3, [r3, #28]
 80052a4:	2203      	movs	r2, #3
 80052a6:	4013      	ands	r3, r2
 80052a8:	d004      	beq.n	80052b4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	0018      	movs	r0, r3
 80052ae:	f000 f873 	bl	8005398 <HAL_TIM_IC_CaptureCallback>
 80052b2:	e007      	b.n	80052c4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	0018      	movs	r0, r3
 80052b8:	f000 f866 	bl	8005388 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	0018      	movs	r0, r3
 80052c0:	f000 f872 	bl	80053a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	2210      	movs	r2, #16
 80052d2:	4013      	ands	r3, r2
 80052d4:	2b10      	cmp	r3, #16
 80052d6:	d125      	bne.n	8005324 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	2210      	movs	r2, #16
 80052e0:	4013      	ands	r3, r2
 80052e2:	2b10      	cmp	r3, #16
 80052e4:	d11e      	bne.n	8005324 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2211      	movs	r2, #17
 80052ec:	4252      	negs	r2, r2
 80052ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2208      	movs	r2, #8
 80052f4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	69da      	ldr	r2, [r3, #28]
 80052fc:	23c0      	movs	r3, #192	; 0xc0
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	4013      	ands	r3, r2
 8005302:	d004      	beq.n	800530e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	0018      	movs	r0, r3
 8005308:	f000 f846 	bl	8005398 <HAL_TIM_IC_CaptureCallback>
 800530c:	e007      	b.n	800531e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	0018      	movs	r0, r3
 8005312:	f000 f839 	bl	8005388 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	0018      	movs	r0, r3
 800531a:	f000 f845 	bl	80053a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	2201      	movs	r2, #1
 800532c:	4013      	ands	r3, r2
 800532e:	2b01      	cmp	r3, #1
 8005330:	d10f      	bne.n	8005352 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	2201      	movs	r2, #1
 800533a:	4013      	ands	r3, r2
 800533c:	2b01      	cmp	r3, #1
 800533e:	d108      	bne.n	8005352 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2202      	movs	r2, #2
 8005346:	4252      	negs	r2, r2
 8005348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	0018      	movs	r0, r3
 800534e:	f7fc fdbd 	bl	8001ecc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	2240      	movs	r2, #64	; 0x40
 800535a:	4013      	ands	r3, r2
 800535c:	2b40      	cmp	r3, #64	; 0x40
 800535e:	d10f      	bne.n	8005380 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	2240      	movs	r2, #64	; 0x40
 8005368:	4013      	ands	r3, r2
 800536a:	2b40      	cmp	r3, #64	; 0x40
 800536c:	d108      	bne.n	8005380 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2241      	movs	r2, #65	; 0x41
 8005374:	4252      	negs	r2, r2
 8005376:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	0018      	movs	r0, r3
 800537c:	f000 f81c 	bl	80053b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005380:	46c0      	nop			; (mov r8, r8)
 8005382:	46bd      	mov	sp, r7
 8005384:	b002      	add	sp, #8
 8005386:	bd80      	pop	{r7, pc}

08005388 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005390:	46c0      	nop			; (mov r8, r8)
 8005392:	46bd      	mov	sp, r7
 8005394:	b002      	add	sp, #8
 8005396:	bd80      	pop	{r7, pc}

08005398 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053a0:	46c0      	nop			; (mov r8, r8)
 80053a2:	46bd      	mov	sp, r7
 80053a4:	b002      	add	sp, #8
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053b0:	46c0      	nop			; (mov r8, r8)
 80053b2:	46bd      	mov	sp, r7
 80053b4:	b002      	add	sp, #8
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053c0:	46c0      	nop			; (mov r8, r8)
 80053c2:	46bd      	mov	sp, r7
 80053c4:	b002      	add	sp, #8
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	2380      	movs	r3, #128	; 0x80
 80053dc:	05db      	lsls	r3, r3, #23
 80053de:	429a      	cmp	r2, r3
 80053e0:	d007      	beq.n	80053f2 <TIM_Base_SetConfig+0x2a>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a1f      	ldr	r2, [pc, #124]	; (8005464 <TIM_Base_SetConfig+0x9c>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d003      	beq.n	80053f2 <TIM_Base_SetConfig+0x2a>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a1e      	ldr	r2, [pc, #120]	; (8005468 <TIM_Base_SetConfig+0xa0>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d108      	bne.n	8005404 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2270      	movs	r2, #112	; 0x70
 80053f6:	4393      	bics	r3, r2
 80053f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	4313      	orrs	r3, r2
 8005402:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	2380      	movs	r3, #128	; 0x80
 8005408:	05db      	lsls	r3, r3, #23
 800540a:	429a      	cmp	r2, r3
 800540c:	d007      	beq.n	800541e <TIM_Base_SetConfig+0x56>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a14      	ldr	r2, [pc, #80]	; (8005464 <TIM_Base_SetConfig+0x9c>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d003      	beq.n	800541e <TIM_Base_SetConfig+0x56>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a13      	ldr	r2, [pc, #76]	; (8005468 <TIM_Base_SetConfig+0xa0>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d108      	bne.n	8005430 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	4a12      	ldr	r2, [pc, #72]	; (800546c <TIM_Base_SetConfig+0xa4>)
 8005422:	4013      	ands	r3, r2
 8005424:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	4313      	orrs	r3, r2
 800542e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2280      	movs	r2, #128	; 0x80
 8005434:	4393      	bics	r3, r2
 8005436:	001a      	movs	r2, r3
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	4313      	orrs	r3, r2
 800543e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	689a      	ldr	r2, [r3, #8]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2201      	movs	r2, #1
 800545a:	615a      	str	r2, [r3, #20]
}
 800545c:	46c0      	nop			; (mov r8, r8)
 800545e:	46bd      	mov	sp, r7
 8005460:	b004      	add	sp, #16
 8005462:	bd80      	pop	{r7, pc}
 8005464:	40010800 	.word	0x40010800
 8005468:	40011400 	.word	0x40011400
 800546c:	fffffcff 	.word	0xfffffcff

08005470 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e044      	b.n	800550c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005486:	2b00      	cmp	r3, #0
 8005488:	d107      	bne.n	800549a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2274      	movs	r2, #116	; 0x74
 800548e:	2100      	movs	r1, #0
 8005490:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	0018      	movs	r0, r3
 8005496:	f7fc ff53 	bl	8002340 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2224      	movs	r2, #36	; 0x24
 800549e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2101      	movs	r1, #1
 80054ac:	438a      	bics	r2, r1
 80054ae:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	0018      	movs	r0, r3
 80054b4:	f000 f8d8 	bl	8005668 <UART_SetConfig>
 80054b8:	0003      	movs	r3, r0
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d101      	bne.n	80054c2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e024      	b.n	800550c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	0018      	movs	r0, r3
 80054ce:	f000 fb15 	bl	8005afc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	490d      	ldr	r1, [pc, #52]	; (8005514 <HAL_UART_Init+0xa4>)
 80054de:	400a      	ands	r2, r1
 80054e0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	689a      	ldr	r2, [r3, #8]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	212a      	movs	r1, #42	; 0x2a
 80054ee:	438a      	bics	r2, r1
 80054f0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2101      	movs	r1, #1
 80054fe:	430a      	orrs	r2, r1
 8005500:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	0018      	movs	r0, r3
 8005506:	f000 fbad 	bl	8005c64 <UART_CheckIdleState>
 800550a:	0003      	movs	r3, r0
}
 800550c:	0018      	movs	r0, r3
 800550e:	46bd      	mov	sp, r7
 8005510:	b002      	add	sp, #8
 8005512:	bd80      	pop	{r7, pc}
 8005514:	ffffb7ff 	.word	0xffffb7ff

08005518 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b08a      	sub	sp, #40	; 0x28
 800551c:	af02      	add	r7, sp, #8
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	603b      	str	r3, [r7, #0]
 8005524:	1dbb      	adds	r3, r7, #6
 8005526:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800552c:	2b20      	cmp	r3, #32
 800552e:	d000      	beq.n	8005532 <HAL_UART_Transmit+0x1a>
 8005530:	e095      	b.n	800565e <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d003      	beq.n	8005540 <HAL_UART_Transmit+0x28>
 8005538:	1dbb      	adds	r3, r7, #6
 800553a:	881b      	ldrh	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e08d      	b.n	8005660 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	689a      	ldr	r2, [r3, #8]
 8005548:	2380      	movs	r3, #128	; 0x80
 800554a:	015b      	lsls	r3, r3, #5
 800554c:	429a      	cmp	r2, r3
 800554e:	d109      	bne.n	8005564 <HAL_UART_Transmit+0x4c>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d105      	bne.n	8005564 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	2201      	movs	r2, #1
 800555c:	4013      	ands	r3, r2
 800555e:	d001      	beq.n	8005564 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e07d      	b.n	8005660 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2274      	movs	r2, #116	; 0x74
 8005568:	5c9b      	ldrb	r3, [r3, r2]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d101      	bne.n	8005572 <HAL_UART_Transmit+0x5a>
 800556e:	2302      	movs	r3, #2
 8005570:	e076      	b.n	8005660 <HAL_UART_Transmit+0x148>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2274      	movs	r2, #116	; 0x74
 8005576:	2101      	movs	r1, #1
 8005578:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2280      	movs	r2, #128	; 0x80
 800557e:	2100      	movs	r1, #0
 8005580:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2221      	movs	r2, #33	; 0x21
 8005586:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005588:	f7fd feda 	bl	8003340 <HAL_GetTick>
 800558c:	0003      	movs	r3, r0
 800558e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	1dba      	adds	r2, r7, #6
 8005594:	2150      	movs	r1, #80	; 0x50
 8005596:	8812      	ldrh	r2, [r2, #0]
 8005598:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	1dba      	adds	r2, r7, #6
 800559e:	2152      	movs	r1, #82	; 0x52
 80055a0:	8812      	ldrh	r2, [r2, #0]
 80055a2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	689a      	ldr	r2, [r3, #8]
 80055a8:	2380      	movs	r3, #128	; 0x80
 80055aa:	015b      	lsls	r3, r3, #5
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d108      	bne.n	80055c2 <HAL_UART_Transmit+0xaa>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d104      	bne.n	80055c2 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80055b8:	2300      	movs	r3, #0
 80055ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	61bb      	str	r3, [r7, #24]
 80055c0:	e003      	b.n	80055ca <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055c6:	2300      	movs	r3, #0
 80055c8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2274      	movs	r2, #116	; 0x74
 80055ce:	2100      	movs	r1, #0
 80055d0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80055d2:	e02c      	b.n	800562e <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	68f8      	ldr	r0, [r7, #12]
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	9300      	str	r3, [sp, #0]
 80055dc:	0013      	movs	r3, r2
 80055de:	2200      	movs	r2, #0
 80055e0:	2180      	movs	r1, #128	; 0x80
 80055e2:	f000 fb87 	bl	8005cf4 <UART_WaitOnFlagUntilTimeout>
 80055e6:	1e03      	subs	r3, r0, #0
 80055e8:	d001      	beq.n	80055ee <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e038      	b.n	8005660 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d10b      	bne.n	800560c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	881b      	ldrh	r3, [r3, #0]
 80055f8:	001a      	movs	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	05d2      	lsls	r2, r2, #23
 8005600:	0dd2      	lsrs	r2, r2, #23
 8005602:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	3302      	adds	r3, #2
 8005608:	61bb      	str	r3, [r7, #24]
 800560a:	e007      	b.n	800561c <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	781a      	ldrb	r2, [r3, #0]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	3301      	adds	r3, #1
 800561a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2252      	movs	r2, #82	; 0x52
 8005620:	5a9b      	ldrh	r3, [r3, r2]
 8005622:	b29b      	uxth	r3, r3
 8005624:	3b01      	subs	r3, #1
 8005626:	b299      	uxth	r1, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2252      	movs	r2, #82	; 0x52
 800562c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2252      	movs	r2, #82	; 0x52
 8005632:	5a9b      	ldrh	r3, [r3, r2]
 8005634:	b29b      	uxth	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1cc      	bne.n	80055d4 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	9300      	str	r3, [sp, #0]
 8005642:	0013      	movs	r3, r2
 8005644:	2200      	movs	r2, #0
 8005646:	2140      	movs	r1, #64	; 0x40
 8005648:	f000 fb54 	bl	8005cf4 <UART_WaitOnFlagUntilTimeout>
 800564c:	1e03      	subs	r3, r0, #0
 800564e:	d001      	beq.n	8005654 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e005      	b.n	8005660 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2220      	movs	r2, #32
 8005658:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800565a:	2300      	movs	r3, #0
 800565c:	e000      	b.n	8005660 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800565e:	2302      	movs	r3, #2
  }
}
 8005660:	0018      	movs	r0, r3
 8005662:	46bd      	mov	sp, r7
 8005664:	b008      	add	sp, #32
 8005666:	bd80      	pop	{r7, pc}

08005668 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005668:	b5b0      	push	{r4, r5, r7, lr}
 800566a:	b08e      	sub	sp, #56	; 0x38
 800566c:	af00      	add	r7, sp, #0
 800566e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005670:	231a      	movs	r3, #26
 8005672:	2218      	movs	r2, #24
 8005674:	189b      	adds	r3, r3, r2
 8005676:	19db      	adds	r3, r3, r7
 8005678:	2200      	movs	r2, #0
 800567a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	689a      	ldr	r2, [r3, #8]
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	431a      	orrs	r2, r3
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	431a      	orrs	r2, r3
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	69db      	ldr	r3, [r3, #28]
 8005690:	4313      	orrs	r3, r2
 8005692:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4ab4      	ldr	r2, [pc, #720]	; (800596c <UART_SetConfig+0x304>)
 800569c:	4013      	ands	r3, r2
 800569e:	0019      	movs	r1, r3
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056a6:	430a      	orrs	r2, r1
 80056a8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	4aaf      	ldr	r2, [pc, #700]	; (8005970 <UART_SetConfig+0x308>)
 80056b2:	4013      	ands	r3, r2
 80056b4:	0019      	movs	r1, r3
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	68da      	ldr	r2, [r3, #12]
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	430a      	orrs	r2, r1
 80056c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4aa9      	ldr	r2, [pc, #676]	; (8005974 <UART_SetConfig+0x30c>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d004      	beq.n	80056dc <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056d8:	4313      	orrs	r3, r2
 80056da:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	4aa5      	ldr	r2, [pc, #660]	; (8005978 <UART_SetConfig+0x310>)
 80056e4:	4013      	ands	r3, r2
 80056e6:	0019      	movs	r1, r3
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056ee:	430a      	orrs	r2, r1
 80056f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4aa1      	ldr	r2, [pc, #644]	; (800597c <UART_SetConfig+0x314>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d131      	bne.n	8005760 <UART_SetConfig+0xf8>
 80056fc:	4ba0      	ldr	r3, [pc, #640]	; (8005980 <UART_SetConfig+0x318>)
 80056fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005700:	220c      	movs	r2, #12
 8005702:	4013      	ands	r3, r2
 8005704:	2b0c      	cmp	r3, #12
 8005706:	d01d      	beq.n	8005744 <UART_SetConfig+0xdc>
 8005708:	d823      	bhi.n	8005752 <UART_SetConfig+0xea>
 800570a:	2b08      	cmp	r3, #8
 800570c:	d00c      	beq.n	8005728 <UART_SetConfig+0xc0>
 800570e:	d820      	bhi.n	8005752 <UART_SetConfig+0xea>
 8005710:	2b00      	cmp	r3, #0
 8005712:	d002      	beq.n	800571a <UART_SetConfig+0xb2>
 8005714:	2b04      	cmp	r3, #4
 8005716:	d00e      	beq.n	8005736 <UART_SetConfig+0xce>
 8005718:	e01b      	b.n	8005752 <UART_SetConfig+0xea>
 800571a:	231b      	movs	r3, #27
 800571c:	2218      	movs	r2, #24
 800571e:	189b      	adds	r3, r3, r2
 8005720:	19db      	adds	r3, r3, r7
 8005722:	2200      	movs	r2, #0
 8005724:	701a      	strb	r2, [r3, #0]
 8005726:	e065      	b.n	80057f4 <UART_SetConfig+0x18c>
 8005728:	231b      	movs	r3, #27
 800572a:	2218      	movs	r2, #24
 800572c:	189b      	adds	r3, r3, r2
 800572e:	19db      	adds	r3, r3, r7
 8005730:	2202      	movs	r2, #2
 8005732:	701a      	strb	r2, [r3, #0]
 8005734:	e05e      	b.n	80057f4 <UART_SetConfig+0x18c>
 8005736:	231b      	movs	r3, #27
 8005738:	2218      	movs	r2, #24
 800573a:	189b      	adds	r3, r3, r2
 800573c:	19db      	adds	r3, r3, r7
 800573e:	2204      	movs	r2, #4
 8005740:	701a      	strb	r2, [r3, #0]
 8005742:	e057      	b.n	80057f4 <UART_SetConfig+0x18c>
 8005744:	231b      	movs	r3, #27
 8005746:	2218      	movs	r2, #24
 8005748:	189b      	adds	r3, r3, r2
 800574a:	19db      	adds	r3, r3, r7
 800574c:	2208      	movs	r2, #8
 800574e:	701a      	strb	r2, [r3, #0]
 8005750:	e050      	b.n	80057f4 <UART_SetConfig+0x18c>
 8005752:	231b      	movs	r3, #27
 8005754:	2218      	movs	r2, #24
 8005756:	189b      	adds	r3, r3, r2
 8005758:	19db      	adds	r3, r3, r7
 800575a:	2210      	movs	r2, #16
 800575c:	701a      	strb	r2, [r3, #0]
 800575e:	e049      	b.n	80057f4 <UART_SetConfig+0x18c>
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a83      	ldr	r2, [pc, #524]	; (8005974 <UART_SetConfig+0x30c>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d13e      	bne.n	80057e8 <UART_SetConfig+0x180>
 800576a:	4b85      	ldr	r3, [pc, #532]	; (8005980 <UART_SetConfig+0x318>)
 800576c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800576e:	23c0      	movs	r3, #192	; 0xc0
 8005770:	011b      	lsls	r3, r3, #4
 8005772:	4013      	ands	r3, r2
 8005774:	22c0      	movs	r2, #192	; 0xc0
 8005776:	0112      	lsls	r2, r2, #4
 8005778:	4293      	cmp	r3, r2
 800577a:	d027      	beq.n	80057cc <UART_SetConfig+0x164>
 800577c:	22c0      	movs	r2, #192	; 0xc0
 800577e:	0112      	lsls	r2, r2, #4
 8005780:	4293      	cmp	r3, r2
 8005782:	d82a      	bhi.n	80057da <UART_SetConfig+0x172>
 8005784:	2280      	movs	r2, #128	; 0x80
 8005786:	0112      	lsls	r2, r2, #4
 8005788:	4293      	cmp	r3, r2
 800578a:	d011      	beq.n	80057b0 <UART_SetConfig+0x148>
 800578c:	2280      	movs	r2, #128	; 0x80
 800578e:	0112      	lsls	r2, r2, #4
 8005790:	4293      	cmp	r3, r2
 8005792:	d822      	bhi.n	80057da <UART_SetConfig+0x172>
 8005794:	2b00      	cmp	r3, #0
 8005796:	d004      	beq.n	80057a2 <UART_SetConfig+0x13a>
 8005798:	2280      	movs	r2, #128	; 0x80
 800579a:	00d2      	lsls	r2, r2, #3
 800579c:	4293      	cmp	r3, r2
 800579e:	d00e      	beq.n	80057be <UART_SetConfig+0x156>
 80057a0:	e01b      	b.n	80057da <UART_SetConfig+0x172>
 80057a2:	231b      	movs	r3, #27
 80057a4:	2218      	movs	r2, #24
 80057a6:	189b      	adds	r3, r3, r2
 80057a8:	19db      	adds	r3, r3, r7
 80057aa:	2200      	movs	r2, #0
 80057ac:	701a      	strb	r2, [r3, #0]
 80057ae:	e021      	b.n	80057f4 <UART_SetConfig+0x18c>
 80057b0:	231b      	movs	r3, #27
 80057b2:	2218      	movs	r2, #24
 80057b4:	189b      	adds	r3, r3, r2
 80057b6:	19db      	adds	r3, r3, r7
 80057b8:	2202      	movs	r2, #2
 80057ba:	701a      	strb	r2, [r3, #0]
 80057bc:	e01a      	b.n	80057f4 <UART_SetConfig+0x18c>
 80057be:	231b      	movs	r3, #27
 80057c0:	2218      	movs	r2, #24
 80057c2:	189b      	adds	r3, r3, r2
 80057c4:	19db      	adds	r3, r3, r7
 80057c6:	2204      	movs	r2, #4
 80057c8:	701a      	strb	r2, [r3, #0]
 80057ca:	e013      	b.n	80057f4 <UART_SetConfig+0x18c>
 80057cc:	231b      	movs	r3, #27
 80057ce:	2218      	movs	r2, #24
 80057d0:	189b      	adds	r3, r3, r2
 80057d2:	19db      	adds	r3, r3, r7
 80057d4:	2208      	movs	r2, #8
 80057d6:	701a      	strb	r2, [r3, #0]
 80057d8:	e00c      	b.n	80057f4 <UART_SetConfig+0x18c>
 80057da:	231b      	movs	r3, #27
 80057dc:	2218      	movs	r2, #24
 80057de:	189b      	adds	r3, r3, r2
 80057e0:	19db      	adds	r3, r3, r7
 80057e2:	2210      	movs	r2, #16
 80057e4:	701a      	strb	r2, [r3, #0]
 80057e6:	e005      	b.n	80057f4 <UART_SetConfig+0x18c>
 80057e8:	231b      	movs	r3, #27
 80057ea:	2218      	movs	r2, #24
 80057ec:	189b      	adds	r3, r3, r2
 80057ee:	19db      	adds	r3, r3, r7
 80057f0:	2210      	movs	r2, #16
 80057f2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a5e      	ldr	r2, [pc, #376]	; (8005974 <UART_SetConfig+0x30c>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d000      	beq.n	8005800 <UART_SetConfig+0x198>
 80057fe:	e084      	b.n	800590a <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005800:	231b      	movs	r3, #27
 8005802:	2218      	movs	r2, #24
 8005804:	189b      	adds	r3, r3, r2
 8005806:	19db      	adds	r3, r3, r7
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	2b08      	cmp	r3, #8
 800580c:	d01d      	beq.n	800584a <UART_SetConfig+0x1e2>
 800580e:	dc20      	bgt.n	8005852 <UART_SetConfig+0x1ea>
 8005810:	2b04      	cmp	r3, #4
 8005812:	d015      	beq.n	8005840 <UART_SetConfig+0x1d8>
 8005814:	dc1d      	bgt.n	8005852 <UART_SetConfig+0x1ea>
 8005816:	2b00      	cmp	r3, #0
 8005818:	d002      	beq.n	8005820 <UART_SetConfig+0x1b8>
 800581a:	2b02      	cmp	r3, #2
 800581c:	d005      	beq.n	800582a <UART_SetConfig+0x1c2>
 800581e:	e018      	b.n	8005852 <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005820:	f7fe fdc0 	bl	80043a4 <HAL_RCC_GetPCLK1Freq>
 8005824:	0003      	movs	r3, r0
 8005826:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005828:	e01c      	b.n	8005864 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800582a:	4b55      	ldr	r3, [pc, #340]	; (8005980 <UART_SetConfig+0x318>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2210      	movs	r2, #16
 8005830:	4013      	ands	r3, r2
 8005832:	d002      	beq.n	800583a <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005834:	4b53      	ldr	r3, [pc, #332]	; (8005984 <UART_SetConfig+0x31c>)
 8005836:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005838:	e014      	b.n	8005864 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 800583a:	4b53      	ldr	r3, [pc, #332]	; (8005988 <UART_SetConfig+0x320>)
 800583c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800583e:	e011      	b.n	8005864 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005840:	f7fe fd00 	bl	8004244 <HAL_RCC_GetSysClockFreq>
 8005844:	0003      	movs	r3, r0
 8005846:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005848:	e00c      	b.n	8005864 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800584a:	2380      	movs	r3, #128	; 0x80
 800584c:	021b      	lsls	r3, r3, #8
 800584e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005850:	e008      	b.n	8005864 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8005852:	2300      	movs	r3, #0
 8005854:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005856:	231a      	movs	r3, #26
 8005858:	2218      	movs	r2, #24
 800585a:	189b      	adds	r3, r3, r2
 800585c:	19db      	adds	r3, r3, r7
 800585e:	2201      	movs	r2, #1
 8005860:	701a      	strb	r2, [r3, #0]
        break;
 8005862:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005866:	2b00      	cmp	r3, #0
 8005868:	d100      	bne.n	800586c <UART_SetConfig+0x204>
 800586a:	e130      	b.n	8005ace <UART_SetConfig+0x466>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	0013      	movs	r3, r2
 8005872:	005b      	lsls	r3, r3, #1
 8005874:	189b      	adds	r3, r3, r2
 8005876:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005878:	429a      	cmp	r2, r3
 800587a:	d305      	bcc.n	8005888 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005882:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005884:	429a      	cmp	r2, r3
 8005886:	d906      	bls.n	8005896 <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8005888:	231a      	movs	r3, #26
 800588a:	2218      	movs	r2, #24
 800588c:	189b      	adds	r3, r3, r2
 800588e:	19db      	adds	r3, r3, r7
 8005890:	2201      	movs	r2, #1
 8005892:	701a      	strb	r2, [r3, #0]
 8005894:	e11b      	b.n	8005ace <UART_SetConfig+0x466>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005898:	613b      	str	r3, [r7, #16]
 800589a:	2300      	movs	r3, #0
 800589c:	617b      	str	r3, [r7, #20]
 800589e:	6939      	ldr	r1, [r7, #16]
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	000b      	movs	r3, r1
 80058a4:	0e1b      	lsrs	r3, r3, #24
 80058a6:	0010      	movs	r0, r2
 80058a8:	0205      	lsls	r5, r0, #8
 80058aa:	431d      	orrs	r5, r3
 80058ac:	000b      	movs	r3, r1
 80058ae:	021c      	lsls	r4, r3, #8
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	085b      	lsrs	r3, r3, #1
 80058b6:	60bb      	str	r3, [r7, #8]
 80058b8:	2300      	movs	r3, #0
 80058ba:	60fb      	str	r3, [r7, #12]
 80058bc:	68b8      	ldr	r0, [r7, #8]
 80058be:	68f9      	ldr	r1, [r7, #12]
 80058c0:	1900      	adds	r0, r0, r4
 80058c2:	4169      	adcs	r1, r5
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	603b      	str	r3, [r7, #0]
 80058ca:	2300      	movs	r3, #0
 80058cc:	607b      	str	r3, [r7, #4]
 80058ce:	683a      	ldr	r2, [r7, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f7fa fca5 	bl	8000220 <__aeabi_uldivmod>
 80058d6:	0002      	movs	r2, r0
 80058d8:	000b      	movs	r3, r1
 80058da:	0013      	movs	r3, r2
 80058dc:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058e0:	23c0      	movs	r3, #192	; 0xc0
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d309      	bcc.n	80058fc <UART_SetConfig+0x294>
 80058e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058ea:	2380      	movs	r3, #128	; 0x80
 80058ec:	035b      	lsls	r3, r3, #13
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d204      	bcs.n	80058fc <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058f8:	60da      	str	r2, [r3, #12]
 80058fa:	e0e8      	b.n	8005ace <UART_SetConfig+0x466>
        }
        else
        {
          ret = HAL_ERROR;
 80058fc:	231a      	movs	r3, #26
 80058fe:	2218      	movs	r2, #24
 8005900:	189b      	adds	r3, r3, r2
 8005902:	19db      	adds	r3, r3, r7
 8005904:	2201      	movs	r2, #1
 8005906:	701a      	strb	r2, [r3, #0]
 8005908:	e0e1      	b.n	8005ace <UART_SetConfig+0x466>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	69da      	ldr	r2, [r3, #28]
 800590e:	2380      	movs	r3, #128	; 0x80
 8005910:	021b      	lsls	r3, r3, #8
 8005912:	429a      	cmp	r2, r3
 8005914:	d000      	beq.n	8005918 <UART_SetConfig+0x2b0>
 8005916:	e083      	b.n	8005a20 <UART_SetConfig+0x3b8>
  {
    switch (clocksource)
 8005918:	231b      	movs	r3, #27
 800591a:	2218      	movs	r2, #24
 800591c:	189b      	adds	r3, r3, r2
 800591e:	19db      	adds	r3, r3, r7
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	2b08      	cmp	r3, #8
 8005924:	d834      	bhi.n	8005990 <UART_SetConfig+0x328>
 8005926:	009a      	lsls	r2, r3, #2
 8005928:	4b18      	ldr	r3, [pc, #96]	; (800598c <UART_SetConfig+0x324>)
 800592a:	18d3      	adds	r3, r2, r3
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005930:	f7fe fd38 	bl	80043a4 <HAL_RCC_GetPCLK1Freq>
 8005934:	0003      	movs	r3, r0
 8005936:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005938:	e033      	b.n	80059a2 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800593a:	f7fe fd49 	bl	80043d0 <HAL_RCC_GetPCLK2Freq>
 800593e:	0003      	movs	r3, r0
 8005940:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005942:	e02e      	b.n	80059a2 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005944:	4b0e      	ldr	r3, [pc, #56]	; (8005980 <UART_SetConfig+0x318>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2210      	movs	r2, #16
 800594a:	4013      	ands	r3, r2
 800594c:	d002      	beq.n	8005954 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800594e:	4b0d      	ldr	r3, [pc, #52]	; (8005984 <UART_SetConfig+0x31c>)
 8005950:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005952:	e026      	b.n	80059a2 <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8005954:	4b0c      	ldr	r3, [pc, #48]	; (8005988 <UART_SetConfig+0x320>)
 8005956:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005958:	e023      	b.n	80059a2 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800595a:	f7fe fc73 	bl	8004244 <HAL_RCC_GetSysClockFreq>
 800595e:	0003      	movs	r3, r0
 8005960:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005962:	e01e      	b.n	80059a2 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005964:	2380      	movs	r3, #128	; 0x80
 8005966:	021b      	lsls	r3, r3, #8
 8005968:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800596a:	e01a      	b.n	80059a2 <UART_SetConfig+0x33a>
 800596c:	efff69f3 	.word	0xefff69f3
 8005970:	ffffcfff 	.word	0xffffcfff
 8005974:	40004800 	.word	0x40004800
 8005978:	fffff4ff 	.word	0xfffff4ff
 800597c:	40004400 	.word	0x40004400
 8005980:	40021000 	.word	0x40021000
 8005984:	003d0900 	.word	0x003d0900
 8005988:	00f42400 	.word	0x00f42400
 800598c:	08009f54 	.word	0x08009f54
      default:
        pclk = 0U;
 8005990:	2300      	movs	r3, #0
 8005992:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005994:	231a      	movs	r3, #26
 8005996:	2218      	movs	r2, #24
 8005998:	189b      	adds	r3, r3, r2
 800599a:	19db      	adds	r3, r3, r7
 800599c:	2201      	movs	r2, #1
 800599e:	701a      	strb	r2, [r3, #0]
        break;
 80059a0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d100      	bne.n	80059aa <UART_SetConfig+0x342>
 80059a8:	e091      	b.n	8005ace <UART_SetConfig+0x466>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80059aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ac:	005a      	lsls	r2, r3, #1
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	085b      	lsrs	r3, r3, #1
 80059b4:	18d2      	adds	r2, r2, r3
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	0019      	movs	r1, r3
 80059bc:	0010      	movs	r0, r2
 80059be:	f7fa fba3 	bl	8000108 <__udivsi3>
 80059c2:	0003      	movs	r3, r0
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ca:	2b0f      	cmp	r3, #15
 80059cc:	d921      	bls.n	8005a12 <UART_SetConfig+0x3aa>
 80059ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059d0:	2380      	movs	r3, #128	; 0x80
 80059d2:	025b      	lsls	r3, r3, #9
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d21c      	bcs.n	8005a12 <UART_SetConfig+0x3aa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059da:	b29a      	uxth	r2, r3
 80059dc:	200e      	movs	r0, #14
 80059de:	2418      	movs	r4, #24
 80059e0:	1903      	adds	r3, r0, r4
 80059e2:	19db      	adds	r3, r3, r7
 80059e4:	210f      	movs	r1, #15
 80059e6:	438a      	bics	r2, r1
 80059e8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ec:	085b      	lsrs	r3, r3, #1
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	2207      	movs	r2, #7
 80059f2:	4013      	ands	r3, r2
 80059f4:	b299      	uxth	r1, r3
 80059f6:	1903      	adds	r3, r0, r4
 80059f8:	19db      	adds	r3, r3, r7
 80059fa:	1902      	adds	r2, r0, r4
 80059fc:	19d2      	adds	r2, r2, r7
 80059fe:	8812      	ldrh	r2, [r2, #0]
 8005a00:	430a      	orrs	r2, r1
 8005a02:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	1902      	adds	r2, r0, r4
 8005a0a:	19d2      	adds	r2, r2, r7
 8005a0c:	8812      	ldrh	r2, [r2, #0]
 8005a0e:	60da      	str	r2, [r3, #12]
 8005a10:	e05d      	b.n	8005ace <UART_SetConfig+0x466>
      }
      else
      {
        ret = HAL_ERROR;
 8005a12:	231a      	movs	r3, #26
 8005a14:	2218      	movs	r2, #24
 8005a16:	189b      	adds	r3, r3, r2
 8005a18:	19db      	adds	r3, r3, r7
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	701a      	strb	r2, [r3, #0]
 8005a1e:	e056      	b.n	8005ace <UART_SetConfig+0x466>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a20:	231b      	movs	r3, #27
 8005a22:	2218      	movs	r2, #24
 8005a24:	189b      	adds	r3, r3, r2
 8005a26:	19db      	adds	r3, r3, r7
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	2b08      	cmp	r3, #8
 8005a2c:	d822      	bhi.n	8005a74 <UART_SetConfig+0x40c>
 8005a2e:	009a      	lsls	r2, r3, #2
 8005a30:	4b2e      	ldr	r3, [pc, #184]	; (8005aec <UART_SetConfig+0x484>)
 8005a32:	18d3      	adds	r3, r2, r3
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a38:	f7fe fcb4 	bl	80043a4 <HAL_RCC_GetPCLK1Freq>
 8005a3c:	0003      	movs	r3, r0
 8005a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a40:	e021      	b.n	8005a86 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a42:	f7fe fcc5 	bl	80043d0 <HAL_RCC_GetPCLK2Freq>
 8005a46:	0003      	movs	r3, r0
 8005a48:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a4a:	e01c      	b.n	8005a86 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a4c:	4b28      	ldr	r3, [pc, #160]	; (8005af0 <UART_SetConfig+0x488>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2210      	movs	r2, #16
 8005a52:	4013      	ands	r3, r2
 8005a54:	d002      	beq.n	8005a5c <UART_SetConfig+0x3f4>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005a56:	4b27      	ldr	r3, [pc, #156]	; (8005af4 <UART_SetConfig+0x48c>)
 8005a58:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005a5a:	e014      	b.n	8005a86 <UART_SetConfig+0x41e>
          pclk = (uint32_t) HSI_VALUE;
 8005a5c:	4b26      	ldr	r3, [pc, #152]	; (8005af8 <UART_SetConfig+0x490>)
 8005a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a60:	e011      	b.n	8005a86 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a62:	f7fe fbef 	bl	8004244 <HAL_RCC_GetSysClockFreq>
 8005a66:	0003      	movs	r3, r0
 8005a68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a6a:	e00c      	b.n	8005a86 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a6c:	2380      	movs	r3, #128	; 0x80
 8005a6e:	021b      	lsls	r3, r3, #8
 8005a70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a72:	e008      	b.n	8005a86 <UART_SetConfig+0x41e>
      default:
        pclk = 0U;
 8005a74:	2300      	movs	r3, #0
 8005a76:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005a78:	231a      	movs	r3, #26
 8005a7a:	2218      	movs	r2, #24
 8005a7c:	189b      	adds	r3, r3, r2
 8005a7e:	19db      	adds	r3, r3, r7
 8005a80:	2201      	movs	r2, #1
 8005a82:	701a      	strb	r2, [r3, #0]
        break;
 8005a84:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d020      	beq.n	8005ace <UART_SetConfig+0x466>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	085a      	lsrs	r2, r3, #1
 8005a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a94:	18d2      	adds	r2, r2, r3
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	0019      	movs	r1, r3
 8005a9c:	0010      	movs	r0, r2
 8005a9e:	f7fa fb33 	bl	8000108 <__udivsi3>
 8005aa2:	0003      	movs	r3, r0
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aaa:	2b0f      	cmp	r3, #15
 8005aac:	d909      	bls.n	8005ac2 <UART_SetConfig+0x45a>
 8005aae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ab0:	2380      	movs	r3, #128	; 0x80
 8005ab2:	025b      	lsls	r3, r3, #9
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d204      	bcs.n	8005ac2 <UART_SetConfig+0x45a>
      {
        huart->Instance->BRR = usartdiv;
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005abe:	60da      	str	r2, [r3, #12]
 8005ac0:	e005      	b.n	8005ace <UART_SetConfig+0x466>
      }
      else
      {
        ret = HAL_ERROR;
 8005ac2:	231a      	movs	r3, #26
 8005ac4:	2218      	movs	r2, #24
 8005ac6:	189b      	adds	r3, r3, r2
 8005ac8:	19db      	adds	r3, r3, r7
 8005aca:	2201      	movs	r2, #1
 8005acc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005ada:	231a      	movs	r3, #26
 8005adc:	2218      	movs	r2, #24
 8005ade:	189b      	adds	r3, r3, r2
 8005ae0:	19db      	adds	r3, r3, r7
 8005ae2:	781b      	ldrb	r3, [r3, #0]
}
 8005ae4:	0018      	movs	r0, r3
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	b00e      	add	sp, #56	; 0x38
 8005aea:	bdb0      	pop	{r4, r5, r7, pc}
 8005aec:	08009f78 	.word	0x08009f78
 8005af0:	40021000 	.word	0x40021000
 8005af4:	003d0900 	.word	0x003d0900
 8005af8:	00f42400 	.word	0x00f42400

08005afc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b08:	2201      	movs	r2, #1
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	d00b      	beq.n	8005b26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	4a4a      	ldr	r2, [pc, #296]	; (8005c40 <UART_AdvFeatureConfig+0x144>)
 8005b16:	4013      	ands	r3, r2
 8005b18:	0019      	movs	r1, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	430a      	orrs	r2, r1
 8005b24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	d00b      	beq.n	8005b48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	4a43      	ldr	r2, [pc, #268]	; (8005c44 <UART_AdvFeatureConfig+0x148>)
 8005b38:	4013      	ands	r3, r2
 8005b3a:	0019      	movs	r1, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	430a      	orrs	r2, r1
 8005b46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4c:	2204      	movs	r2, #4
 8005b4e:	4013      	ands	r3, r2
 8005b50:	d00b      	beq.n	8005b6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	4a3b      	ldr	r2, [pc, #236]	; (8005c48 <UART_AdvFeatureConfig+0x14c>)
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	0019      	movs	r1, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	430a      	orrs	r2, r1
 8005b68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6e:	2208      	movs	r2, #8
 8005b70:	4013      	ands	r3, r2
 8005b72:	d00b      	beq.n	8005b8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	4a34      	ldr	r2, [pc, #208]	; (8005c4c <UART_AdvFeatureConfig+0x150>)
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	0019      	movs	r1, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	430a      	orrs	r2, r1
 8005b8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b90:	2210      	movs	r2, #16
 8005b92:	4013      	ands	r3, r2
 8005b94:	d00b      	beq.n	8005bae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	4a2c      	ldr	r2, [pc, #176]	; (8005c50 <UART_AdvFeatureConfig+0x154>)
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	0019      	movs	r1, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	430a      	orrs	r2, r1
 8005bac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	d00b      	beq.n	8005bd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	4a25      	ldr	r2, [pc, #148]	; (8005c54 <UART_AdvFeatureConfig+0x158>)
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	0019      	movs	r1, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	430a      	orrs	r2, r1
 8005bce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd4:	2240      	movs	r2, #64	; 0x40
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	d01d      	beq.n	8005c16 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	4a1d      	ldr	r2, [pc, #116]	; (8005c58 <UART_AdvFeatureConfig+0x15c>)
 8005be2:	4013      	ands	r3, r2
 8005be4:	0019      	movs	r1, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bf6:	2380      	movs	r3, #128	; 0x80
 8005bf8:	035b      	lsls	r3, r3, #13
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d10b      	bne.n	8005c16 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	4a15      	ldr	r2, [pc, #84]	; (8005c5c <UART_AdvFeatureConfig+0x160>)
 8005c06:	4013      	ands	r3, r2
 8005c08:	0019      	movs	r1, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	430a      	orrs	r2, r1
 8005c14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1a:	2280      	movs	r2, #128	; 0x80
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	d00b      	beq.n	8005c38 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	4a0e      	ldr	r2, [pc, #56]	; (8005c60 <UART_AdvFeatureConfig+0x164>)
 8005c28:	4013      	ands	r3, r2
 8005c2a:	0019      	movs	r1, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	430a      	orrs	r2, r1
 8005c36:	605a      	str	r2, [r3, #4]
  }
}
 8005c38:	46c0      	nop			; (mov r8, r8)
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	b002      	add	sp, #8
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	fffdffff 	.word	0xfffdffff
 8005c44:	fffeffff 	.word	0xfffeffff
 8005c48:	fffbffff 	.word	0xfffbffff
 8005c4c:	ffff7fff 	.word	0xffff7fff
 8005c50:	ffffefff 	.word	0xffffefff
 8005c54:	ffffdfff 	.word	0xffffdfff
 8005c58:	ffefffff 	.word	0xffefffff
 8005c5c:	ff9fffff 	.word	0xff9fffff
 8005c60:	fff7ffff 	.word	0xfff7ffff

08005c64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af02      	add	r7, sp, #8
 8005c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2280      	movs	r2, #128	; 0x80
 8005c70:	2100      	movs	r1, #0
 8005c72:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c74:	f7fd fb64 	bl	8003340 <HAL_GetTick>
 8005c78:	0003      	movs	r3, r0
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2208      	movs	r2, #8
 8005c84:	4013      	ands	r3, r2
 8005c86:	2b08      	cmp	r3, #8
 8005c88:	d10c      	bne.n	8005ca4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2280      	movs	r2, #128	; 0x80
 8005c8e:	0391      	lsls	r1, r2, #14
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	4a17      	ldr	r2, [pc, #92]	; (8005cf0 <UART_CheckIdleState+0x8c>)
 8005c94:	9200      	str	r2, [sp, #0]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f000 f82c 	bl	8005cf4 <UART_WaitOnFlagUntilTimeout>
 8005c9c:	1e03      	subs	r3, r0, #0
 8005c9e:	d001      	beq.n	8005ca4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e021      	b.n	8005ce8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2204      	movs	r2, #4
 8005cac:	4013      	ands	r3, r2
 8005cae:	2b04      	cmp	r3, #4
 8005cb0:	d10c      	bne.n	8005ccc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2280      	movs	r2, #128	; 0x80
 8005cb6:	03d1      	lsls	r1, r2, #15
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	4a0d      	ldr	r2, [pc, #52]	; (8005cf0 <UART_CheckIdleState+0x8c>)
 8005cbc:	9200      	str	r2, [sp, #0]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f000 f818 	bl	8005cf4 <UART_WaitOnFlagUntilTimeout>
 8005cc4:	1e03      	subs	r3, r0, #0
 8005cc6:	d001      	beq.n	8005ccc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e00d      	b.n	8005ce8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2220      	movs	r2, #32
 8005cd0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2220      	movs	r2, #32
 8005cd6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2274      	movs	r2, #116	; 0x74
 8005ce2:	2100      	movs	r1, #0
 8005ce4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	0018      	movs	r0, r3
 8005cea:	46bd      	mov	sp, r7
 8005cec:	b004      	add	sp, #16
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	01ffffff 	.word	0x01ffffff

08005cf4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b094      	sub	sp, #80	; 0x50
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	603b      	str	r3, [r7, #0]
 8005d00:	1dfb      	adds	r3, r7, #7
 8005d02:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d04:	e0a3      	b.n	8005e4e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d08:	3301      	adds	r3, #1
 8005d0a:	d100      	bne.n	8005d0e <UART_WaitOnFlagUntilTimeout+0x1a>
 8005d0c:	e09f      	b.n	8005e4e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d0e:	f7fd fb17 	bl	8003340 <HAL_GetTick>
 8005d12:	0002      	movs	r2, r0
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	1ad3      	subs	r3, r2, r3
 8005d18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d302      	bcc.n	8005d24 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d13d      	bne.n	8005da0 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d24:	f3ef 8310 	mrs	r3, PRIMASK
 8005d28:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d2c:	647b      	str	r3, [r7, #68]	; 0x44
 8005d2e:	2301      	movs	r3, #1
 8005d30:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d34:	f383 8810 	msr	PRIMASK, r3
}
 8005d38:	46c0      	nop			; (mov r8, r8)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	494c      	ldr	r1, [pc, #304]	; (8005e78 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005d46:	400a      	ands	r2, r1
 8005d48:	601a      	str	r2, [r3, #0]
 8005d4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d4c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d50:	f383 8810 	msr	PRIMASK, r3
}
 8005d54:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d56:	f3ef 8310 	mrs	r3, PRIMASK
 8005d5a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d5e:	643b      	str	r3, [r7, #64]	; 0x40
 8005d60:	2301      	movs	r3, #1
 8005d62:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d66:	f383 8810 	msr	PRIMASK, r3
}
 8005d6a:	46c0      	nop			; (mov r8, r8)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	689a      	ldr	r2, [r3, #8]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2101      	movs	r1, #1
 8005d78:	438a      	bics	r2, r1
 8005d7a:	609a      	str	r2, [r3, #8]
 8005d7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d82:	f383 8810 	msr	PRIMASK, r3
}
 8005d86:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2220      	movs	r2, #32
 8005d92:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2274      	movs	r2, #116	; 0x74
 8005d98:	2100      	movs	r1, #0
 8005d9a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	e067      	b.n	8005e70 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2204      	movs	r2, #4
 8005da8:	4013      	ands	r3, r2
 8005daa:	d050      	beq.n	8005e4e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	69da      	ldr	r2, [r3, #28]
 8005db2:	2380      	movs	r3, #128	; 0x80
 8005db4:	011b      	lsls	r3, r3, #4
 8005db6:	401a      	ands	r2, r3
 8005db8:	2380      	movs	r3, #128	; 0x80
 8005dba:	011b      	lsls	r3, r3, #4
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d146      	bne.n	8005e4e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2280      	movs	r2, #128	; 0x80
 8005dc6:	0112      	lsls	r2, r2, #4
 8005dc8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dca:	f3ef 8310 	mrs	r3, PRIMASK
 8005dce:	613b      	str	r3, [r7, #16]
  return(result);
 8005dd0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	f383 8810 	msr	PRIMASK, r3
}
 8005dde:	46c0      	nop			; (mov r8, r8)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4923      	ldr	r1, [pc, #140]	; (8005e78 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005dec:	400a      	ands	r2, r1
 8005dee:	601a      	str	r2, [r3, #0]
 8005df0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005df2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	f383 8810 	msr	PRIMASK, r3
}
 8005dfa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dfc:	f3ef 8310 	mrs	r3, PRIMASK
 8005e00:	61fb      	str	r3, [r7, #28]
  return(result);
 8005e02:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e04:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e06:	2301      	movs	r3, #1
 8005e08:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e0a:	6a3b      	ldr	r3, [r7, #32]
 8005e0c:	f383 8810 	msr	PRIMASK, r3
}
 8005e10:	46c0      	nop			; (mov r8, r8)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	689a      	ldr	r2, [r3, #8]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2101      	movs	r1, #1
 8005e1e:	438a      	bics	r2, r1
 8005e20:	609a      	str	r2, [r3, #8]
 8005e22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e24:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e28:	f383 8810 	msr	PRIMASK, r3
}
 8005e2c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2220      	movs	r2, #32
 8005e32:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2220      	movs	r2, #32
 8005e38:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2280      	movs	r2, #128	; 0x80
 8005e3e:	2120      	movs	r1, #32
 8005e40:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2274      	movs	r2, #116	; 0x74
 8005e46:	2100      	movs	r1, #0
 8005e48:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e010      	b.n	8005e70 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	69db      	ldr	r3, [r3, #28]
 8005e54:	68ba      	ldr	r2, [r7, #8]
 8005e56:	4013      	ands	r3, r2
 8005e58:	68ba      	ldr	r2, [r7, #8]
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	425a      	negs	r2, r3
 8005e5e:	4153      	adcs	r3, r2
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	001a      	movs	r2, r3
 8005e64:	1dfb      	adds	r3, r7, #7
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d100      	bne.n	8005e6e <UART_WaitOnFlagUntilTimeout+0x17a>
 8005e6c:	e74b      	b.n	8005d06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	0018      	movs	r0, r3
 8005e72:	46bd      	mov	sp, r7
 8005e74:	b014      	add	sp, #80	; 0x50
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	fffffe5f 	.word	0xfffffe5f

08005e7c <GY30_WriteCommand>:
#include <easy_log.h>
#include "gy30.h"

/* Write command */
HAL_StatusTypeDef GY30_WriteCommand(SI2C_Handle handle, uint8_t command)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	000a      	movs	r2, r1
 8005e86:	1cfb      	adds	r3, r7, #3
 8005e88:	701a      	strb	r2, [r3, #0]
	if( IIC_Send_Multi_Byte(handle, &command, 1) )
 8005e8a:	1cf9      	adds	r1, r7, #3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	0018      	movs	r0, r3
 8005e92:	f7fc fe2d 	bl	8002af0 <IIC_Send_Multi_Byte>
 8005e96:	1e03      	subs	r3, r0, #0
 8005e98:	d001      	beq.n	8005e9e <GY30_WriteCommand+0x22>
		return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e000      	b.n	8005ea0 <GY30_WriteCommand+0x24>
	else
		return HAL_OK;
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	0018      	movs	r0, r3
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	b002      	add	sp, #8
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <GY30_ContinuouslyMode>:

/* Continuous measurement mode  */
HAL_StatusTypeDef GY30_ContinuouslyMode(SI2C_Handle handle, uint8_t *data, uint8_t command)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	1dfb      	adds	r3, r7, #7
 8005eb4:	701a      	strb	r2, [r3, #0]
	if( IIC_Send_Multi_Byte(handle, &command, 1) )
 8005eb6:	1df9      	adds	r1, r7, #7
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	0018      	movs	r0, r3
 8005ebe:	f7fc fe17 	bl	8002af0 <IIC_Send_Multi_Byte>
 8005ec2:	1e03      	subs	r3, r0, #0
 8005ec4:	d001      	beq.n	8005eca <GY30_ContinuouslyMode+0x22>
		return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e00d      	b.n	8005ee6 <GY30_ContinuouslyMode+0x3e>

	HAL_Delay(180);	/* H-resolution mode measurement.( max. 180ms. ) */
 8005eca:	20b4      	movs	r0, #180	; 0xb4
 8005ecc:	f7fd fa42 	bl	8003354 <HAL_Delay>

	if( IIC_Read_Multi_Byte(handle, data, 2) )
 8005ed0:	68b9      	ldr	r1, [r7, #8]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2202      	movs	r2, #2
 8005ed6:	0018      	movs	r0, r3
 8005ed8:	f7fc ff0d 	bl	8002cf6 <IIC_Read_Multi_Byte>
 8005edc:	1e03      	subs	r3, r0, #0
 8005ede:	d001      	beq.n	8005ee4 <GY30_ContinuouslyMode+0x3c>
		return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e000      	b.n	8005ee6 <GY30_ContinuouslyMode+0x3e>
	else
		return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	0018      	movs	r0, r3
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	b004      	add	sp, #16
 8005eec:	bd80      	pop	{r7, pc}
	...

08005ef0 <GY30_Measurement>:
		return HAL_OK;
}

/* GY-30 Init */
uint16_t GY30_Measurement(SI2C_Handle handle)
{
 8005ef0:	b5b0      	push	{r4, r5, r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
	uint8_t data[2] = {0x00, 0x00};
 8005ef8:	240c      	movs	r4, #12
 8005efa:	193b      	adds	r3, r7, r4
 8005efc:	2200      	movs	r2, #0
 8005efe:	801a      	strh	r2, [r3, #0]
	uint16_t lux;
    if(HAL_OK == GY30_ContinuouslyMode(handle, data, GY30_Continuously_H_mode))
 8005f00:	1939      	adds	r1, r7, r4
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2210      	movs	r2, #16
 8005f06:	0018      	movs	r0, r3
 8005f08:	f7ff ffce 	bl	8005ea8 <GY30_ContinuouslyMode>
 8005f0c:	1e03      	subs	r3, r0, #0
 8005f0e:	d119      	bne.n	8005f44 <GY30_Measurement+0x54>
    		lux = (uint16_t)( ((data[0] << 8) + data[1]) / 1.2 );	/* Limited minimum precision 1 lux */
 8005f10:	193b      	adds	r3, r7, r4
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	021b      	lsls	r3, r3, #8
 8005f16:	193a      	adds	r2, r7, r4
 8005f18:	7852      	ldrb	r2, [r2, #1]
 8005f1a:	189b      	adds	r3, r3, r2
 8005f1c:	0018      	movs	r0, r3
 8005f1e:	f7fb f975 	bl	800120c <__aeabi_i2d>
 8005f22:	4a0d      	ldr	r2, [pc, #52]	; (8005f58 <GY30_Measurement+0x68>)
 8005f24:	4b0d      	ldr	r3, [pc, #52]	; (8005f5c <GY30_Measurement+0x6c>)
 8005f26:	f7fa fab3 	bl	8000490 <__aeabi_ddiv>
 8005f2a:	0002      	movs	r2, r0
 8005f2c:	000b      	movs	r3, r1
 8005f2e:	250e      	movs	r5, #14
 8005f30:	197c      	adds	r4, r7, r5
 8005f32:	0010      	movs	r0, r2
 8005f34:	0019      	movs	r1, r3
 8005f36:	f7fa f9c1 	bl	80002bc <__aeabi_d2uiz>
 8005f3a:	0003      	movs	r3, r0
 8005f3c:	8023      	strh	r3, [r4, #0]
    else {
    	printf("Measurement Fail\r\n");
    	return 0xFFFF;	/* The measurement result cannot be greater than 0xFFFF (result/1.2) */
    }

    return lux;
 8005f3e:	197b      	adds	r3, r7, r5
 8005f40:	881b      	ldrh	r3, [r3, #0]
 8005f42:	e004      	b.n	8005f4e <GY30_Measurement+0x5e>
    	printf("Measurement Fail\r\n");
 8005f44:	4b06      	ldr	r3, [pc, #24]	; (8005f60 <GY30_Measurement+0x70>)
 8005f46:	0018      	movs	r0, r3
 8005f48:	f003 fa4e 	bl	80093e8 <puts>
    	return 0xFFFF;	/* The measurement result cannot be greater than 0xFFFF (result/1.2) */
 8005f4c:	4b05      	ldr	r3, [pc, #20]	; (8005f64 <GY30_Measurement+0x74>)
}
 8005f4e:	0018      	movs	r0, r3
 8005f50:	46bd      	mov	sp, r7
 8005f52:	b004      	add	sp, #16
 8005f54:	bdb0      	pop	{r4, r5, r7, pc}
 8005f56:	46c0      	nop			; (mov r8, r8)
 8005f58:	33333333 	.word	0x33333333
 8005f5c:	3ff33333 	.word	0x3ff33333
 8005f60:	08009d58 	.word	0x08009d58
 8005f64:	0000ffff 	.word	0x0000ffff

08005f68 <GY30_Init>:

/* GY-30 Init */
uint8_t GY30_Init(SI2C_Handle handle)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
	/* Check if GY-30 connected to I2C */
	if(!(IIC_Check_Device(handle, 3)))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2103      	movs	r1, #3
 8005f74:	0018      	movs	r0, r3
 8005f76:	f7fc fd6f 	bl	8002a58 <IIC_Check_Device>
 8005f7a:	1e03      	subs	r3, r0, #0
 8005f7c:	d104      	bne.n	8005f88 <GY30_Init+0x20>
	{
		printf("GY-30 is ready\r\n");
 8005f7e:	4b0b      	ldr	r3, [pc, #44]	; (8005fac <GY30_Init+0x44>)
 8005f80:	0018      	movs	r0, r3
 8005f82:	f003 fa31 	bl	80093e8 <puts>
 8005f86:	e003      	b.n	8005f90 <GY30_Init+0x28>
	} else {
		printf("GY-30 is error\r\n");
 8005f88:	4b09      	ldr	r3, [pc, #36]	; (8005fb0 <GY30_Init+0x48>)
 8005f8a:	0018      	movs	r0, r3
 8005f8c:	f003 fa2c 	bl	80093e8 <puts>
	}
	/* A little delay */
	HAL_Delay(100);
 8005f90:	2064      	movs	r0, #100	; 0x64
 8005f92:	f7fd f9df 	bl	8003354 <HAL_Delay>

	/* Init GY-30 */
    GY30_WriteCommand(handle, GY30_Power_On);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2101      	movs	r1, #1
 8005f9a:	0018      	movs	r0, r3
 8005f9c:	f7ff ff6e 	bl	8005e7c <GY30_WriteCommand>

    /* Return OK */
    return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	0018      	movs	r0, r3
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	b002      	add	sp, #8
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	46c0      	nop			; (mov r8, r8)
 8005fac:	08009d6c 	.word	0x08009d6c
 8005fb0:	08009d7c 	.word	0x08009d7c

08005fb4 <SSD1306_WriteCommand>:
// Screen object
static SSD1306_t SSD1306;

/* Write command */
HAL_StatusTypeDef SSD1306_WriteCommand(SI2C_Handle handle, uint8_t command)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	000a      	movs	r2, r1
 8005fbe:	1cfb      	adds	r3, r7, #3
 8005fc0:	701a      	strb	r2, [r3, #0]
	uint8_t tx_buf[2] = {SSD1306_CMD, 0x00};
 8005fc2:	210c      	movs	r1, #12
 8005fc4:	187b      	adds	r3, r7, r1
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	801a      	strh	r2, [r3, #0]

	tx_buf[1] = command;
 8005fca:	187b      	adds	r3, r7, r1
 8005fcc:	1cfa      	adds	r2, r7, #3
 8005fce:	7812      	ldrb	r2, [r2, #0]
 8005fd0:	705a      	strb	r2, [r3, #1]
	if( IIC_Send_Multi_Byte(handle, tx_buf, 2) )
 8005fd2:	1879      	adds	r1, r7, r1
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2202      	movs	r2, #2
 8005fd8:	0018      	movs	r0, r3
 8005fda:	f7fc fd89 	bl	8002af0 <IIC_Send_Multi_Byte>
 8005fde:	1e03      	subs	r3, r0, #0
 8005fe0:	d001      	beq.n	8005fe6 <SSD1306_WriteCommand+0x32>
		return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e000      	b.n	8005fe8 <SSD1306_WriteCommand+0x34>
	else
		return HAL_OK;
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	0018      	movs	r0, r3
 8005fea:	46bd      	mov	sp, r7
 8005fec:	b004      	add	sp, #16
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <SSD1306_Fill>:
	else
		return HAL_OK;
}

void SSD1306_Fill(SSD1306_COLOR_t color)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	0002      	movs	r2, r0
 8005ff8:	1dfb      	adds	r3, r7, #7
 8005ffa:	701a      	strb	r2, [r3, #0]
    /* Fill screenbuffer with a constant value (color) */
	uint32_t i;
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	60fb      	str	r3, [r7, #12]
 8006000:	e00e      	b.n	8006020 <SSD1306_Fill+0x30>
	{
		SSD1306_Buffer[i] = (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF;
 8006002:	1dfb      	adds	r3, r7, #7
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d101      	bne.n	800600e <SSD1306_Fill+0x1e>
 800600a:	2100      	movs	r1, #0
 800600c:	e000      	b.n	8006010 <SSD1306_Fill+0x20>
 800600e:	21ff      	movs	r1, #255	; 0xff
 8006010:	4a08      	ldr	r2, [pc, #32]	; (8006034 <SSD1306_Fill+0x44>)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	18d3      	adds	r3, r2, r3
 8006016:	1c0a      	adds	r2, r1, #0
 8006018:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	3301      	adds	r3, #1
 800601e:	60fb      	str	r3, [r7, #12]
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	2380      	movs	r3, #128	; 0x80
 8006024:	00db      	lsls	r3, r3, #3
 8006026:	429a      	cmp	r2, r3
 8006028:	d3eb      	bcc.n	8006002 <SSD1306_Fill+0x12>
	}
}
 800602a:	46c0      	nop			; (mov r8, r8)
 800602c:	46c0      	nop			; (mov r8, r8)
 800602e:	46bd      	mov	sp, r7
 8006030:	b004      	add	sp, #16
 8006032:	bd80      	pop	{r7, pc}
 8006034:	20000250 	.word	0x20000250

08006038 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(SI2C_Handle handle)
{
 8006038:	b590      	push	{r4, r7, lr}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
	uint8_t i;
    for (i = 0; i < 8; i++)
 8006040:	230f      	movs	r3, #15
 8006042:	18fb      	adds	r3, r7, r3
 8006044:	2200      	movs	r2, #0
 8006046:	701a      	strb	r2, [r3, #0]
 8006048:	e022      	b.n	8006090 <SSD1306_UpdateScreen+0x58>
    {
    	SSD1306_WriteCommand(handle, 0xB0 + i);
 800604a:	240f      	movs	r4, #15
 800604c:	193b      	adds	r3, r7, r4
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	3b50      	subs	r3, #80	; 0x50
 8006052:	b2da      	uxtb	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	0011      	movs	r1, r2
 8006058:	0018      	movs	r0, r3
 800605a:	f7ff ffab 	bl	8005fb4 <SSD1306_WriteCommand>
        SSD1306_WriteCommand(handle, 0x02);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2102      	movs	r1, #2
 8006062:	0018      	movs	r0, r3
 8006064:	f7ff ffa6 	bl	8005fb4 <SSD1306_WriteCommand>
        SSD1306_WriteCommand(handle, 0x10);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2110      	movs	r1, #16
 800606c:	0018      	movs	r0, r3
 800606e:	f7ff ffa1 	bl	8005fb4 <SSD1306_WriteCommand>

        IIC_Mem_Write(handle, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
 8006072:	193b      	adds	r3, r7, r4
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	01da      	lsls	r2, r3, #7
 8006078:	4b0a      	ldr	r3, [pc, #40]	; (80060a4 <SSD1306_UpdateScreen+0x6c>)
 800607a:	18d2      	adds	r2, r2, r3
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	2380      	movs	r3, #128	; 0x80
 8006080:	2140      	movs	r1, #64	; 0x40
 8006082:	f7fc fd81 	bl	8002b88 <IIC_Mem_Write>
    for (i = 0; i < 8; i++)
 8006086:	193b      	adds	r3, r7, r4
 8006088:	781a      	ldrb	r2, [r3, #0]
 800608a:	193b      	adds	r3, r7, r4
 800608c:	3201      	adds	r2, #1
 800608e:	701a      	strb	r2, [r3, #0]
 8006090:	230f      	movs	r3, #15
 8006092:	18fb      	adds	r3, r7, r3
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	2b07      	cmp	r3, #7
 8006098:	d9d7      	bls.n	800604a <SSD1306_UpdateScreen+0x12>
    }
}
 800609a:	46c0      	nop			; (mov r8, r8)
 800609c:	46c0      	nop			; (mov r8, r8)
 800609e:	46bd      	mov	sp, r7
 80060a0:	b005      	add	sp, #20
 80060a2:	bd90      	pop	{r4, r7, pc}
 80060a4:	20000250 	.word	0x20000250

080060a8 <OLED_Init>:

/* SSD1306 Init */
uint8_t OLED_Init(SI2C_Handle handle)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
	/* Check if LCD connected to I2C */
	if(!(IIC_Check_Device(handle, 3)))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2103      	movs	r1, #3
 80060b4:	0018      	movs	r0, r3
 80060b6:	f7fc fccf 	bl	8002a58 <IIC_Check_Device>
 80060ba:	1e03      	subs	r3, r0, #0
 80060bc:	d104      	bne.n	80060c8 <OLED_Init+0x20>
	{
		printf("SSD1306 is ready\r\n");
 80060be:	4b56      	ldr	r3, [pc, #344]	; (8006218 <OLED_Init+0x170>)
 80060c0:	0018      	movs	r0, r3
 80060c2:	f003 f991 	bl	80093e8 <puts>
 80060c6:	e003      	b.n	80060d0 <OLED_Init+0x28>
	} else {
		printf("SSD1306 is error\r\n");
 80060c8:	4b54      	ldr	r3, [pc, #336]	; (800621c <OLED_Init+0x174>)
 80060ca:	0018      	movs	r0, r3
 80060cc:	f003 f98c 	bl	80093e8 <puts>
	}
	/* A little delay */
	HAL_Delay(100);
 80060d0:	2064      	movs	r0, #100	; 0x64
 80060d2:	f7fd f93f 	bl	8003354 <HAL_Delay>

	/* Init OLED */
    SSD1306_WriteCommand(handle, 0xAE); //display off
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	21ae      	movs	r1, #174	; 0xae
 80060da:	0018      	movs	r0, r3
 80060dc:	f7ff ff6a 	bl	8005fb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(handle, 0x20); //Set Memory Addressing Mode
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2120      	movs	r1, #32
 80060e4:	0018      	movs	r0, r3
 80060e6:	f7ff ff65 	bl	8005fb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(handle, 0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2110      	movs	r1, #16
 80060ee:	0018      	movs	r0, r3
 80060f0:	f7ff ff60 	bl	8005fb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(handle, 0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	21b0      	movs	r1, #176	; 0xb0
 80060f8:	0018      	movs	r0, r3
 80060fa:	f7ff ff5b 	bl	8005fb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(handle, 0xC8); //Set COM Output Scan Direction
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	21c8      	movs	r1, #200	; 0xc8
 8006102:	0018      	movs	r0, r3
 8006104:	f7ff ff56 	bl	8005fb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(handle, 0x00); //---set low column address
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2100      	movs	r1, #0
 800610c:	0018      	movs	r0, r3
 800610e:	f7ff ff51 	bl	8005fb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(handle, 0x10); //---set high column address
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2110      	movs	r1, #16
 8006116:	0018      	movs	r0, r3
 8006118:	f7ff ff4c 	bl	8005fb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(handle, 0x40); //--set start line address
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2140      	movs	r1, #64	; 0x40
 8006120:	0018      	movs	r0, r3
 8006122:	f7ff ff47 	bl	8005fb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(handle, 0x81); //--set contrast control register
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2181      	movs	r1, #129	; 0x81
 800612a:	0018      	movs	r0, r3
 800612c:	f7ff ff42 	bl	8005fb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(handle, 0xFF);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	21ff      	movs	r1, #255	; 0xff
 8006134:	0018      	movs	r0, r3
 8006136:	f7ff ff3d 	bl	8005fb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(handle, 0xA1); //--set segment re-map 0 to 127
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	21a1      	movs	r1, #161	; 0xa1
 800613e:	0018      	movs	r0, r3
 8006140:	f7ff ff38 	bl	8005fb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(handle, 0xA6); //--set normal display
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	21a6      	movs	r1, #166	; 0xa6
 8006148:	0018      	movs	r0, r3
 800614a:	f7ff ff33 	bl	8005fb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(handle, 0xA8); //--set multiplex ratio(1 to 64)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	21a8      	movs	r1, #168	; 0xa8
 8006152:	0018      	movs	r0, r3
 8006154:	f7ff ff2e 	bl	8005fb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(handle, 0x3F); //
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	213f      	movs	r1, #63	; 0x3f
 800615c:	0018      	movs	r0, r3
 800615e:	f7ff ff29 	bl	8005fb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(handle, 0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	21a4      	movs	r1, #164	; 0xa4
 8006166:	0018      	movs	r0, r3
 8006168:	f7ff ff24 	bl	8005fb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(handle, 0xD3); //-set display offset
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	21d3      	movs	r1, #211	; 0xd3
 8006170:	0018      	movs	r0, r3
 8006172:	f7ff ff1f 	bl	8005fb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(handle, 0x00); //-not offset
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2100      	movs	r1, #0
 800617a:	0018      	movs	r0, r3
 800617c:	f7ff ff1a 	bl	8005fb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(handle, 0xD5); //--set display clock divide ratio/oscillator frequency
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	21d5      	movs	r1, #213	; 0xd5
 8006184:	0018      	movs	r0, r3
 8006186:	f7ff ff15 	bl	8005fb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(handle, 0xF0); //--set divide ratio
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	21f0      	movs	r1, #240	; 0xf0
 800618e:	0018      	movs	r0, r3
 8006190:	f7ff ff10 	bl	8005fb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(handle, 0xD9); //--set pre-charge period
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	21d9      	movs	r1, #217	; 0xd9
 8006198:	0018      	movs	r0, r3
 800619a:	f7ff ff0b 	bl	8005fb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(handle, 0x22); //
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2122      	movs	r1, #34	; 0x22
 80061a2:	0018      	movs	r0, r3
 80061a4:	f7ff ff06 	bl	8005fb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(handle, 0xDA); //--set com pins hardware configuration
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	21da      	movs	r1, #218	; 0xda
 80061ac:	0018      	movs	r0, r3
 80061ae:	f7ff ff01 	bl	8005fb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(handle, 0x12);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2112      	movs	r1, #18
 80061b6:	0018      	movs	r0, r3
 80061b8:	f7ff fefc 	bl	8005fb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(handle, 0xDB); //--set vcomh
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	21db      	movs	r1, #219	; 0xdb
 80061c0:	0018      	movs	r0, r3
 80061c2:	f7ff fef7 	bl	8005fb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(handle, 0x20); //0x20,0.77xVcc
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2120      	movs	r1, #32
 80061ca:	0018      	movs	r0, r3
 80061cc:	f7ff fef2 	bl	8005fb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(handle, 0x8D); //--set DC-DC enable
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	218d      	movs	r1, #141	; 0x8d
 80061d4:	0018      	movs	r0, r3
 80061d6:	f7ff feed 	bl	8005fb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(handle, 0x14); //
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2114      	movs	r1, #20
 80061de:	0018      	movs	r0, r3
 80061e0:	f7ff fee8 	bl	8005fb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(handle, 0xAF); //--turn on SSD1306 panel
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	21af      	movs	r1, #175	; 0xaf
 80061e8:	0018      	movs	r0, r3
 80061ea:	f7ff fee3 	bl	8005fb4 <SSD1306_WriteCommand>

    /* Clear screen */
    SSD1306_Fill(SSD1306_COLOR_BLACK);
 80061ee:	2000      	movs	r0, #0
 80061f0:	f7ff fefe 	bl	8005ff0 <SSD1306_Fill>

    /* Update screen */
    SSD1306_UpdateScreen(handle);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	0018      	movs	r0, r3
 80061f8:	f7ff ff1e 	bl	8006038 <SSD1306_UpdateScreen>

    /* Set default values */
    SSD1306.CurrentX = 0;
 80061fc:	4b08      	ldr	r3, [pc, #32]	; (8006220 <OLED_Init+0x178>)
 80061fe:	2200      	movs	r2, #0
 8006200:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8006202:	4b07      	ldr	r3, [pc, #28]	; (8006220 <OLED_Init+0x178>)
 8006204:	2200      	movs	r2, #0
 8006206:	805a      	strh	r2, [r3, #2]

    /* Initialized OK */
    SSD1306.Initialized = 1;
 8006208:	4b05      	ldr	r3, [pc, #20]	; (8006220 <OLED_Init+0x178>)
 800620a:	2201      	movs	r2, #1
 800620c:	715a      	strb	r2, [r3, #5]

    /* Return OK */
    return HAL_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	0018      	movs	r0, r3
 8006212:	46bd      	mov	sp, r7
 8006214:	b002      	add	sp, #8
 8006216:	bd80      	pop	{r7, pc}
 8006218:	08009d8c 	.word	0x08009d8c
 800621c:	08009da0 	.word	0x08009da0
 8006220:	20000650 	.word	0x20000650

08006224 <SSD1306_DrawPixel>:
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
uint8_t SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color)
{
 8006224:	b590      	push	{r4, r7, lr}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	0004      	movs	r4, r0
 800622c:	0008      	movs	r0, r1
 800622e:	0011      	movs	r1, r2
 8006230:	1dbb      	adds	r3, r7, #6
 8006232:	1c22      	adds	r2, r4, #0
 8006234:	801a      	strh	r2, [r3, #0]
 8006236:	1d3b      	adds	r3, r7, #4
 8006238:	1c02      	adds	r2, r0, #0
 800623a:	801a      	strh	r2, [r3, #0]
 800623c:	1cfb      	adds	r3, r7, #3
 800623e:	1c0a      	adds	r2, r1, #0
 8006240:	701a      	strb	r2, [r3, #0]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8006242:	1dbb      	adds	r3, r7, #6
 8006244:	881b      	ldrh	r3, [r3, #0]
 8006246:	2b7f      	cmp	r3, #127	; 0x7f
 8006248:	d803      	bhi.n	8006252 <SSD1306_DrawPixel+0x2e>
 800624a:	1d3b      	adds	r3, r7, #4
 800624c:	881b      	ldrh	r3, [r3, #0]
 800624e:	2b3f      	cmp	r3, #63	; 0x3f
 8006250:	d901      	bls.n	8006256 <SSD1306_DrawPixel+0x32>
    {
        // Don't write outside the buffer
        return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e04e      	b.n	80062f4 <SSD1306_DrawPixel+0xd0>
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8006256:	4b29      	ldr	r3, [pc, #164]	; (80062fc <SSD1306_DrawPixel+0xd8>)
 8006258:	791b      	ldrb	r3, [r3, #4]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d006      	beq.n	800626c <SSD1306_DrawPixel+0x48>
    {
        color = (SSD1306_COLOR_t)!color;
 800625e:	1cfb      	adds	r3, r7, #3
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	425a      	negs	r2, r3
 8006264:	4153      	adcs	r3, r2
 8006266:	b2da      	uxtb	r2, r3
 8006268:	1cfb      	adds	r3, r7, #3
 800626a:	701a      	strb	r2, [r3, #0]
    }

    // Draw in the correct color
    if (color == SSD1306_COLOR_WHITE)
 800626c:	1cfb      	adds	r3, r7, #3
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d11e      	bne.n	80062b2 <SSD1306_DrawPixel+0x8e>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8006274:	1dbb      	adds	r3, r7, #6
 8006276:	881a      	ldrh	r2, [r3, #0]
 8006278:	1d3b      	adds	r3, r7, #4
 800627a:	881b      	ldrh	r3, [r3, #0]
 800627c:	08db      	lsrs	r3, r3, #3
 800627e:	b298      	uxth	r0, r3
 8006280:	0003      	movs	r3, r0
 8006282:	01db      	lsls	r3, r3, #7
 8006284:	18d3      	adds	r3, r2, r3
 8006286:	4a1e      	ldr	r2, [pc, #120]	; (8006300 <SSD1306_DrawPixel+0xdc>)
 8006288:	5cd3      	ldrb	r3, [r2, r3]
 800628a:	b25a      	sxtb	r2, r3
 800628c:	1d3b      	adds	r3, r7, #4
 800628e:	881b      	ldrh	r3, [r3, #0]
 8006290:	2107      	movs	r1, #7
 8006292:	400b      	ands	r3, r1
 8006294:	2101      	movs	r1, #1
 8006296:	4099      	lsls	r1, r3
 8006298:	000b      	movs	r3, r1
 800629a:	b25b      	sxtb	r3, r3
 800629c:	4313      	orrs	r3, r2
 800629e:	b259      	sxtb	r1, r3
 80062a0:	1dbb      	adds	r3, r7, #6
 80062a2:	881a      	ldrh	r2, [r3, #0]
 80062a4:	0003      	movs	r3, r0
 80062a6:	01db      	lsls	r3, r3, #7
 80062a8:	18d3      	adds	r3, r2, r3
 80062aa:	b2c9      	uxtb	r1, r1
 80062ac:	4a14      	ldr	r2, [pc, #80]	; (8006300 <SSD1306_DrawPixel+0xdc>)
 80062ae:	54d1      	strb	r1, [r2, r3]
 80062b0:	e01f      	b.n	80062f2 <SSD1306_DrawPixel+0xce>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80062b2:	1dbb      	adds	r3, r7, #6
 80062b4:	881a      	ldrh	r2, [r3, #0]
 80062b6:	1d3b      	adds	r3, r7, #4
 80062b8:	881b      	ldrh	r3, [r3, #0]
 80062ba:	08db      	lsrs	r3, r3, #3
 80062bc:	b298      	uxth	r0, r3
 80062be:	0003      	movs	r3, r0
 80062c0:	01db      	lsls	r3, r3, #7
 80062c2:	18d3      	adds	r3, r2, r3
 80062c4:	4a0e      	ldr	r2, [pc, #56]	; (8006300 <SSD1306_DrawPixel+0xdc>)
 80062c6:	5cd3      	ldrb	r3, [r2, r3]
 80062c8:	b25b      	sxtb	r3, r3
 80062ca:	1d3a      	adds	r2, r7, #4
 80062cc:	8812      	ldrh	r2, [r2, #0]
 80062ce:	2107      	movs	r1, #7
 80062d0:	400a      	ands	r2, r1
 80062d2:	2101      	movs	r1, #1
 80062d4:	4091      	lsls	r1, r2
 80062d6:	000a      	movs	r2, r1
 80062d8:	b252      	sxtb	r2, r2
 80062da:	43d2      	mvns	r2, r2
 80062dc:	b252      	sxtb	r2, r2
 80062de:	4013      	ands	r3, r2
 80062e0:	b259      	sxtb	r1, r3
 80062e2:	1dbb      	adds	r3, r7, #6
 80062e4:	881a      	ldrh	r2, [r3, #0]
 80062e6:	0003      	movs	r3, r0
 80062e8:	01db      	lsls	r3, r3, #7
 80062ea:	18d3      	adds	r3, r2, r3
 80062ec:	b2c9      	uxtb	r1, r1
 80062ee:	4a04      	ldr	r2, [pc, #16]	; (8006300 <SSD1306_DrawPixel+0xdc>)
 80062f0:	54d1      	strb	r1, [r2, r3]
    }

    return HAL_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	0018      	movs	r0, r3
 80062f6:	46bd      	mov	sp, r7
 80062f8:	b003      	add	sp, #12
 80062fa:	bd90      	pop	{r4, r7, pc}
 80062fc:	20000650 	.word	0x20000650
 8006300:	20000250 	.word	0x20000250

08006304 <SSD1306_WriteChar>:
 * ch      => Character to write
 * Font    => Font to use
 * color => Pixel color
 */
char SSD1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR_t color)
{
 8006304:	b590      	push	{r4, r7, lr}
 8006306:	b089      	sub	sp, #36	; 0x24
 8006308:	af00      	add	r7, sp, #0
 800630a:	0004      	movs	r4, r0
 800630c:	1d38      	adds	r0, r7, #4
 800630e:	6001      	str	r1, [r0, #0]
 8006310:	6042      	str	r2, [r0, #4]
 8006312:	0019      	movs	r1, r3
 8006314:	230f      	movs	r3, #15
 8006316:	18fb      	adds	r3, r7, r3
 8006318:	1c22      	adds	r2, r4, #0
 800631a:	701a      	strb	r2, [r3, #0]
 800631c:	230e      	movs	r3, #14
 800631e:	18fb      	adds	r3, r7, r3
 8006320:	1c0a      	adds	r2, r1, #0
 8006322:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8006324:	4b3c      	ldr	r3, [pc, #240]	; (8006418 <SSD1306_WriteChar+0x114>)
 8006326:	881b      	ldrh	r3, [r3, #0]
 8006328:	001a      	movs	r2, r3
 800632a:	1d3b      	adds	r3, r7, #4
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	18d3      	adds	r3, r2, r3
 8006330:	2b7f      	cmp	r3, #127	; 0x7f
 8006332:	dc07      	bgt.n	8006344 <SSD1306_WriteChar+0x40>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8006334:	4b38      	ldr	r3, [pc, #224]	; (8006418 <SSD1306_WriteChar+0x114>)
 8006336:	885b      	ldrh	r3, [r3, #2]
 8006338:	001a      	movs	r2, r3
 800633a:	1d3b      	adds	r3, r7, #4
 800633c:	785b      	ldrb	r3, [r3, #1]
 800633e:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8006340:	2b3f      	cmp	r3, #63	; 0x3f
 8006342:	dd01      	ble.n	8006348 <SSD1306_WriteChar+0x44>
    {
        // Not enough space on current line
        return HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	e062      	b.n	800640e <SSD1306_WriteChar+0x10a>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8006348:	2300      	movs	r3, #0
 800634a:	61fb      	str	r3, [r7, #28]
 800634c:	e04d      	b.n	80063ea <SSD1306_WriteChar+0xe6>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800634e:	1d3b      	adds	r3, r7, #4
 8006350:	685a      	ldr	r2, [r3, #4]
 8006352:	230f      	movs	r3, #15
 8006354:	18fb      	adds	r3, r7, r3
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	3b20      	subs	r3, #32
 800635a:	1d39      	adds	r1, r7, #4
 800635c:	7849      	ldrb	r1, [r1, #1]
 800635e:	434b      	muls	r3, r1
 8006360:	0019      	movs	r1, r3
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	18cb      	adds	r3, r1, r3
 8006366:	005b      	lsls	r3, r3, #1
 8006368:	18d3      	adds	r3, r2, r3
 800636a:	881b      	ldrh	r3, [r3, #0]
 800636c:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 800636e:	2300      	movs	r3, #0
 8006370:	61bb      	str	r3, [r7, #24]
 8006372:	e031      	b.n	80063d8 <SSD1306_WriteChar+0xd4>
        {
            if ((b << j) & 0x8000)
 8006374:	697a      	ldr	r2, [r7, #20]
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	409a      	lsls	r2, r3
 800637a:	2380      	movs	r3, #128	; 0x80
 800637c:	021b      	lsls	r3, r3, #8
 800637e:	4013      	ands	r3, r2
 8006380:	d012      	beq.n	80063a8 <SSD1306_WriteChar+0xa4>
            {
            	SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8006382:	4b25      	ldr	r3, [pc, #148]	; (8006418 <SSD1306_WriteChar+0x114>)
 8006384:	881a      	ldrh	r2, [r3, #0]
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	b29b      	uxth	r3, r3
 800638a:	18d3      	adds	r3, r2, r3
 800638c:	b298      	uxth	r0, r3
 800638e:	4b22      	ldr	r3, [pc, #136]	; (8006418 <SSD1306_WriteChar+0x114>)
 8006390:	885a      	ldrh	r2, [r3, #2]
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	b29b      	uxth	r3, r3
 8006396:	18d3      	adds	r3, r2, r3
 8006398:	b299      	uxth	r1, r3
 800639a:	230e      	movs	r3, #14
 800639c:	18fb      	adds	r3, r7, r3
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	001a      	movs	r2, r3
 80063a2:	f7ff ff3f 	bl	8006224 <SSD1306_DrawPixel>
 80063a6:	e014      	b.n	80063d2 <SSD1306_WriteChar+0xce>
            }
            else
            {
            	SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80063a8:	4b1b      	ldr	r3, [pc, #108]	; (8006418 <SSD1306_WriteChar+0x114>)
 80063aa:	881a      	ldrh	r2, [r3, #0]
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	18d3      	adds	r3, r2, r3
 80063b2:	b298      	uxth	r0, r3
 80063b4:	4b18      	ldr	r3, [pc, #96]	; (8006418 <SSD1306_WriteChar+0x114>)
 80063b6:	885a      	ldrh	r2, [r3, #2]
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	18d3      	adds	r3, r2, r3
 80063be:	b299      	uxth	r1, r3
 80063c0:	230e      	movs	r3, #14
 80063c2:	18fb      	adds	r3, r7, r3
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	425a      	negs	r2, r3
 80063c8:	4153      	adcs	r3, r2
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	001a      	movs	r2, r3
 80063ce:	f7ff ff29 	bl	8006224 <SSD1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	3301      	adds	r3, #1
 80063d6:	61bb      	str	r3, [r7, #24]
 80063d8:	1d3b      	adds	r3, r7, #4
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	001a      	movs	r2, r3
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d3c7      	bcc.n	8006374 <SSD1306_WriteChar+0x70>
    for (i = 0; i < Font.FontHeight; i++)
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	3301      	adds	r3, #1
 80063e8:	61fb      	str	r3, [r7, #28]
 80063ea:	1d3b      	adds	r3, r7, #4
 80063ec:	785b      	ldrb	r3, [r3, #1]
 80063ee:	001a      	movs	r2, r3
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d3ab      	bcc.n	800634e <SSD1306_WriteChar+0x4a>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80063f6:	4b08      	ldr	r3, [pc, #32]	; (8006418 <SSD1306_WriteChar+0x114>)
 80063f8:	881a      	ldrh	r2, [r3, #0]
 80063fa:	1d3b      	adds	r3, r7, #4
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	b29b      	uxth	r3, r3
 8006400:	18d3      	adds	r3, r2, r3
 8006402:	b29a      	uxth	r2, r3
 8006404:	4b04      	ldr	r3, [pc, #16]	; (8006418 <SSD1306_WriteChar+0x114>)
 8006406:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8006408:	230f      	movs	r3, #15
 800640a:	18fb      	adds	r3, r7, r3
 800640c:	781b      	ldrb	r3, [r3, #0]
}
 800640e:	0018      	movs	r0, r3
 8006410:	46bd      	mov	sp, r7
 8006412:	b009      	add	sp, #36	; 0x24
 8006414:	bd90      	pop	{r4, r7, pc}
 8006416:	46c0      	nop			; (mov r8, r8)
 8006418:	20000650 	.word	0x20000650

0800641c <SSD1306_WriteString>:

/*
 * Write full string to screenbuffer
 */
char SSD1306_WriteString(char* str, FontDef Font, SSD1306_COLOR_t color)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	1d38      	adds	r0, r7, #4
 8006426:	6001      	str	r1, [r0, #0]
 8006428:	6042      	str	r2, [r0, #4]
 800642a:	001a      	movs	r2, r3
 800642c:	1cfb      	adds	r3, r7, #3
 800642e:	701a      	strb	r2, [r3, #0]
    // Write until null-byte
    while (*str)
 8006430:	e014      	b.n	800645c <SSD1306_WriteString+0x40>
    {
        if (SSD1306_WriteChar(*str, Font, color) != *str)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	7818      	ldrb	r0, [r3, #0]
 8006436:	1cfb      	adds	r3, r7, #3
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	1d3a      	adds	r2, r7, #4
 800643c:	6811      	ldr	r1, [r2, #0]
 800643e:	6852      	ldr	r2, [r2, #4]
 8006440:	f7ff ff60 	bl	8006304 <SSD1306_WriteChar>
 8006444:	0003      	movs	r3, r0
 8006446:	001a      	movs	r2, r3
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	429a      	cmp	r2, r3
 800644e:	d002      	beq.n	8006456 <SSD1306_WriteString+0x3a>
        {
            // Char could not be written
            return *str;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	e008      	b.n	8006468 <SSD1306_WriteString+0x4c>
        }

        // Next char
        str++;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	3301      	adds	r3, #1
 800645a:	60fb      	str	r3, [r7, #12]
    while (*str)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1e6      	bne.n	8006432 <SSD1306_WriteString+0x16>
    }

    // Everything ok
    return *str;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	781b      	ldrb	r3, [r3, #0]
}
 8006468:	0018      	movs	r0, r3
 800646a:	46bd      	mov	sp, r7
 800646c:	b004      	add	sp, #16
 800646e:	bd80      	pop	{r7, pc}

08006470 <SSD1306_SetCursor>:

/*
 * Set cursor position
 */
void SSD1306_SetCursor(uint8_t x, uint8_t y)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
 8006476:	0002      	movs	r2, r0
 8006478:	1dfb      	adds	r3, r7, #7
 800647a:	701a      	strb	r2, [r3, #0]
 800647c:	1dbb      	adds	r3, r7, #6
 800647e:	1c0a      	adds	r2, r1, #0
 8006480:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 8006482:	1dfb      	adds	r3, r7, #7
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	b29a      	uxth	r2, r3
 8006488:	4b05      	ldr	r3, [pc, #20]	; (80064a0 <SSD1306_SetCursor+0x30>)
 800648a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800648c:	1dbb      	adds	r3, r7, #6
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	b29a      	uxth	r2, r3
 8006492:	4b03      	ldr	r3, [pc, #12]	; (80064a0 <SSD1306_SetCursor+0x30>)
 8006494:	805a      	strh	r2, [r3, #2]
}
 8006496:	46c0      	nop			; (mov r8, r8)
 8006498:	46bd      	mov	sp, r7
 800649a:	b002      	add	sp, #8
 800649c:	bd80      	pop	{r7, pc}
 800649e:	46c0      	nop			; (mov r8, r8)
 80064a0:	20000650 	.word	0x20000650

080064a4 <SSD1306_ON>:
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, color);
    }
}

void SSD1306_ON(SI2C_Handle handle)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
    SSD1306_WriteCommand(handle, 0x8D);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	218d      	movs	r1, #141	; 0x8d
 80064b0:	0018      	movs	r0, r3
 80064b2:	f7ff fd7f 	bl	8005fb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(handle, 0x14);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2114      	movs	r1, #20
 80064ba:	0018      	movs	r0, r3
 80064bc:	f7ff fd7a 	bl	8005fb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(handle, 0xAF);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	21af      	movs	r1, #175	; 0xaf
 80064c4:	0018      	movs	r0, r3
 80064c6:	f7ff fd75 	bl	8005fb4 <SSD1306_WriteCommand>
}
 80064ca:	46c0      	nop			; (mov r8, r8)
 80064cc:	46bd      	mov	sp, r7
 80064ce:	b002      	add	sp, #8
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <SSD1306_OFF>:
void SSD1306_OFF(SI2C_Handle handle)
{
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b082      	sub	sp, #8
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
    SSD1306_WriteCommand(handle, 0x8D);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	218d      	movs	r1, #141	; 0x8d
 80064de:	0018      	movs	r0, r3
 80064e0:	f7ff fd68 	bl	8005fb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(handle, 0x10);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2110      	movs	r1, #16
 80064e8:	0018      	movs	r0, r3
 80064ea:	f7ff fd63 	bl	8005fb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(handle, 0xAE);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	21ae      	movs	r1, #174	; 0xae
 80064f2:	0018      	movs	r0, r3
 80064f4:	f7ff fd5e 	bl	8005fb4 <SSD1306_WriteCommand>
}
 80064f8:	46c0      	nop			; (mov r8, r8)
 80064fa:	46bd      	mov	sp, r7
 80064fc:	b002      	add	sp, #8
 80064fe:	bd80      	pop	{r7, pc}

08006500 <SSD1306_Monochrome>:

void SSD1306_Monochrome(SI2C_Handle handle, SSD1306_COLOR_t color)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	000a      	movs	r2, r1
 800650a:	1cfb      	adds	r3, r7, #3
 800650c:	701a      	strb	r2, [r3, #0]
	SSD1306_ON(handle);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	0018      	movs	r0, r3
 8006512:	f7ff ffc7 	bl	80064a4 <SSD1306_ON>
	SSD1306_Fill(color);
 8006516:	1cfb      	adds	r3, r7, #3
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	0018      	movs	r0, r3
 800651c:	f7ff fd68 	bl	8005ff0 <SSD1306_Fill>
	SSD1306_UpdateScreen(handle);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	0018      	movs	r0, r3
 8006524:	f7ff fd88 	bl	8006038 <SSD1306_UpdateScreen>
 8006528:	46c0      	nop			; (mov r8, r8)
 800652a:	46bd      	mov	sp, r7
 800652c:	b002      	add	sp, #8
 800652e:	bd80      	pop	{r7, pc}

08006530 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006530:	b580      	push	{r7, lr}
 8006532:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006534:	46c0      	nop			; (mov r8, r8)
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
	...

0800653c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006542:	f3ef 8305 	mrs	r3, IPSR
 8006546:	60bb      	str	r3, [r7, #8]
  return(result);
 8006548:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800654a:	2b00      	cmp	r3, #0
 800654c:	d109      	bne.n	8006562 <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800654e:	f3ef 8310 	mrs	r3, PRIMASK
 8006552:	607b      	str	r3, [r7, #4]
  return(result);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d007      	beq.n	800656a <osKernelInitialize+0x2e>
 800655a:	4b0d      	ldr	r3, [pc, #52]	; (8006590 <osKernelInitialize+0x54>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2b02      	cmp	r3, #2
 8006560:	d103      	bne.n	800656a <osKernelInitialize+0x2e>
    stat = osErrorISR;
 8006562:	2306      	movs	r3, #6
 8006564:	425b      	negs	r3, r3
 8006566:	60fb      	str	r3, [r7, #12]
 8006568:	e00c      	b.n	8006584 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 800656a:	4b09      	ldr	r3, [pc, #36]	; (8006590 <osKernelInitialize+0x54>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d105      	bne.n	800657e <osKernelInitialize+0x42>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006572:	4b07      	ldr	r3, [pc, #28]	; (8006590 <osKernelInitialize+0x54>)
 8006574:	2201      	movs	r2, #1
 8006576:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006578:	2300      	movs	r3, #0
 800657a:	60fb      	str	r3, [r7, #12]
 800657c:	e002      	b.n	8006584 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 800657e:	2301      	movs	r3, #1
 8006580:	425b      	negs	r3, r3
 8006582:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006584:	68fb      	ldr	r3, [r7, #12]
}
 8006586:	0018      	movs	r0, r3
 8006588:	46bd      	mov	sp, r7
 800658a:	b004      	add	sp, #16
 800658c:	bd80      	pop	{r7, pc}
 800658e:	46c0      	nop			; (mov r8, r8)
 8006590:	20000658 	.word	0x20000658

08006594 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800659a:	f3ef 8305 	mrs	r3, IPSR
 800659e:	60bb      	str	r3, [r7, #8]
  return(result);
 80065a0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d109      	bne.n	80065ba <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065a6:	f3ef 8310 	mrs	r3, PRIMASK
 80065aa:	607b      	str	r3, [r7, #4]
  return(result);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d007      	beq.n	80065c2 <osKernelStart+0x2e>
 80065b2:	4b0f      	ldr	r3, [pc, #60]	; (80065f0 <osKernelStart+0x5c>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d103      	bne.n	80065c2 <osKernelStart+0x2e>
    stat = osErrorISR;
 80065ba:	2306      	movs	r3, #6
 80065bc:	425b      	negs	r3, r3
 80065be:	60fb      	str	r3, [r7, #12]
 80065c0:	e010      	b.n	80065e4 <osKernelStart+0x50>
  }
  else {
    if (KernelState == osKernelReady) {
 80065c2:	4b0b      	ldr	r3, [pc, #44]	; (80065f0 <osKernelStart+0x5c>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d109      	bne.n	80065de <osKernelStart+0x4a>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80065ca:	f7ff ffb1 	bl	8006530 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80065ce:	4b08      	ldr	r3, [pc, #32]	; (80065f0 <osKernelStart+0x5c>)
 80065d0:	2202      	movs	r2, #2
 80065d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80065d4:	f001 f85a 	bl	800768c <vTaskStartScheduler>
      stat = osOK;
 80065d8:	2300      	movs	r3, #0
 80065da:	60fb      	str	r3, [r7, #12]
 80065dc:	e002      	b.n	80065e4 <osKernelStart+0x50>
    } else {
      stat = osError;
 80065de:	2301      	movs	r3, #1
 80065e0:	425b      	negs	r3, r3
 80065e2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80065e4:	68fb      	ldr	r3, [r7, #12]
}
 80065e6:	0018      	movs	r0, r3
 80065e8:	46bd      	mov	sp, r7
 80065ea:	b004      	add	sp, #16
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	46c0      	nop			; (mov r8, r8)
 80065f0:	20000658 	.word	0x20000658

080065f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80065f4:	b5b0      	push	{r4, r5, r7, lr}
 80065f6:	b090      	sub	sp, #64	; 0x40
 80065f8:	af04      	add	r7, sp, #16
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006600:	2300      	movs	r3, #0
 8006602:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006604:	f3ef 8305 	mrs	r3, IPSR
 8006608:	61fb      	str	r3, [r7, #28]
  return(result);
 800660a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800660c:	2b00      	cmp	r3, #0
 800660e:	d000      	beq.n	8006612 <osThreadNew+0x1e>
 8006610:	e08c      	b.n	800672c <osThreadNew+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006612:	f3ef 8310 	mrs	r3, PRIMASK
 8006616:	61bb      	str	r3, [r7, #24]
  return(result);
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d004      	beq.n	8006628 <osThreadNew+0x34>
 800661e:	4b46      	ldr	r3, [pc, #280]	; (8006738 <osThreadNew+0x144>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2b02      	cmp	r3, #2
 8006624:	d100      	bne.n	8006628 <osThreadNew+0x34>
 8006626:	e081      	b.n	800672c <osThreadNew+0x138>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d100      	bne.n	8006630 <osThreadNew+0x3c>
 800662e:	e07d      	b.n	800672c <osThreadNew+0x138>
    stack = configMINIMAL_STACK_SIZE;
 8006630:	2380      	movs	r3, #128	; 0x80
 8006632:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006634:	2318      	movs	r3, #24
 8006636:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006638:	2300      	movs	r3, #0
 800663a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800663c:	2301      	movs	r3, #1
 800663e:	425b      	negs	r3, r3
 8006640:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d044      	beq.n	80066d2 <osThreadNew+0xde>
      if (attr->name != NULL) {
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d002      	beq.n	8006656 <osThreadNew+0x62>
        name = attr->name;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d002      	beq.n	8006664 <osThreadNew+0x70>
        prio = (UBaseType_t)attr->priority;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	699b      	ldr	r3, [r3, #24]
 8006662:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006666:	2b00      	cmp	r3, #0
 8006668:	d007      	beq.n	800667a <osThreadNew+0x86>
 800666a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666c:	2b38      	cmp	r3, #56	; 0x38
 800666e:	d804      	bhi.n	800667a <osThreadNew+0x86>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	2201      	movs	r2, #1
 8006676:	4013      	ands	r3, r2
 8006678:	d001      	beq.n	800667e <osThreadNew+0x8a>
        return (NULL);
 800667a:	2300      	movs	r3, #0
 800667c:	e057      	b.n	800672e <osThreadNew+0x13a>
      }

      if (attr->stack_size > 0U) {
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d003      	beq.n	800668e <osThreadNew+0x9a>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	695b      	ldr	r3, [r3, #20]
 800668a:	089b      	lsrs	r3, r3, #2
 800668c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00e      	beq.n	80066b4 <osThreadNew+0xc0>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	2bbb      	cmp	r3, #187	; 0xbb
 800669c:	d90a      	bls.n	80066b4 <osThreadNew+0xc0>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d006      	beq.n	80066b4 <osThreadNew+0xc0>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d002      	beq.n	80066b4 <osThreadNew+0xc0>
        mem = 1;
 80066ae:	2301      	movs	r3, #1
 80066b0:	623b      	str	r3, [r7, #32]
 80066b2:	e010      	b.n	80066d6 <osThreadNew+0xe2>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d10c      	bne.n	80066d6 <osThreadNew+0xe2>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d108      	bne.n	80066d6 <osThreadNew+0xe2>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d104      	bne.n	80066d6 <osThreadNew+0xe2>
          mem = 0;
 80066cc:	2300      	movs	r3, #0
 80066ce:	623b      	str	r3, [r7, #32]
 80066d0:	e001      	b.n	80066d6 <osThreadNew+0xe2>
        }
      }
    }
    else {
      mem = 0;
 80066d2:	2300      	movs	r3, #0
 80066d4:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80066d6:	6a3b      	ldr	r3, [r7, #32]
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d112      	bne.n	8006702 <osThreadNew+0x10e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80066e4:	68bd      	ldr	r5, [r7, #8]
 80066e6:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80066e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066ea:	68f8      	ldr	r0, [r7, #12]
 80066ec:	9302      	str	r3, [sp, #8]
 80066ee:	9201      	str	r2, [sp, #4]
 80066f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f2:	9300      	str	r3, [sp, #0]
 80066f4:	002b      	movs	r3, r5
 80066f6:	0022      	movs	r2, r4
 80066f8:	f000 fe09 	bl	800730e <xTaskCreateStatic>
 80066fc:	0003      	movs	r3, r0
 80066fe:	617b      	str	r3, [r7, #20]
 8006700:	e014      	b.n	800672c <osThreadNew+0x138>
    }
    else {
      if (mem == 0) {
 8006702:	6a3b      	ldr	r3, [r7, #32]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d111      	bne.n	800672c <osThreadNew+0x138>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670a:	b29a      	uxth	r2, r3
 800670c:	68bc      	ldr	r4, [r7, #8]
 800670e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006710:	68f8      	ldr	r0, [r7, #12]
 8006712:	2314      	movs	r3, #20
 8006714:	18fb      	adds	r3, r7, r3
 8006716:	9301      	str	r3, [sp, #4]
 8006718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	0023      	movs	r3, r4
 800671e:	f000 fe3a 	bl	8007396 <xTaskCreate>
 8006722:	0003      	movs	r3, r0
 8006724:	2b01      	cmp	r3, #1
 8006726:	d001      	beq.n	800672c <osThreadNew+0x138>
          hTask = NULL;
 8006728:	2300      	movs	r3, #0
 800672a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800672c:	697b      	ldr	r3, [r7, #20]
}
 800672e:	0018      	movs	r0, r3
 8006730:	46bd      	mov	sp, r7
 8006732:	b00c      	add	sp, #48	; 0x30
 8006734:	bdb0      	pop	{r4, r5, r7, pc}
 8006736:	46c0      	nop			; (mov r8, r8)
 8006738:	20000658 	.word	0x20000658

0800673c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800673c:	b580      	push	{r7, lr}
 800673e:	b086      	sub	sp, #24
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006744:	f3ef 8305 	mrs	r3, IPSR
 8006748:	613b      	str	r3, [r7, #16]
  return(result);
 800674a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800674c:	2b00      	cmp	r3, #0
 800674e:	d109      	bne.n	8006764 <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006750:	f3ef 8310 	mrs	r3, PRIMASK
 8006754:	60fb      	str	r3, [r7, #12]
  return(result);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d007      	beq.n	800676c <osDelay+0x30>
 800675c:	4b0a      	ldr	r3, [pc, #40]	; (8006788 <osDelay+0x4c>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	2b02      	cmp	r3, #2
 8006762:	d103      	bne.n	800676c <osDelay+0x30>
    stat = osErrorISR;
 8006764:	2306      	movs	r3, #6
 8006766:	425b      	negs	r3, r3
 8006768:	617b      	str	r3, [r7, #20]
 800676a:	e008      	b.n	800677e <osDelay+0x42>
  }
  else {
    stat = osOK;
 800676c:	2300      	movs	r3, #0
 800676e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d003      	beq.n	800677e <osDelay+0x42>
      vTaskDelay(ticks);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	0018      	movs	r0, r3
 800677a:	f000 ff61 	bl	8007640 <vTaskDelay>
    }
  }

  return (stat);
 800677e:	697b      	ldr	r3, [r7, #20]
}
 8006780:	0018      	movs	r0, r3
 8006782:	46bd      	mov	sp, r7
 8006784:	b006      	add	sp, #24
 8006786:	bd80      	pop	{r7, pc}
 8006788:	20000658 	.word	0x20000658

0800678c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800678c:	b590      	push	{r4, r7, lr}
 800678e:	b08d      	sub	sp, #52	; 0x34
 8006790:	af02      	add	r7, sp, #8
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006798:	2300      	movs	r3, #0
 800679a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800679c:	f3ef 8305 	mrs	r3, IPSR
 80067a0:	61bb      	str	r3, [r7, #24]
  return(result);
 80067a2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d000      	beq.n	80067aa <osMessageQueueNew+0x1e>
 80067a8:	e06f      	b.n	800688a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067aa:	f3ef 8310 	mrs	r3, PRIMASK
 80067ae:	617b      	str	r3, [r7, #20]
  return(result);
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d004      	beq.n	80067c0 <osMessageQueueNew+0x34>
 80067b6:	4b37      	ldr	r3, [pc, #220]	; (8006894 <osMessageQueueNew+0x108>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	d100      	bne.n	80067c0 <osMessageQueueNew+0x34>
 80067be:	e064      	b.n	800688a <osMessageQueueNew+0xfe>
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d100      	bne.n	80067c8 <osMessageQueueNew+0x3c>
 80067c6:	e060      	b.n	800688a <osMessageQueueNew+0xfe>
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d05d      	beq.n	800688a <osMessageQueueNew+0xfe>
    mem = -1;
 80067ce:	2301      	movs	r3, #1
 80067d0:	425b      	negs	r3, r3
 80067d2:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d028      	beq.n	800682c <osMessageQueueNew+0xa0>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d011      	beq.n	8006806 <osMessageQueueNew+0x7a>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	2b4f      	cmp	r3, #79	; 0x4f
 80067e8:	d90d      	bls.n	8006806 <osMessageQueueNew+0x7a>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d009      	beq.n	8006806 <osMessageQueueNew+0x7a>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	695a      	ldr	r2, [r3, #20]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	68b9      	ldr	r1, [r7, #8]
 80067fa:	434b      	muls	r3, r1
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d302      	bcc.n	8006806 <osMessageQueueNew+0x7a>
        mem = 1;
 8006800:	2301      	movs	r3, #1
 8006802:	623b      	str	r3, [r7, #32]
 8006804:	e014      	b.n	8006830 <osMessageQueueNew+0xa4>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d110      	bne.n	8006830 <osMessageQueueNew+0xa4>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d10c      	bne.n	8006830 <osMessageQueueNew+0xa4>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800681a:	2b00      	cmp	r3, #0
 800681c:	d108      	bne.n	8006830 <osMessageQueueNew+0xa4>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	695b      	ldr	r3, [r3, #20]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d104      	bne.n	8006830 <osMessageQueueNew+0xa4>
          mem = 0;
 8006826:	2300      	movs	r3, #0
 8006828:	623b      	str	r3, [r7, #32]
 800682a:	e001      	b.n	8006830 <osMessageQueueNew+0xa4>
        }
      }
    }
    else {
      mem = 0;
 800682c:	2300      	movs	r3, #0
 800682e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006830:	6a3b      	ldr	r3, [r7, #32]
 8006832:	2b01      	cmp	r3, #1
 8006834:	d10c      	bne.n	8006850 <osMessageQueueNew+0xc4>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	691a      	ldr	r2, [r3, #16]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	68b9      	ldr	r1, [r7, #8]
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	2400      	movs	r4, #0
 8006844:	9400      	str	r4, [sp, #0]
 8006846:	f000 f954 	bl	8006af2 <xQueueGenericCreateStatic>
 800684a:	0003      	movs	r3, r0
 800684c:	627b      	str	r3, [r7, #36]	; 0x24
 800684e:	e00a      	b.n	8006866 <osMessageQueueNew+0xda>
    }
    else {
      if (mem == 0) {
 8006850:	6a3b      	ldr	r3, [r7, #32]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d107      	bne.n	8006866 <osMessageQueueNew+0xda>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006856:	68b9      	ldr	r1, [r7, #8]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	0018      	movs	r0, r3
 800685e:	f000 f994 	bl	8006b8a <xQueueGenericCreate>
 8006862:	0003      	movs	r3, r0
 8006864:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00e      	beq.n	800688a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d003      	beq.n	800687a <osMessageQueueNew+0xee>
        name = attr->name;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	61fb      	str	r3, [r7, #28]
 8006878:	e001      	b.n	800687e <osMessageQueueNew+0xf2>
      } else {
        name = NULL;
 800687a:	2300      	movs	r3, #0
 800687c:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800687e:	69fa      	ldr	r2, [r7, #28]
 8006880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006882:	0011      	movs	r1, r2
 8006884:	0018      	movs	r0, r3
 8006886:	f000 fce7 	bl	8007258 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800688a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800688c:	0018      	movs	r0, r3
 800688e:	46bd      	mov	sp, r7
 8006890:	b00b      	add	sp, #44	; 0x2c
 8006892:	bd90      	pop	{r4, r7, pc}
 8006894:	20000658 	.word	0x20000658

08006898 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	4a06      	ldr	r2, [pc, #24]	; (80068c0 <vApplicationGetIdleTaskMemory+0x28>)
 80068a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	4a05      	ldr	r2, [pc, #20]	; (80068c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80068ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2280      	movs	r2, #128	; 0x80
 80068b4:	601a      	str	r2, [r3, #0]
}
 80068b6:	46c0      	nop			; (mov r8, r8)
 80068b8:	46bd      	mov	sp, r7
 80068ba:	b004      	add	sp, #16
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	46c0      	nop			; (mov r8, r8)
 80068c0:	2000065c 	.word	0x2000065c
 80068c4:	20000718 	.word	0x20000718

080068c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	4a06      	ldr	r2, [pc, #24]	; (80068f0 <vApplicationGetTimerTaskMemory+0x28>)
 80068d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	4a05      	ldr	r2, [pc, #20]	; (80068f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80068de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2280      	movs	r2, #128	; 0x80
 80068e4:	0052      	lsls	r2, r2, #1
 80068e6:	601a      	str	r2, [r3, #0]
}
 80068e8:	46c0      	nop			; (mov r8, r8)
 80068ea:	46bd      	mov	sp, r7
 80068ec:	b004      	add	sp, #16
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	20000918 	.word	0x20000918
 80068f4:	200009d4 	.word	0x200009d4

080068f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	3308      	adds	r3, #8
 8006904:	001a      	movs	r2, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2201      	movs	r2, #1
 800690e:	4252      	negs	r2, r2
 8006910:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	3308      	adds	r3, #8
 8006916:	001a      	movs	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	3308      	adds	r3, #8
 8006920:	001a      	movs	r2, r3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800692c:	46c0      	nop			; (mov r8, r8)
 800692e:	46bd      	mov	sp, r7
 8006930:	b002      	add	sp, #8
 8006932:	bd80      	pop	{r7, pc}

08006934 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006942:	46c0      	nop			; (mov r8, r8)
 8006944:	46bd      	mov	sp, r7
 8006946:	b002      	add	sp, #8
 8006948:	bd80      	pop	{r7, pc}

0800694a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800694a:	b580      	push	{r7, lr}
 800694c:	b084      	sub	sp, #16
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
 8006952:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	689a      	ldr	r2, [r3, #8]
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	683a      	ldr	r2, [r7, #0]
 800696e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	683a      	ldr	r2, [r7, #0]
 8006974:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	1c5a      	adds	r2, r3, #1
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	601a      	str	r2, [r3, #0]
}
 8006986:	46c0      	nop			; (mov r8, r8)
 8006988:	46bd      	mov	sp, r7
 800698a:	b004      	add	sp, #16
 800698c:	bd80      	pop	{r7, pc}

0800698e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800698e:	b580      	push	{r7, lr}
 8006990:	b084      	sub	sp, #16
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
 8006996:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	3301      	adds	r3, #1
 80069a2:	d103      	bne.n	80069ac <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	691b      	ldr	r3, [r3, #16]
 80069a8:	60fb      	str	r3, [r7, #12]
 80069aa:	e00c      	b.n	80069c6 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	3308      	adds	r3, #8
 80069b0:	60fb      	str	r3, [r7, #12]
 80069b2:	e002      	b.n	80069ba <vListInsert+0x2c>
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	60fb      	str	r3, [r7, #12]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	68ba      	ldr	r2, [r7, #8]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d2f6      	bcs.n	80069b4 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	685a      	ldr	r2, [r3, #4]
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	683a      	ldr	r2, [r7, #0]
 80069d4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	683a      	ldr	r2, [r7, #0]
 80069e0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	1c5a      	adds	r2, r3, #1
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	601a      	str	r2, [r3, #0]
}
 80069f2:	46c0      	nop			; (mov r8, r8)
 80069f4:	46bd      	mov	sp, r7
 80069f6:	b004      	add	sp, #16
 80069f8:	bd80      	pop	{r7, pc}

080069fa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80069fa:	b580      	push	{r7, lr}
 80069fc:	b084      	sub	sp, #16
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	6892      	ldr	r2, [r2, #8]
 8006a10:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	6852      	ldr	r2, [r2, #4]
 8006a1a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d103      	bne.n	8006a2e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	689a      	ldr	r2, [r3, #8]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	1e5a      	subs	r2, r3, #1
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
}
 8006a42:	0018      	movs	r0, r3
 8006a44:	46bd      	mov	sp, r7
 8006a46:	b004      	add	sp, #16
 8006a48:	bd80      	pop	{r7, pc}

08006a4a <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006a4a:	b580      	push	{r7, lr}
 8006a4c:	b084      	sub	sp, #16
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
 8006a52:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d101      	bne.n	8006a62 <xQueueGenericReset+0x18>
 8006a5e:	b672      	cpsid	i
 8006a60:	e7fe      	b.n	8006a60 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8006a62:	f002 f825 	bl	8008ab0 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a72:	434b      	muls	r3, r1
 8006a74:	18d2      	adds	r2, r2, r3
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a90:	1e59      	subs	r1, r3, #1
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a96:	434b      	muls	r3, r1
 8006a98:	18d2      	adds	r2, r2, r3
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2244      	movs	r2, #68	; 0x44
 8006aa2:	21ff      	movs	r1, #255	; 0xff
 8006aa4:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2245      	movs	r2, #69	; 0x45
 8006aaa:	21ff      	movs	r1, #255	; 0xff
 8006aac:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d10d      	bne.n	8006ad0 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d013      	beq.n	8006ae4 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	3310      	adds	r3, #16
 8006ac0:	0018      	movs	r0, r3
 8006ac2:	f001 f835 	bl	8007b30 <xTaskRemoveFromEventList>
 8006ac6:	1e03      	subs	r3, r0, #0
 8006ac8:	d00c      	beq.n	8006ae4 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006aca:	f001 ffe1 	bl	8008a90 <vPortYield>
 8006ace:	e009      	b.n	8006ae4 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	3310      	adds	r3, #16
 8006ad4:	0018      	movs	r0, r3
 8006ad6:	f7ff ff0f 	bl	80068f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	3324      	adds	r3, #36	; 0x24
 8006ade:	0018      	movs	r0, r3
 8006ae0:	f7ff ff0a 	bl	80068f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006ae4:	f001 fff6 	bl	8008ad4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006ae8:	2301      	movs	r3, #1
}
 8006aea:	0018      	movs	r0, r3
 8006aec:	46bd      	mov	sp, r7
 8006aee:	b004      	add	sp, #16
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006af2:	b590      	push	{r4, r7, lr}
 8006af4:	b089      	sub	sp, #36	; 0x24
 8006af6:	af02      	add	r7, sp, #8
 8006af8:	60f8      	str	r0, [r7, #12]
 8006afa:	60b9      	str	r1, [r7, #8]
 8006afc:	607a      	str	r2, [r7, #4]
 8006afe:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d101      	bne.n	8006b0a <xQueueGenericCreateStatic+0x18>
 8006b06:	b672      	cpsid	i
 8006b08:	e7fe      	b.n	8006b08 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d101      	bne.n	8006b14 <xQueueGenericCreateStatic+0x22>
 8006b10:	b672      	cpsid	i
 8006b12:	e7fe      	b.n	8006b12 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d002      	beq.n	8006b20 <xQueueGenericCreateStatic+0x2e>
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d001      	beq.n	8006b24 <xQueueGenericCreateStatic+0x32>
 8006b20:	2301      	movs	r3, #1
 8006b22:	e000      	b.n	8006b26 <xQueueGenericCreateStatic+0x34>
 8006b24:	2300      	movs	r3, #0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d101      	bne.n	8006b2e <xQueueGenericCreateStatic+0x3c>
 8006b2a:	b672      	cpsid	i
 8006b2c:	e7fe      	b.n	8006b2c <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d102      	bne.n	8006b3a <xQueueGenericCreateStatic+0x48>
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d101      	bne.n	8006b3e <xQueueGenericCreateStatic+0x4c>
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e000      	b.n	8006b40 <xQueueGenericCreateStatic+0x4e>
 8006b3e:	2300      	movs	r3, #0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d101      	bne.n	8006b48 <xQueueGenericCreateStatic+0x56>
 8006b44:	b672      	cpsid	i
 8006b46:	e7fe      	b.n	8006b46 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006b48:	2350      	movs	r3, #80	; 0x50
 8006b4a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	2b50      	cmp	r3, #80	; 0x50
 8006b50:	d001      	beq.n	8006b56 <xQueueGenericCreateStatic+0x64>
 8006b52:	b672      	cpsid	i
 8006b54:	e7fe      	b.n	8006b54 <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006b56:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00e      	beq.n	8006b80 <xQueueGenericCreateStatic+0x8e>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	2246      	movs	r2, #70	; 0x46
 8006b66:	2101      	movs	r1, #1
 8006b68:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b6a:	2328      	movs	r3, #40	; 0x28
 8006b6c:	18fb      	adds	r3, r7, r3
 8006b6e:	781c      	ldrb	r4, [r3, #0]
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	68b9      	ldr	r1, [r7, #8]
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	9300      	str	r3, [sp, #0]
 8006b7a:	0023      	movs	r3, r4
 8006b7c:	f000 f83d 	bl	8006bfa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006b80:	697b      	ldr	r3, [r7, #20]
	}
 8006b82:	0018      	movs	r0, r3
 8006b84:	46bd      	mov	sp, r7
 8006b86:	b007      	add	sp, #28
 8006b88:	bd90      	pop	{r4, r7, pc}

08006b8a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006b8a:	b590      	push	{r4, r7, lr}
 8006b8c:	b08b      	sub	sp, #44	; 0x2c
 8006b8e:	af02      	add	r7, sp, #8
 8006b90:	60f8      	str	r0, [r7, #12]
 8006b92:	60b9      	str	r1, [r7, #8]
 8006b94:	1dfb      	adds	r3, r7, #7
 8006b96:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d101      	bne.n	8006ba2 <xQueueGenericCreate+0x18>
 8006b9e:	b672      	cpsid	i
 8006ba0:	e7fe      	b.n	8006ba0 <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d102      	bne.n	8006bae <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	61fb      	str	r3, [r7, #28]
 8006bac:	e003      	b.n	8006bb6 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	68ba      	ldr	r2, [r7, #8]
 8006bb2:	4353      	muls	r3, r2
 8006bb4:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	3350      	adds	r3, #80	; 0x50
 8006bba:	0018      	movs	r0, r3
 8006bbc:	f002 f810 	bl	8008be0 <pvPortMalloc>
 8006bc0:	0003      	movs	r3, r0
 8006bc2:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d012      	beq.n	8006bf0 <xQueueGenericCreate+0x66>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	3350      	adds	r3, #80	; 0x50
 8006bd2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	2246      	movs	r2, #70	; 0x46
 8006bd8:	2100      	movs	r1, #0
 8006bda:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006bdc:	1dfb      	adds	r3, r7, #7
 8006bde:	781c      	ldrb	r4, [r3, #0]
 8006be0:	697a      	ldr	r2, [r7, #20]
 8006be2:	68b9      	ldr	r1, [r7, #8]
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	9300      	str	r3, [sp, #0]
 8006bea:	0023      	movs	r3, r4
 8006bec:	f000 f805 	bl	8006bfa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006bf0:	69bb      	ldr	r3, [r7, #24]
	}
 8006bf2:	0018      	movs	r0, r3
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	b009      	add	sp, #36	; 0x24
 8006bf8:	bd90      	pop	{r4, r7, pc}

08006bfa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b084      	sub	sp, #16
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	60f8      	str	r0, [r7, #12]
 8006c02:	60b9      	str	r1, [r7, #8]
 8006c04:	607a      	str	r2, [r7, #4]
 8006c06:	001a      	movs	r2, r3
 8006c08:	1cfb      	adds	r3, r7, #3
 8006c0a:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d103      	bne.n	8006c1a <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	69ba      	ldr	r2, [r7, #24]
 8006c16:	601a      	str	r2, [r3, #0]
 8006c18:	e002      	b.n	8006c20 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	68ba      	ldr	r2, [r7, #8]
 8006c2a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	2101      	movs	r1, #1
 8006c30:	0018      	movs	r0, r3
 8006c32:	f7ff ff0a 	bl	8006a4a <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	1cfa      	adds	r2, r7, #3
 8006c3a:	214c      	movs	r1, #76	; 0x4c
 8006c3c:	7812      	ldrb	r2, [r2, #0]
 8006c3e:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006c40:	46c0      	nop			; (mov r8, r8)
 8006c42:	46bd      	mov	sp, r7
 8006c44:	b004      	add	sp, #16
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b08a      	sub	sp, #40	; 0x28
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
 8006c54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006c56:	2300      	movs	r3, #0
 8006c58:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8006c5e:	6a3b      	ldr	r3, [r7, #32]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d101      	bne.n	8006c68 <xQueueGenericSend+0x20>
 8006c64:	b672      	cpsid	i
 8006c66:	e7fe      	b.n	8006c66 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d103      	bne.n	8006c76 <xQueueGenericSend+0x2e>
 8006c6e:	6a3b      	ldr	r3, [r7, #32]
 8006c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d101      	bne.n	8006c7a <xQueueGenericSend+0x32>
 8006c76:	2301      	movs	r3, #1
 8006c78:	e000      	b.n	8006c7c <xQueueGenericSend+0x34>
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d101      	bne.n	8006c84 <xQueueGenericSend+0x3c>
 8006c80:	b672      	cpsid	i
 8006c82:	e7fe      	b.n	8006c82 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d103      	bne.n	8006c92 <xQueueGenericSend+0x4a>
 8006c8a:	6a3b      	ldr	r3, [r7, #32]
 8006c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d101      	bne.n	8006c96 <xQueueGenericSend+0x4e>
 8006c92:	2301      	movs	r3, #1
 8006c94:	e000      	b.n	8006c98 <xQueueGenericSend+0x50>
 8006c96:	2300      	movs	r3, #0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d101      	bne.n	8006ca0 <xQueueGenericSend+0x58>
 8006c9c:	b672      	cpsid	i
 8006c9e:	e7fe      	b.n	8006c9e <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ca0:	f001 f8de 	bl	8007e60 <xTaskGetSchedulerState>
 8006ca4:	1e03      	subs	r3, r0, #0
 8006ca6:	d102      	bne.n	8006cae <xQueueGenericSend+0x66>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d101      	bne.n	8006cb2 <xQueueGenericSend+0x6a>
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e000      	b.n	8006cb4 <xQueueGenericSend+0x6c>
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d101      	bne.n	8006cbc <xQueueGenericSend+0x74>
 8006cb8:	b672      	cpsid	i
 8006cba:	e7fe      	b.n	8006cba <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006cbc:	f001 fef8 	bl	8008ab0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006cc0:	6a3b      	ldr	r3, [r7, #32]
 8006cc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cc4:	6a3b      	ldr	r3, [r7, #32]
 8006cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d302      	bcc.n	8006cd2 <xQueueGenericSend+0x8a>
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d11e      	bne.n	8006d10 <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006cd2:	683a      	ldr	r2, [r7, #0]
 8006cd4:	68b9      	ldr	r1, [r7, #8]
 8006cd6:	6a3b      	ldr	r3, [r7, #32]
 8006cd8:	0018      	movs	r0, r3
 8006cda:	f000 f99f 	bl	800701c <prvCopyDataToQueue>
 8006cde:	0003      	movs	r3, r0
 8006ce0:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ce2:	6a3b      	ldr	r3, [r7, #32]
 8006ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d009      	beq.n	8006cfe <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cea:	6a3b      	ldr	r3, [r7, #32]
 8006cec:	3324      	adds	r3, #36	; 0x24
 8006cee:	0018      	movs	r0, r3
 8006cf0:	f000 ff1e 	bl	8007b30 <xTaskRemoveFromEventList>
 8006cf4:	1e03      	subs	r3, r0, #0
 8006cf6:	d007      	beq.n	8006d08 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006cf8:	f001 feca 	bl	8008a90 <vPortYield>
 8006cfc:	e004      	b.n	8006d08 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d001      	beq.n	8006d08 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006d04:	f001 fec4 	bl	8008a90 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006d08:	f001 fee4 	bl	8008ad4 <vPortExitCritical>
				return pdPASS;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e05b      	b.n	8006dc8 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d103      	bne.n	8006d1e <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d16:	f001 fedd 	bl	8008ad4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	e054      	b.n	8006dc8 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d106      	bne.n	8006d32 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d24:	2314      	movs	r3, #20
 8006d26:	18fb      	adds	r3, r7, r3
 8006d28:	0018      	movs	r0, r3
 8006d2a:	f000 ff5d 	bl	8007be8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d32:	f001 fecf 	bl	8008ad4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d36:	f000 fd07 	bl	8007748 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d3a:	f001 feb9 	bl	8008ab0 <vPortEnterCritical>
 8006d3e:	6a3b      	ldr	r3, [r7, #32]
 8006d40:	2244      	movs	r2, #68	; 0x44
 8006d42:	5c9b      	ldrb	r3, [r3, r2]
 8006d44:	b25b      	sxtb	r3, r3
 8006d46:	3301      	adds	r3, #1
 8006d48:	d103      	bne.n	8006d52 <xQueueGenericSend+0x10a>
 8006d4a:	6a3b      	ldr	r3, [r7, #32]
 8006d4c:	2244      	movs	r2, #68	; 0x44
 8006d4e:	2100      	movs	r1, #0
 8006d50:	5499      	strb	r1, [r3, r2]
 8006d52:	6a3b      	ldr	r3, [r7, #32]
 8006d54:	2245      	movs	r2, #69	; 0x45
 8006d56:	5c9b      	ldrb	r3, [r3, r2]
 8006d58:	b25b      	sxtb	r3, r3
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	d103      	bne.n	8006d66 <xQueueGenericSend+0x11e>
 8006d5e:	6a3b      	ldr	r3, [r7, #32]
 8006d60:	2245      	movs	r2, #69	; 0x45
 8006d62:	2100      	movs	r1, #0
 8006d64:	5499      	strb	r1, [r3, r2]
 8006d66:	f001 feb5 	bl	8008ad4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d6a:	1d3a      	adds	r2, r7, #4
 8006d6c:	2314      	movs	r3, #20
 8006d6e:	18fb      	adds	r3, r7, r3
 8006d70:	0011      	movs	r1, r2
 8006d72:	0018      	movs	r0, r3
 8006d74:	f000 ff4c 	bl	8007c10 <xTaskCheckForTimeOut>
 8006d78:	1e03      	subs	r3, r0, #0
 8006d7a:	d11e      	bne.n	8006dba <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006d7c:	6a3b      	ldr	r3, [r7, #32]
 8006d7e:	0018      	movs	r0, r3
 8006d80:	f000 fa51 	bl	8007226 <prvIsQueueFull>
 8006d84:	1e03      	subs	r3, r0, #0
 8006d86:	d011      	beq.n	8006dac <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006d88:	6a3b      	ldr	r3, [r7, #32]
 8006d8a:	3310      	adds	r3, #16
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	0011      	movs	r1, r2
 8006d90:	0018      	movs	r0, r3
 8006d92:	f000 fe89 	bl	8007aa8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006d96:	6a3b      	ldr	r3, [r7, #32]
 8006d98:	0018      	movs	r0, r3
 8006d9a:	f000 f9d0 	bl	800713e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006d9e:	f000 fcdf 	bl	8007760 <xTaskResumeAll>
 8006da2:	1e03      	subs	r3, r0, #0
 8006da4:	d18a      	bne.n	8006cbc <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8006da6:	f001 fe73 	bl	8008a90 <vPortYield>
 8006daa:	e787      	b.n	8006cbc <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006dac:	6a3b      	ldr	r3, [r7, #32]
 8006dae:	0018      	movs	r0, r3
 8006db0:	f000 f9c5 	bl	800713e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006db4:	f000 fcd4 	bl	8007760 <xTaskResumeAll>
 8006db8:	e780      	b.n	8006cbc <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006dba:	6a3b      	ldr	r3, [r7, #32]
 8006dbc:	0018      	movs	r0, r3
 8006dbe:	f000 f9be 	bl	800713e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006dc2:	f000 fccd 	bl	8007760 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006dc6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006dc8:	0018      	movs	r0, r3
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	b00a      	add	sp, #40	; 0x28
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006dd0:	b590      	push	{r4, r7, lr}
 8006dd2:	b089      	sub	sp, #36	; 0x24
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	607a      	str	r2, [r7, #4]
 8006ddc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d101      	bne.n	8006dec <xQueueGenericSendFromISR+0x1c>
 8006de8:	b672      	cpsid	i
 8006dea:	e7fe      	b.n	8006dea <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d103      	bne.n	8006dfa <xQueueGenericSendFromISR+0x2a>
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d101      	bne.n	8006dfe <xQueueGenericSendFromISR+0x2e>
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e000      	b.n	8006e00 <xQueueGenericSendFromISR+0x30>
 8006dfe:	2300      	movs	r3, #0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d101      	bne.n	8006e08 <xQueueGenericSendFromISR+0x38>
 8006e04:	b672      	cpsid	i
 8006e06:	e7fe      	b.n	8006e06 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d103      	bne.n	8006e16 <xQueueGenericSendFromISR+0x46>
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d101      	bne.n	8006e1a <xQueueGenericSendFromISR+0x4a>
 8006e16:	2301      	movs	r3, #1
 8006e18:	e000      	b.n	8006e1c <xQueueGenericSendFromISR+0x4c>
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d101      	bne.n	8006e24 <xQueueGenericSendFromISR+0x54>
 8006e20:	b672      	cpsid	i
 8006e22:	e7fe      	b.n	8006e22 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e24:	f001 fe6e 	bl	8008b04 <ulSetInterruptMaskFromISR>
 8006e28:	0003      	movs	r3, r0
 8006e2a:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d302      	bcc.n	8006e3e <xQueueGenericSendFromISR+0x6e>
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d12e      	bne.n	8006e9c <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006e3e:	2413      	movs	r4, #19
 8006e40:	193b      	adds	r3, r7, r4
 8006e42:	69ba      	ldr	r2, [r7, #24]
 8006e44:	2145      	movs	r1, #69	; 0x45
 8006e46:	5c52      	ldrb	r2, [r2, r1]
 8006e48:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e4a:	683a      	ldr	r2, [r7, #0]
 8006e4c:	68b9      	ldr	r1, [r7, #8]
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	0018      	movs	r0, r3
 8006e52:	f000 f8e3 	bl	800701c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006e56:	193b      	adds	r3, r7, r4
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	b25b      	sxtb	r3, r3
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	d111      	bne.n	8006e84 <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d016      	beq.n	8006e96 <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	3324      	adds	r3, #36	; 0x24
 8006e6c:	0018      	movs	r0, r3
 8006e6e:	f000 fe5f 	bl	8007b30 <xTaskRemoveFromEventList>
 8006e72:	1e03      	subs	r3, r0, #0
 8006e74:	d00f      	beq.n	8006e96 <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00c      	beq.n	8006e96 <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	601a      	str	r2, [r3, #0]
 8006e82:	e008      	b.n	8006e96 <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006e84:	2313      	movs	r3, #19
 8006e86:	18fb      	adds	r3, r7, r3
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	b259      	sxtb	r1, r3
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	2245      	movs	r2, #69	; 0x45
 8006e94:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8006e96:	2301      	movs	r3, #1
 8006e98:	61fb      	str	r3, [r7, #28]
		{
 8006e9a:	e001      	b.n	8006ea0 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	0018      	movs	r0, r3
 8006ea4:	f001 fe34 	bl	8008b10 <vClearInterruptMaskFromISR>

	return xReturn;
 8006ea8:	69fb      	ldr	r3, [r7, #28]
}
 8006eaa:	0018      	movs	r0, r3
 8006eac:	46bd      	mov	sp, r7
 8006eae:	b009      	add	sp, #36	; 0x24
 8006eb0:	bd90      	pop	{r4, r7, pc}

08006eb2 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b08a      	sub	sp, #40	; 0x28
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	60f8      	str	r0, [r7, #12]
 8006eba:	60b9      	str	r1, [r7, #8]
 8006ebc:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006ec6:	6a3b      	ldr	r3, [r7, #32]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d101      	bne.n	8006ed0 <xQueueReceive+0x1e>
 8006ecc:	b672      	cpsid	i
 8006ece:	e7fe      	b.n	8006ece <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d103      	bne.n	8006ede <xQueueReceive+0x2c>
 8006ed6:	6a3b      	ldr	r3, [r7, #32]
 8006ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d101      	bne.n	8006ee2 <xQueueReceive+0x30>
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e000      	b.n	8006ee4 <xQueueReceive+0x32>
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d101      	bne.n	8006eec <xQueueReceive+0x3a>
 8006ee8:	b672      	cpsid	i
 8006eea:	e7fe      	b.n	8006eea <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006eec:	f000 ffb8 	bl	8007e60 <xTaskGetSchedulerState>
 8006ef0:	1e03      	subs	r3, r0, #0
 8006ef2:	d102      	bne.n	8006efa <xQueueReceive+0x48>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d101      	bne.n	8006efe <xQueueReceive+0x4c>
 8006efa:	2301      	movs	r3, #1
 8006efc:	e000      	b.n	8006f00 <xQueueReceive+0x4e>
 8006efe:	2300      	movs	r3, #0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d101      	bne.n	8006f08 <xQueueReceive+0x56>
 8006f04:	b672      	cpsid	i
 8006f06:	e7fe      	b.n	8006f06 <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f08:	f001 fdd2 	bl	8008ab0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f0c:	6a3b      	ldr	r3, [r7, #32]
 8006f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f10:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d01a      	beq.n	8006f4e <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006f18:	68ba      	ldr	r2, [r7, #8]
 8006f1a:	6a3b      	ldr	r3, [r7, #32]
 8006f1c:	0011      	movs	r1, r2
 8006f1e:	0018      	movs	r0, r3
 8006f20:	f000 f8e7 	bl	80070f2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	1e5a      	subs	r2, r3, #1
 8006f28:	6a3b      	ldr	r3, [r7, #32]
 8006f2a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f2c:	6a3b      	ldr	r3, [r7, #32]
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d008      	beq.n	8006f46 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f34:	6a3b      	ldr	r3, [r7, #32]
 8006f36:	3310      	adds	r3, #16
 8006f38:	0018      	movs	r0, r3
 8006f3a:	f000 fdf9 	bl	8007b30 <xTaskRemoveFromEventList>
 8006f3e:	1e03      	subs	r3, r0, #0
 8006f40:	d001      	beq.n	8006f46 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006f42:	f001 fda5 	bl	8008a90 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006f46:	f001 fdc5 	bl	8008ad4 <vPortExitCritical>
				return pdPASS;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e062      	b.n	8007014 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d103      	bne.n	8006f5c <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f54:	f001 fdbe 	bl	8008ad4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	e05b      	b.n	8007014 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d106      	bne.n	8006f70 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f62:	2314      	movs	r3, #20
 8006f64:	18fb      	adds	r3, r7, r3
 8006f66:	0018      	movs	r0, r3
 8006f68:	f000 fe3e 	bl	8007be8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f70:	f001 fdb0 	bl	8008ad4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f74:	f000 fbe8 	bl	8007748 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f78:	f001 fd9a 	bl	8008ab0 <vPortEnterCritical>
 8006f7c:	6a3b      	ldr	r3, [r7, #32]
 8006f7e:	2244      	movs	r2, #68	; 0x44
 8006f80:	5c9b      	ldrb	r3, [r3, r2]
 8006f82:	b25b      	sxtb	r3, r3
 8006f84:	3301      	adds	r3, #1
 8006f86:	d103      	bne.n	8006f90 <xQueueReceive+0xde>
 8006f88:	6a3b      	ldr	r3, [r7, #32]
 8006f8a:	2244      	movs	r2, #68	; 0x44
 8006f8c:	2100      	movs	r1, #0
 8006f8e:	5499      	strb	r1, [r3, r2]
 8006f90:	6a3b      	ldr	r3, [r7, #32]
 8006f92:	2245      	movs	r2, #69	; 0x45
 8006f94:	5c9b      	ldrb	r3, [r3, r2]
 8006f96:	b25b      	sxtb	r3, r3
 8006f98:	3301      	adds	r3, #1
 8006f9a:	d103      	bne.n	8006fa4 <xQueueReceive+0xf2>
 8006f9c:	6a3b      	ldr	r3, [r7, #32]
 8006f9e:	2245      	movs	r2, #69	; 0x45
 8006fa0:	2100      	movs	r1, #0
 8006fa2:	5499      	strb	r1, [r3, r2]
 8006fa4:	f001 fd96 	bl	8008ad4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006fa8:	1d3a      	adds	r2, r7, #4
 8006faa:	2314      	movs	r3, #20
 8006fac:	18fb      	adds	r3, r7, r3
 8006fae:	0011      	movs	r1, r2
 8006fb0:	0018      	movs	r0, r3
 8006fb2:	f000 fe2d 	bl	8007c10 <xTaskCheckForTimeOut>
 8006fb6:	1e03      	subs	r3, r0, #0
 8006fb8:	d11e      	bne.n	8006ff8 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fba:	6a3b      	ldr	r3, [r7, #32]
 8006fbc:	0018      	movs	r0, r3
 8006fbe:	f000 f91c 	bl	80071fa <prvIsQueueEmpty>
 8006fc2:	1e03      	subs	r3, r0, #0
 8006fc4:	d011      	beq.n	8006fea <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006fc6:	6a3b      	ldr	r3, [r7, #32]
 8006fc8:	3324      	adds	r3, #36	; 0x24
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	0011      	movs	r1, r2
 8006fce:	0018      	movs	r0, r3
 8006fd0:	f000 fd6a 	bl	8007aa8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006fd4:	6a3b      	ldr	r3, [r7, #32]
 8006fd6:	0018      	movs	r0, r3
 8006fd8:	f000 f8b1 	bl	800713e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006fdc:	f000 fbc0 	bl	8007760 <xTaskResumeAll>
 8006fe0:	1e03      	subs	r3, r0, #0
 8006fe2:	d191      	bne.n	8006f08 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8006fe4:	f001 fd54 	bl	8008a90 <vPortYield>
 8006fe8:	e78e      	b.n	8006f08 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006fea:	6a3b      	ldr	r3, [r7, #32]
 8006fec:	0018      	movs	r0, r3
 8006fee:	f000 f8a6 	bl	800713e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ff2:	f000 fbb5 	bl	8007760 <xTaskResumeAll>
 8006ff6:	e787      	b.n	8006f08 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006ff8:	6a3b      	ldr	r3, [r7, #32]
 8006ffa:	0018      	movs	r0, r3
 8006ffc:	f000 f89f 	bl	800713e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007000:	f000 fbae 	bl	8007760 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007004:	6a3b      	ldr	r3, [r7, #32]
 8007006:	0018      	movs	r0, r3
 8007008:	f000 f8f7 	bl	80071fa <prvIsQueueEmpty>
 800700c:	1e03      	subs	r3, r0, #0
 800700e:	d100      	bne.n	8007012 <xQueueReceive+0x160>
 8007010:	e77a      	b.n	8006f08 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007012:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007014:	0018      	movs	r0, r3
 8007016:	46bd      	mov	sp, r7
 8007018:	b00a      	add	sp, #40	; 0x28
 800701a:	bd80      	pop	{r7, pc}

0800701c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b086      	sub	sp, #24
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007028:	2300      	movs	r3, #0
 800702a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007030:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007036:	2b00      	cmp	r3, #0
 8007038:	d10e      	bne.n	8007058 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d14e      	bne.n	80070e0 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	0018      	movs	r0, r3
 8007048:	f000 ff26 	bl	8007e98 <xTaskPriorityDisinherit>
 800704c:	0003      	movs	r3, r0
 800704e:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2200      	movs	r2, #0
 8007054:	609a      	str	r2, [r3, #8]
 8007056:	e043      	b.n	80070e0 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d119      	bne.n	8007092 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6858      	ldr	r0, [r3, #4]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	0019      	movs	r1, r3
 800706a:	f002 f88e 	bl	800918a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	685a      	ldr	r2, [r3, #4]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007076:	18d2      	adds	r2, r2, r3
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	685a      	ldr	r2, [r3, #4]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	429a      	cmp	r2, r3
 8007086:	d32b      	bcc.n	80070e0 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	605a      	str	r2, [r3, #4]
 8007090:	e026      	b.n	80070e0 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	68d8      	ldr	r0, [r3, #12]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	0019      	movs	r1, r3
 800709e:	f002 f874 	bl	800918a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	68da      	ldr	r2, [r3, #12]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070aa:	425b      	negs	r3, r3
 80070ac:	18d2      	adds	r2, r2, r3
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	68da      	ldr	r2, [r3, #12]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d207      	bcs.n	80070ce <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	689a      	ldr	r2, [r3, #8]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c6:	425b      	negs	r3, r3
 80070c8:	18d2      	adds	r2, r2, r3
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d105      	bne.n	80070e0 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d002      	beq.n	80070e0 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	3b01      	subs	r3, #1
 80070de:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	1c5a      	adds	r2, r3, #1
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80070e8:	697b      	ldr	r3, [r7, #20]
}
 80070ea:	0018      	movs	r0, r3
 80070ec:	46bd      	mov	sp, r7
 80070ee:	b006      	add	sp, #24
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b082      	sub	sp, #8
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
 80070fa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007100:	2b00      	cmp	r3, #0
 8007102:	d018      	beq.n	8007136 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	68da      	ldr	r2, [r3, #12]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710c:	18d2      	adds	r2, r2, r3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	68da      	ldr	r2, [r3, #12]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	429a      	cmp	r2, r3
 800711c:	d303      	bcc.n	8007126 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	68d9      	ldr	r1, [r3, #12]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	0018      	movs	r0, r3
 8007132:	f002 f82a 	bl	800918a <memcpy>
	}
}
 8007136:	46c0      	nop			; (mov r8, r8)
 8007138:	46bd      	mov	sp, r7
 800713a:	b002      	add	sp, #8
 800713c:	bd80      	pop	{r7, pc}

0800713e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b084      	sub	sp, #16
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007146:	f001 fcb3 	bl	8008ab0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800714a:	230f      	movs	r3, #15
 800714c:	18fb      	adds	r3, r7, r3
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	2145      	movs	r1, #69	; 0x45
 8007152:	5c52      	ldrb	r2, [r2, r1]
 8007154:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007156:	e013      	b.n	8007180 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715c:	2b00      	cmp	r3, #0
 800715e:	d016      	beq.n	800718e <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	3324      	adds	r3, #36	; 0x24
 8007164:	0018      	movs	r0, r3
 8007166:	f000 fce3 	bl	8007b30 <xTaskRemoveFromEventList>
 800716a:	1e03      	subs	r3, r0, #0
 800716c:	d001      	beq.n	8007172 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800716e:	f000 fd9f 	bl	8007cb0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007172:	210f      	movs	r1, #15
 8007174:	187b      	adds	r3, r7, r1
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	3b01      	subs	r3, #1
 800717a:	b2da      	uxtb	r2, r3
 800717c:	187b      	adds	r3, r7, r1
 800717e:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007180:	230f      	movs	r3, #15
 8007182:	18fb      	adds	r3, r7, r3
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	b25b      	sxtb	r3, r3
 8007188:	2b00      	cmp	r3, #0
 800718a:	dce5      	bgt.n	8007158 <prvUnlockQueue+0x1a>
 800718c:	e000      	b.n	8007190 <prvUnlockQueue+0x52>
					break;
 800718e:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2245      	movs	r2, #69	; 0x45
 8007194:	21ff      	movs	r1, #255	; 0xff
 8007196:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8007198:	f001 fc9c 	bl	8008ad4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800719c:	f001 fc88 	bl	8008ab0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80071a0:	230e      	movs	r3, #14
 80071a2:	18fb      	adds	r3, r7, r3
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	2144      	movs	r1, #68	; 0x44
 80071a8:	5c52      	ldrb	r2, [r2, r1]
 80071aa:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80071ac:	e013      	b.n	80071d6 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d016      	beq.n	80071e4 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	3310      	adds	r3, #16
 80071ba:	0018      	movs	r0, r3
 80071bc:	f000 fcb8 	bl	8007b30 <xTaskRemoveFromEventList>
 80071c0:	1e03      	subs	r3, r0, #0
 80071c2:	d001      	beq.n	80071c8 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 80071c4:	f000 fd74 	bl	8007cb0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80071c8:	210e      	movs	r1, #14
 80071ca:	187b      	adds	r3, r7, r1
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	3b01      	subs	r3, #1
 80071d0:	b2da      	uxtb	r2, r3
 80071d2:	187b      	adds	r3, r7, r1
 80071d4:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80071d6:	230e      	movs	r3, #14
 80071d8:	18fb      	adds	r3, r7, r3
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	b25b      	sxtb	r3, r3
 80071de:	2b00      	cmp	r3, #0
 80071e0:	dce5      	bgt.n	80071ae <prvUnlockQueue+0x70>
 80071e2:	e000      	b.n	80071e6 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 80071e4:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2244      	movs	r2, #68	; 0x44
 80071ea:	21ff      	movs	r1, #255	; 0xff
 80071ec:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80071ee:	f001 fc71 	bl	8008ad4 <vPortExitCritical>
}
 80071f2:	46c0      	nop			; (mov r8, r8)
 80071f4:	46bd      	mov	sp, r7
 80071f6:	b004      	add	sp, #16
 80071f8:	bd80      	pop	{r7, pc}

080071fa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b084      	sub	sp, #16
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007202:	f001 fc55 	bl	8008ab0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800720a:	2b00      	cmp	r3, #0
 800720c:	d102      	bne.n	8007214 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800720e:	2301      	movs	r3, #1
 8007210:	60fb      	str	r3, [r7, #12]
 8007212:	e001      	b.n	8007218 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007214:	2300      	movs	r3, #0
 8007216:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007218:	f001 fc5c 	bl	8008ad4 <vPortExitCritical>

	return xReturn;
 800721c:	68fb      	ldr	r3, [r7, #12]
}
 800721e:	0018      	movs	r0, r3
 8007220:	46bd      	mov	sp, r7
 8007222:	b004      	add	sp, #16
 8007224:	bd80      	pop	{r7, pc}

08007226 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007226:	b580      	push	{r7, lr}
 8007228:	b084      	sub	sp, #16
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800722e:	f001 fc3f 	bl	8008ab0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800723a:	429a      	cmp	r2, r3
 800723c:	d102      	bne.n	8007244 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800723e:	2301      	movs	r3, #1
 8007240:	60fb      	str	r3, [r7, #12]
 8007242:	e001      	b.n	8007248 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007244:	2300      	movs	r3, #0
 8007246:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007248:	f001 fc44 	bl	8008ad4 <vPortExitCritical>

	return xReturn;
 800724c:	68fb      	ldr	r3, [r7, #12]
}
 800724e:	0018      	movs	r0, r3
 8007250:	46bd      	mov	sp, r7
 8007252:	b004      	add	sp, #16
 8007254:	bd80      	pop	{r7, pc}
	...

08007258 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007262:	2300      	movs	r3, #0
 8007264:	60fb      	str	r3, [r7, #12]
 8007266:	e015      	b.n	8007294 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007268:	4b0e      	ldr	r3, [pc, #56]	; (80072a4 <vQueueAddToRegistry+0x4c>)
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	00d2      	lsls	r2, r2, #3
 800726e:	58d3      	ldr	r3, [r2, r3]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d10c      	bne.n	800728e <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007274:	4b0b      	ldr	r3, [pc, #44]	; (80072a4 <vQueueAddToRegistry+0x4c>)
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	00d2      	lsls	r2, r2, #3
 800727a:	6839      	ldr	r1, [r7, #0]
 800727c:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800727e:	4a09      	ldr	r2, [pc, #36]	; (80072a4 <vQueueAddToRegistry+0x4c>)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	00db      	lsls	r3, r3, #3
 8007284:	18d3      	adds	r3, r2, r3
 8007286:	3304      	adds	r3, #4
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800728c:	e006      	b.n	800729c <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	3301      	adds	r3, #1
 8007292:	60fb      	str	r3, [r7, #12]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2b07      	cmp	r3, #7
 8007298:	d9e6      	bls.n	8007268 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800729a:	46c0      	nop			; (mov r8, r8)
 800729c:	46c0      	nop			; (mov r8, r8)
 800729e:	46bd      	mov	sp, r7
 80072a0:	b004      	add	sp, #16
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	20000dd4 	.word	0x20000dd4

080072a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b086      	sub	sp, #24
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80072b8:	f001 fbfa 	bl	8008ab0 <vPortEnterCritical>
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	2244      	movs	r2, #68	; 0x44
 80072c0:	5c9b      	ldrb	r3, [r3, r2]
 80072c2:	b25b      	sxtb	r3, r3
 80072c4:	3301      	adds	r3, #1
 80072c6:	d103      	bne.n	80072d0 <vQueueWaitForMessageRestricted+0x28>
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	2244      	movs	r2, #68	; 0x44
 80072cc:	2100      	movs	r1, #0
 80072ce:	5499      	strb	r1, [r3, r2]
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	2245      	movs	r2, #69	; 0x45
 80072d4:	5c9b      	ldrb	r3, [r3, r2]
 80072d6:	b25b      	sxtb	r3, r3
 80072d8:	3301      	adds	r3, #1
 80072da:	d103      	bne.n	80072e4 <vQueueWaitForMessageRestricted+0x3c>
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	2245      	movs	r2, #69	; 0x45
 80072e0:	2100      	movs	r1, #0
 80072e2:	5499      	strb	r1, [r3, r2]
 80072e4:	f001 fbf6 	bl	8008ad4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d106      	bne.n	80072fe <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	3324      	adds	r3, #36	; 0x24
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	68b9      	ldr	r1, [r7, #8]
 80072f8:	0018      	movs	r0, r3
 80072fa:	f000 fbf3 	bl	8007ae4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	0018      	movs	r0, r3
 8007302:	f7ff ff1c 	bl	800713e <prvUnlockQueue>
	}
 8007306:	46c0      	nop			; (mov r8, r8)
 8007308:	46bd      	mov	sp, r7
 800730a:	b006      	add	sp, #24
 800730c:	bd80      	pop	{r7, pc}

0800730e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800730e:	b590      	push	{r4, r7, lr}
 8007310:	b08d      	sub	sp, #52	; 0x34
 8007312:	af04      	add	r7, sp, #16
 8007314:	60f8      	str	r0, [r7, #12]
 8007316:	60b9      	str	r1, [r7, #8]
 8007318:	607a      	str	r2, [r7, #4]
 800731a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800731c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800731e:	2b00      	cmp	r3, #0
 8007320:	d101      	bne.n	8007326 <xTaskCreateStatic+0x18>
 8007322:	b672      	cpsid	i
 8007324:	e7fe      	b.n	8007324 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8007326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007328:	2b00      	cmp	r3, #0
 800732a:	d101      	bne.n	8007330 <xTaskCreateStatic+0x22>
 800732c:	b672      	cpsid	i
 800732e:	e7fe      	b.n	800732e <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007330:	23bc      	movs	r3, #188	; 0xbc
 8007332:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	2bbc      	cmp	r3, #188	; 0xbc
 8007338:	d001      	beq.n	800733e <xTaskCreateStatic+0x30>
 800733a:	b672      	cpsid	i
 800733c:	e7fe      	b.n	800733c <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800733e:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007342:	2b00      	cmp	r3, #0
 8007344:	d020      	beq.n	8007388 <xTaskCreateStatic+0x7a>
 8007346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007348:	2b00      	cmp	r3, #0
 800734a:	d01d      	beq.n	8007388 <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800734c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734e:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007354:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	22b9      	movs	r2, #185	; 0xb9
 800735a:	2102      	movs	r1, #2
 800735c:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800735e:	683c      	ldr	r4, [r7, #0]
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	68b9      	ldr	r1, [r7, #8]
 8007364:	68f8      	ldr	r0, [r7, #12]
 8007366:	2300      	movs	r3, #0
 8007368:	9303      	str	r3, [sp, #12]
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	9302      	str	r3, [sp, #8]
 800736e:	2318      	movs	r3, #24
 8007370:	18fb      	adds	r3, r7, r3
 8007372:	9301      	str	r3, [sp, #4]
 8007374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007376:	9300      	str	r3, [sp, #0]
 8007378:	0023      	movs	r3, r4
 800737a:	f000 f859 	bl	8007430 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	0018      	movs	r0, r3
 8007382:	f000 f8f5 	bl	8007570 <prvAddNewTaskToReadyList>
 8007386:	e001      	b.n	800738c <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 8007388:	2300      	movs	r3, #0
 800738a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800738c:	69bb      	ldr	r3, [r7, #24]
	}
 800738e:	0018      	movs	r0, r3
 8007390:	46bd      	mov	sp, r7
 8007392:	b009      	add	sp, #36	; 0x24
 8007394:	bd90      	pop	{r4, r7, pc}

08007396 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007396:	b590      	push	{r4, r7, lr}
 8007398:	b08d      	sub	sp, #52	; 0x34
 800739a:	af04      	add	r7, sp, #16
 800739c:	60f8      	str	r0, [r7, #12]
 800739e:	60b9      	str	r1, [r7, #8]
 80073a0:	603b      	str	r3, [r7, #0]
 80073a2:	1dbb      	adds	r3, r7, #6
 80073a4:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80073a6:	1dbb      	adds	r3, r7, #6
 80073a8:	881b      	ldrh	r3, [r3, #0]
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	0018      	movs	r0, r3
 80073ae:	f001 fc17 	bl	8008be0 <pvPortMalloc>
 80073b2:	0003      	movs	r3, r0
 80073b4:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d010      	beq.n	80073de <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80073bc:	20bc      	movs	r0, #188	; 0xbc
 80073be:	f001 fc0f 	bl	8008be0 <pvPortMalloc>
 80073c2:	0003      	movs	r3, r0
 80073c4:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d003      	beq.n	80073d4 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	697a      	ldr	r2, [r7, #20]
 80073d0:	631a      	str	r2, [r3, #48]	; 0x30
 80073d2:	e006      	b.n	80073e2 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	0018      	movs	r0, r3
 80073d8:	f001 fca8 	bl	8008d2c <vPortFree>
 80073dc:	e001      	b.n	80073e2 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80073de:	2300      	movs	r3, #0
 80073e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d01a      	beq.n	800741e <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	22b9      	movs	r2, #185	; 0xb9
 80073ec:	2100      	movs	r1, #0
 80073ee:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80073f0:	1dbb      	adds	r3, r7, #6
 80073f2:	881a      	ldrh	r2, [r3, #0]
 80073f4:	683c      	ldr	r4, [r7, #0]
 80073f6:	68b9      	ldr	r1, [r7, #8]
 80073f8:	68f8      	ldr	r0, [r7, #12]
 80073fa:	2300      	movs	r3, #0
 80073fc:	9303      	str	r3, [sp, #12]
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	9302      	str	r3, [sp, #8]
 8007402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007404:	9301      	str	r3, [sp, #4]
 8007406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007408:	9300      	str	r3, [sp, #0]
 800740a:	0023      	movs	r3, r4
 800740c:	f000 f810 	bl	8007430 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	0018      	movs	r0, r3
 8007414:	f000 f8ac 	bl	8007570 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007418:	2301      	movs	r3, #1
 800741a:	61bb      	str	r3, [r7, #24]
 800741c:	e002      	b.n	8007424 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800741e:	2301      	movs	r3, #1
 8007420:	425b      	negs	r3, r3
 8007422:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007424:	69bb      	ldr	r3, [r7, #24]
	}
 8007426:	0018      	movs	r0, r3
 8007428:	46bd      	mov	sp, r7
 800742a:	b009      	add	sp, #36	; 0x24
 800742c:	bd90      	pop	{r4, r7, pc}
	...

08007430 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b086      	sub	sp, #24
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	607a      	str	r2, [r7, #4]
 800743c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800743e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007440:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	001a      	movs	r2, r3
 8007448:	21a5      	movs	r1, #165	; 0xa5
 800744a:	f001 fea7 	bl	800919c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800744e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007450:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4942      	ldr	r1, [pc, #264]	; (8007560 <prvInitialiseNewTask+0x130>)
 8007456:	468c      	mov	ip, r1
 8007458:	4463      	add	r3, ip
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	18d3      	adds	r3, r2, r3
 800745e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	2207      	movs	r2, #7
 8007464:	4393      	bics	r3, r2
 8007466:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	2207      	movs	r2, #7
 800746c:	4013      	ands	r3, r2
 800746e:	d001      	beq.n	8007474 <prvInitialiseNewTask+0x44>
 8007470:	b672      	cpsid	i
 8007472:	e7fe      	b.n	8007472 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d020      	beq.n	80074bc <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800747a:	2300      	movs	r3, #0
 800747c:	617b      	str	r3, [r7, #20]
 800747e:	e013      	b.n	80074a8 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007480:	68ba      	ldr	r2, [r7, #8]
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	18d3      	adds	r3, r2, r3
 8007486:	7818      	ldrb	r0, [r3, #0]
 8007488:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800748a:	2134      	movs	r1, #52	; 0x34
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	18d3      	adds	r3, r2, r3
 8007490:	185b      	adds	r3, r3, r1
 8007492:	1c02      	adds	r2, r0, #0
 8007494:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007496:	68ba      	ldr	r2, [r7, #8]
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	18d3      	adds	r3, r2, r3
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d006      	beq.n	80074b0 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	3301      	adds	r3, #1
 80074a6:	617b      	str	r3, [r7, #20]
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	2b0f      	cmp	r3, #15
 80074ac:	d9e8      	bls.n	8007480 <prvInitialiseNewTask+0x50>
 80074ae:	e000      	b.n	80074b2 <prvInitialiseNewTask+0x82>
			{
				break;
 80074b0:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80074b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b4:	2243      	movs	r2, #67	; 0x43
 80074b6:	2100      	movs	r1, #0
 80074b8:	5499      	strb	r1, [r3, r2]
 80074ba:	e003      	b.n	80074c4 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80074bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074be:	2234      	movs	r2, #52	; 0x34
 80074c0:	2100      	movs	r1, #0
 80074c2:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80074c4:	6a3b      	ldr	r3, [r7, #32]
 80074c6:	2b37      	cmp	r3, #55	; 0x37
 80074c8:	d901      	bls.n	80074ce <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80074ca:	2337      	movs	r3, #55	; 0x37
 80074cc:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80074ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d0:	6a3a      	ldr	r2, [r7, #32]
 80074d2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80074d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d6:	6a3a      	ldr	r2, [r7, #32]
 80074d8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80074da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074dc:	2200      	movs	r2, #0
 80074de:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80074e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e2:	3304      	adds	r3, #4
 80074e4:	0018      	movs	r0, r3
 80074e6:	f7ff fa25 	bl	8006934 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80074ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ec:	3318      	adds	r3, #24
 80074ee:	0018      	movs	r0, r3
 80074f0:	f7ff fa20 	bl	8006934 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80074f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074f8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074fa:	6a3b      	ldr	r3, [r7, #32]
 80074fc:	2238      	movs	r2, #56	; 0x38
 80074fe:	1ad2      	subs	r2, r2, r3
 8007500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007502:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007506:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007508:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800750a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750c:	22b4      	movs	r2, #180	; 0xb4
 800750e:	2100      	movs	r1, #0
 8007510:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007514:	22b8      	movs	r2, #184	; 0xb8
 8007516:	2100      	movs	r1, #0
 8007518:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800751a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751c:	3354      	adds	r3, #84	; 0x54
 800751e:	2260      	movs	r2, #96	; 0x60
 8007520:	2100      	movs	r1, #0
 8007522:	0018      	movs	r0, r3
 8007524:	f001 fe3a 	bl	800919c <memset>
 8007528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752a:	4a0e      	ldr	r2, [pc, #56]	; (8007564 <prvInitialiseNewTask+0x134>)
 800752c:	659a      	str	r2, [r3, #88]	; 0x58
 800752e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007530:	4a0d      	ldr	r2, [pc, #52]	; (8007568 <prvInitialiseNewTask+0x138>)
 8007532:	65da      	str	r2, [r3, #92]	; 0x5c
 8007534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007536:	4a0d      	ldr	r2, [pc, #52]	; (800756c <prvInitialiseNewTask+0x13c>)
 8007538:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800753a:	683a      	ldr	r2, [r7, #0]
 800753c:	68f9      	ldr	r1, [r7, #12]
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	0018      	movs	r0, r3
 8007542:	f001 fa19 	bl	8008978 <pxPortInitialiseStack>
 8007546:	0002      	movs	r2, r0
 8007548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800754c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754e:	2b00      	cmp	r3, #0
 8007550:	d002      	beq.n	8007558 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007554:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007556:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007558:	46c0      	nop			; (mov r8, r8)
 800755a:	46bd      	mov	sp, r7
 800755c:	b006      	add	sp, #24
 800755e:	bd80      	pop	{r7, pc}
 8007560:	3fffffff 	.word	0x3fffffff
 8007564:	0800a778 	.word	0x0800a778
 8007568:	0800a798 	.word	0x0800a798
 800756c:	0800a758 	.word	0x0800a758

08007570 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007578:	f001 fa9a 	bl	8008ab0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800757c:	4b2a      	ldr	r3, [pc, #168]	; (8007628 <prvAddNewTaskToReadyList+0xb8>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	1c5a      	adds	r2, r3, #1
 8007582:	4b29      	ldr	r3, [pc, #164]	; (8007628 <prvAddNewTaskToReadyList+0xb8>)
 8007584:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8007586:	4b29      	ldr	r3, [pc, #164]	; (800762c <prvAddNewTaskToReadyList+0xbc>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d109      	bne.n	80075a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800758e:	4b27      	ldr	r3, [pc, #156]	; (800762c <prvAddNewTaskToReadyList+0xbc>)
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007594:	4b24      	ldr	r3, [pc, #144]	; (8007628 <prvAddNewTaskToReadyList+0xb8>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2b01      	cmp	r3, #1
 800759a:	d110      	bne.n	80075be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800759c:	f000 fba2 	bl	8007ce4 <prvInitialiseTaskLists>
 80075a0:	e00d      	b.n	80075be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80075a2:	4b23      	ldr	r3, [pc, #140]	; (8007630 <prvAddNewTaskToReadyList+0xc0>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d109      	bne.n	80075be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80075aa:	4b20      	ldr	r3, [pc, #128]	; (800762c <prvAddNewTaskToReadyList+0xbc>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d802      	bhi.n	80075be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80075b8:	4b1c      	ldr	r3, [pc, #112]	; (800762c <prvAddNewTaskToReadyList+0xbc>)
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80075be:	4b1d      	ldr	r3, [pc, #116]	; (8007634 <prvAddNewTaskToReadyList+0xc4>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	1c5a      	adds	r2, r3, #1
 80075c4:	4b1b      	ldr	r3, [pc, #108]	; (8007634 <prvAddNewTaskToReadyList+0xc4>)
 80075c6:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80075c8:	4b1a      	ldr	r3, [pc, #104]	; (8007634 <prvAddNewTaskToReadyList+0xc4>)
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d4:	4b18      	ldr	r3, [pc, #96]	; (8007638 <prvAddNewTaskToReadyList+0xc8>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	429a      	cmp	r2, r3
 80075da:	d903      	bls.n	80075e4 <prvAddNewTaskToReadyList+0x74>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075e0:	4b15      	ldr	r3, [pc, #84]	; (8007638 <prvAddNewTaskToReadyList+0xc8>)
 80075e2:	601a      	str	r2, [r3, #0]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075e8:	0013      	movs	r3, r2
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	189b      	adds	r3, r3, r2
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	4a12      	ldr	r2, [pc, #72]	; (800763c <prvAddNewTaskToReadyList+0xcc>)
 80075f2:	189a      	adds	r2, r3, r2
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	3304      	adds	r3, #4
 80075f8:	0019      	movs	r1, r3
 80075fa:	0010      	movs	r0, r2
 80075fc:	f7ff f9a5 	bl	800694a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007600:	f001 fa68 	bl	8008ad4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007604:	4b0a      	ldr	r3, [pc, #40]	; (8007630 <prvAddNewTaskToReadyList+0xc0>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d008      	beq.n	800761e <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800760c:	4b07      	ldr	r3, [pc, #28]	; (800762c <prvAddNewTaskToReadyList+0xbc>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007616:	429a      	cmp	r2, r3
 8007618:	d201      	bcs.n	800761e <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800761a:	f001 fa39 	bl	8008a90 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800761e:	46c0      	nop			; (mov r8, r8)
 8007620:	46bd      	mov	sp, r7
 8007622:	b002      	add	sp, #8
 8007624:	bd80      	pop	{r7, pc}
 8007626:	46c0      	nop			; (mov r8, r8)
 8007628:	200012e8 	.word	0x200012e8
 800762c:	20000e14 	.word	0x20000e14
 8007630:	200012f4 	.word	0x200012f4
 8007634:	20001304 	.word	0x20001304
 8007638:	200012f0 	.word	0x200012f0
 800763c:	20000e18 	.word	0x20000e18

08007640 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007648:	2300      	movs	r3, #0
 800764a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d010      	beq.n	8007674 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007652:	4b0d      	ldr	r3, [pc, #52]	; (8007688 <vTaskDelay+0x48>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d001      	beq.n	800765e <vTaskDelay+0x1e>
 800765a:	b672      	cpsid	i
 800765c:	e7fe      	b.n	800765c <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800765e:	f000 f873 	bl	8007748 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2100      	movs	r1, #0
 8007666:	0018      	movs	r0, r3
 8007668:	f000 fe20 	bl	80082ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800766c:	f000 f878 	bl	8007760 <xTaskResumeAll>
 8007670:	0003      	movs	r3, r0
 8007672:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d101      	bne.n	800767e <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800767a:	f001 fa09 	bl	8008a90 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800767e:	46c0      	nop			; (mov r8, r8)
 8007680:	46bd      	mov	sp, r7
 8007682:	b004      	add	sp, #16
 8007684:	bd80      	pop	{r7, pc}
 8007686:	46c0      	nop			; (mov r8, r8)
 8007688:	20001310 	.word	0x20001310

0800768c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800768c:	b590      	push	{r4, r7, lr}
 800768e:	b089      	sub	sp, #36	; 0x24
 8007690:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007692:	2300      	movs	r3, #0
 8007694:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007696:	2300      	movs	r3, #0
 8007698:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800769a:	003a      	movs	r2, r7
 800769c:	1d39      	adds	r1, r7, #4
 800769e:	2308      	movs	r3, #8
 80076a0:	18fb      	adds	r3, r7, r3
 80076a2:	0018      	movs	r0, r3
 80076a4:	f7ff f8f8 	bl	8006898 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80076a8:	683c      	ldr	r4, [r7, #0]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	68ba      	ldr	r2, [r7, #8]
 80076ae:	491e      	ldr	r1, [pc, #120]	; (8007728 <vTaskStartScheduler+0x9c>)
 80076b0:	481e      	ldr	r0, [pc, #120]	; (800772c <vTaskStartScheduler+0xa0>)
 80076b2:	9202      	str	r2, [sp, #8]
 80076b4:	9301      	str	r3, [sp, #4]
 80076b6:	2300      	movs	r3, #0
 80076b8:	9300      	str	r3, [sp, #0]
 80076ba:	2300      	movs	r3, #0
 80076bc:	0022      	movs	r2, r4
 80076be:	f7ff fe26 	bl	800730e <xTaskCreateStatic>
 80076c2:	0002      	movs	r2, r0
 80076c4:	4b1a      	ldr	r3, [pc, #104]	; (8007730 <vTaskStartScheduler+0xa4>)
 80076c6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80076c8:	4b19      	ldr	r3, [pc, #100]	; (8007730 <vTaskStartScheduler+0xa4>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d002      	beq.n	80076d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80076d0:	2301      	movs	r3, #1
 80076d2:	60fb      	str	r3, [r7, #12]
 80076d4:	e001      	b.n	80076da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80076d6:	2300      	movs	r3, #0
 80076d8:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d103      	bne.n	80076e8 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 80076e0:	f000 fe38 	bl	8008354 <xTimerCreateTimerTask>
 80076e4:	0003      	movs	r3, r0
 80076e6:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d113      	bne.n	8007716 <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80076ee:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80076f0:	4b10      	ldr	r3, [pc, #64]	; (8007734 <vTaskStartScheduler+0xa8>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	3354      	adds	r3, #84	; 0x54
 80076f6:	001a      	movs	r2, r3
 80076f8:	4b0f      	ldr	r3, [pc, #60]	; (8007738 <vTaskStartScheduler+0xac>)
 80076fa:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80076fc:	4b0f      	ldr	r3, [pc, #60]	; (800773c <vTaskStartScheduler+0xb0>)
 80076fe:	2201      	movs	r2, #1
 8007700:	4252      	negs	r2, r2
 8007702:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007704:	4b0e      	ldr	r3, [pc, #56]	; (8007740 <vTaskStartScheduler+0xb4>)
 8007706:	2201      	movs	r2, #1
 8007708:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800770a:	4b0e      	ldr	r3, [pc, #56]	; (8007744 <vTaskStartScheduler+0xb8>)
 800770c:	2200      	movs	r2, #0
 800770e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007710:	f001 f99a 	bl	8008a48 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007714:	e004      	b.n	8007720 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	3301      	adds	r3, #1
 800771a:	d101      	bne.n	8007720 <vTaskStartScheduler+0x94>
 800771c:	b672      	cpsid	i
 800771e:	e7fe      	b.n	800771e <vTaskStartScheduler+0x92>
}
 8007720:	46c0      	nop			; (mov r8, r8)
 8007722:	46bd      	mov	sp, r7
 8007724:	b005      	add	sp, #20
 8007726:	bd90      	pop	{r4, r7, pc}
 8007728:	08009db4 	.word	0x08009db4
 800772c:	08007cc5 	.word	0x08007cc5
 8007730:	2000130c 	.word	0x2000130c
 8007734:	20000e14 	.word	0x20000e14
 8007738:	20000034 	.word	0x20000034
 800773c:	20001308 	.word	0x20001308
 8007740:	200012f4 	.word	0x200012f4
 8007744:	200012ec 	.word	0x200012ec

08007748 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007748:	b580      	push	{r7, lr}
 800774a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800774c:	4b03      	ldr	r3, [pc, #12]	; (800775c <vTaskSuspendAll+0x14>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	1c5a      	adds	r2, r3, #1
 8007752:	4b02      	ldr	r3, [pc, #8]	; (800775c <vTaskSuspendAll+0x14>)
 8007754:	601a      	str	r2, [r3, #0]
	portMEMORY_BARRIER();
}
 8007756:	46c0      	nop			; (mov r8, r8)
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	20001310 	.word	0x20001310

08007760 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007766:	2300      	movs	r3, #0
 8007768:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800776a:	2300      	movs	r3, #0
 800776c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800776e:	4b3a      	ldr	r3, [pc, #232]	; (8007858 <xTaskResumeAll+0xf8>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d101      	bne.n	800777a <xTaskResumeAll+0x1a>
 8007776:	b672      	cpsid	i
 8007778:	e7fe      	b.n	8007778 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800777a:	f001 f999 	bl	8008ab0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800777e:	4b36      	ldr	r3, [pc, #216]	; (8007858 <xTaskResumeAll+0xf8>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	1e5a      	subs	r2, r3, #1
 8007784:	4b34      	ldr	r3, [pc, #208]	; (8007858 <xTaskResumeAll+0xf8>)
 8007786:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007788:	4b33      	ldr	r3, [pc, #204]	; (8007858 <xTaskResumeAll+0xf8>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d15b      	bne.n	8007848 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007790:	4b32      	ldr	r3, [pc, #200]	; (800785c <xTaskResumeAll+0xfc>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d057      	beq.n	8007848 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007798:	e02f      	b.n	80077fa <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800779a:	4b31      	ldr	r3, [pc, #196]	; (8007860 <xTaskResumeAll+0x100>)
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	68db      	ldr	r3, [r3, #12]
 80077a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	3318      	adds	r3, #24
 80077a6:	0018      	movs	r0, r3
 80077a8:	f7ff f927 	bl	80069fa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	3304      	adds	r3, #4
 80077b0:	0018      	movs	r0, r3
 80077b2:	f7ff f922 	bl	80069fa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ba:	4b2a      	ldr	r3, [pc, #168]	; (8007864 <xTaskResumeAll+0x104>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	429a      	cmp	r2, r3
 80077c0:	d903      	bls.n	80077ca <xTaskResumeAll+0x6a>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077c6:	4b27      	ldr	r3, [pc, #156]	; (8007864 <xTaskResumeAll+0x104>)
 80077c8:	601a      	str	r2, [r3, #0]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ce:	0013      	movs	r3, r2
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	189b      	adds	r3, r3, r2
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	4a24      	ldr	r2, [pc, #144]	; (8007868 <xTaskResumeAll+0x108>)
 80077d8:	189a      	adds	r2, r3, r2
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	3304      	adds	r3, #4
 80077de:	0019      	movs	r1, r3
 80077e0:	0010      	movs	r0, r2
 80077e2:	f7ff f8b2 	bl	800694a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ea:	4b20      	ldr	r3, [pc, #128]	; (800786c <xTaskResumeAll+0x10c>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d302      	bcc.n	80077fa <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 80077f4:	4b1e      	ldr	r3, [pc, #120]	; (8007870 <xTaskResumeAll+0x110>)
 80077f6:	2201      	movs	r2, #1
 80077f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077fa:	4b19      	ldr	r3, [pc, #100]	; (8007860 <xTaskResumeAll+0x100>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d1cb      	bne.n	800779a <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d001      	beq.n	800780c <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007808:	f000 fb0c 	bl	8007e24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800780c:	4b19      	ldr	r3, [pc, #100]	; (8007874 <xTaskResumeAll+0x114>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00f      	beq.n	8007838 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007818:	f000 f83c 	bl	8007894 <xTaskIncrementTick>
 800781c:	1e03      	subs	r3, r0, #0
 800781e:	d002      	beq.n	8007826 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8007820:	4b13      	ldr	r3, [pc, #76]	; (8007870 <xTaskResumeAll+0x110>)
 8007822:	2201      	movs	r2, #1
 8007824:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	3b01      	subs	r3, #1
 800782a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d1f2      	bne.n	8007818 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8007832:	4b10      	ldr	r3, [pc, #64]	; (8007874 <xTaskResumeAll+0x114>)
 8007834:	2200      	movs	r2, #0
 8007836:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007838:	4b0d      	ldr	r3, [pc, #52]	; (8007870 <xTaskResumeAll+0x110>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d003      	beq.n	8007848 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007840:	2301      	movs	r3, #1
 8007842:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007844:	f001 f924 	bl	8008a90 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007848:	f001 f944 	bl	8008ad4 <vPortExitCritical>

	return xAlreadyYielded;
 800784c:	68bb      	ldr	r3, [r7, #8]
}
 800784e:	0018      	movs	r0, r3
 8007850:	46bd      	mov	sp, r7
 8007852:	b004      	add	sp, #16
 8007854:	bd80      	pop	{r7, pc}
 8007856:	46c0      	nop			; (mov r8, r8)
 8007858:	20001310 	.word	0x20001310
 800785c:	200012e8 	.word	0x200012e8
 8007860:	200012a8 	.word	0x200012a8
 8007864:	200012f0 	.word	0x200012f0
 8007868:	20000e18 	.word	0x20000e18
 800786c:	20000e14 	.word	0x20000e14
 8007870:	200012fc 	.word	0x200012fc
 8007874:	200012f8 	.word	0x200012f8

08007878 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800787e:	4b04      	ldr	r3, [pc, #16]	; (8007890 <xTaskGetTickCount+0x18>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007884:	687b      	ldr	r3, [r7, #4]
}
 8007886:	0018      	movs	r0, r3
 8007888:	46bd      	mov	sp, r7
 800788a:	b002      	add	sp, #8
 800788c:	bd80      	pop	{r7, pc}
 800788e:	46c0      	nop			; (mov r8, r8)
 8007890:	200012ec 	.word	0x200012ec

08007894 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b086      	sub	sp, #24
 8007898:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800789a:	2300      	movs	r3, #0
 800789c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800789e:	4b4a      	ldr	r3, [pc, #296]	; (80079c8 <xTaskIncrementTick+0x134>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d000      	beq.n	80078a8 <xTaskIncrementTick+0x14>
 80078a6:	e07e      	b.n	80079a6 <xTaskIncrementTick+0x112>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80078a8:	4b48      	ldr	r3, [pc, #288]	; (80079cc <xTaskIncrementTick+0x138>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	3301      	adds	r3, #1
 80078ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80078b0:	4b46      	ldr	r3, [pc, #280]	; (80079cc <xTaskIncrementTick+0x138>)
 80078b2:	693a      	ldr	r2, [r7, #16]
 80078b4:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d117      	bne.n	80078ec <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 80078bc:	4b44      	ldr	r3, [pc, #272]	; (80079d0 <xTaskIncrementTick+0x13c>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d001      	beq.n	80078ca <xTaskIncrementTick+0x36>
 80078c6:	b672      	cpsid	i
 80078c8:	e7fe      	b.n	80078c8 <xTaskIncrementTick+0x34>
 80078ca:	4b41      	ldr	r3, [pc, #260]	; (80079d0 <xTaskIncrementTick+0x13c>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	60fb      	str	r3, [r7, #12]
 80078d0:	4b40      	ldr	r3, [pc, #256]	; (80079d4 <xTaskIncrementTick+0x140>)
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	4b3e      	ldr	r3, [pc, #248]	; (80079d0 <xTaskIncrementTick+0x13c>)
 80078d6:	601a      	str	r2, [r3, #0]
 80078d8:	4b3e      	ldr	r3, [pc, #248]	; (80079d4 <xTaskIncrementTick+0x140>)
 80078da:	68fa      	ldr	r2, [r7, #12]
 80078dc:	601a      	str	r2, [r3, #0]
 80078de:	4b3e      	ldr	r3, [pc, #248]	; (80079d8 <xTaskIncrementTick+0x144>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	1c5a      	adds	r2, r3, #1
 80078e4:	4b3c      	ldr	r3, [pc, #240]	; (80079d8 <xTaskIncrementTick+0x144>)
 80078e6:	601a      	str	r2, [r3, #0]
 80078e8:	f000 fa9c 	bl	8007e24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80078ec:	4b3b      	ldr	r3, [pc, #236]	; (80079dc <xTaskIncrementTick+0x148>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	693a      	ldr	r2, [r7, #16]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d349      	bcc.n	800798a <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078f6:	4b36      	ldr	r3, [pc, #216]	; (80079d0 <xTaskIncrementTick+0x13c>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d104      	bne.n	800790a <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007900:	4b36      	ldr	r3, [pc, #216]	; (80079dc <xTaskIncrementTick+0x148>)
 8007902:	2201      	movs	r2, #1
 8007904:	4252      	negs	r2, r2
 8007906:	601a      	str	r2, [r3, #0]
					break;
 8007908:	e03f      	b.n	800798a <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800790a:	4b31      	ldr	r3, [pc, #196]	; (80079d0 <xTaskIncrementTick+0x13c>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800791a:	693a      	ldr	r2, [r7, #16]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	429a      	cmp	r2, r3
 8007920:	d203      	bcs.n	800792a <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007922:	4b2e      	ldr	r3, [pc, #184]	; (80079dc <xTaskIncrementTick+0x148>)
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007928:	e02f      	b.n	800798a <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	3304      	adds	r3, #4
 800792e:	0018      	movs	r0, r3
 8007930:	f7ff f863 	bl	80069fa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007938:	2b00      	cmp	r3, #0
 800793a:	d004      	beq.n	8007946 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	3318      	adds	r3, #24
 8007940:	0018      	movs	r0, r3
 8007942:	f7ff f85a 	bl	80069fa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800794a:	4b25      	ldr	r3, [pc, #148]	; (80079e0 <xTaskIncrementTick+0x14c>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	429a      	cmp	r2, r3
 8007950:	d903      	bls.n	800795a <xTaskIncrementTick+0xc6>
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007956:	4b22      	ldr	r3, [pc, #136]	; (80079e0 <xTaskIncrementTick+0x14c>)
 8007958:	601a      	str	r2, [r3, #0]
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800795e:	0013      	movs	r3, r2
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	189b      	adds	r3, r3, r2
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	4a1f      	ldr	r2, [pc, #124]	; (80079e4 <xTaskIncrementTick+0x150>)
 8007968:	189a      	adds	r2, r3, r2
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	3304      	adds	r3, #4
 800796e:	0019      	movs	r1, r3
 8007970:	0010      	movs	r0, r2
 8007972:	f7fe ffea 	bl	800694a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800797a:	4b1b      	ldr	r3, [pc, #108]	; (80079e8 <xTaskIncrementTick+0x154>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007980:	429a      	cmp	r2, r3
 8007982:	d3b8      	bcc.n	80078f6 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8007984:	2301      	movs	r3, #1
 8007986:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007988:	e7b5      	b.n	80078f6 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800798a:	4b17      	ldr	r3, [pc, #92]	; (80079e8 <xTaskIncrementTick+0x154>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007990:	4914      	ldr	r1, [pc, #80]	; (80079e4 <xTaskIncrementTick+0x150>)
 8007992:	0013      	movs	r3, r2
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	189b      	adds	r3, r3, r2
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	585b      	ldr	r3, [r3, r1]
 800799c:	2b01      	cmp	r3, #1
 800799e:	d907      	bls.n	80079b0 <xTaskIncrementTick+0x11c>
			{
				xSwitchRequired = pdTRUE;
 80079a0:	2301      	movs	r3, #1
 80079a2:	617b      	str	r3, [r7, #20]
 80079a4:	e004      	b.n	80079b0 <xTaskIncrementTick+0x11c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80079a6:	4b11      	ldr	r3, [pc, #68]	; (80079ec <xTaskIncrementTick+0x158>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	1c5a      	adds	r2, r3, #1
 80079ac:	4b0f      	ldr	r3, [pc, #60]	; (80079ec <xTaskIncrementTick+0x158>)
 80079ae:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80079b0:	4b0f      	ldr	r3, [pc, #60]	; (80079f0 <xTaskIncrementTick+0x15c>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d001      	beq.n	80079bc <xTaskIncrementTick+0x128>
		{
			xSwitchRequired = pdTRUE;
 80079b8:	2301      	movs	r3, #1
 80079ba:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80079bc:	697b      	ldr	r3, [r7, #20]
}
 80079be:	0018      	movs	r0, r3
 80079c0:	46bd      	mov	sp, r7
 80079c2:	b006      	add	sp, #24
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	46c0      	nop			; (mov r8, r8)
 80079c8:	20001310 	.word	0x20001310
 80079cc:	200012ec 	.word	0x200012ec
 80079d0:	200012a0 	.word	0x200012a0
 80079d4:	200012a4 	.word	0x200012a4
 80079d8:	20001300 	.word	0x20001300
 80079dc:	20001308 	.word	0x20001308
 80079e0:	200012f0 	.word	0x200012f0
 80079e4:	20000e18 	.word	0x20000e18
 80079e8:	20000e14 	.word	0x20000e14
 80079ec:	200012f8 	.word	0x200012f8
 80079f0:	200012fc 	.word	0x200012fc

080079f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80079fa:	4b25      	ldr	r3, [pc, #148]	; (8007a90 <vTaskSwitchContext+0x9c>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d003      	beq.n	8007a0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a02:	4b24      	ldr	r3, [pc, #144]	; (8007a94 <vTaskSwitchContext+0xa0>)
 8007a04:	2201      	movs	r2, #1
 8007a06:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a08:	e03d      	b.n	8007a86 <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 8007a0a:	4b22      	ldr	r3, [pc, #136]	; (8007a94 <vTaskSwitchContext+0xa0>)
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a10:	4b21      	ldr	r3, [pc, #132]	; (8007a98 <vTaskSwitchContext+0xa4>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	607b      	str	r3, [r7, #4]
 8007a16:	e007      	b.n	8007a28 <vTaskSwitchContext+0x34>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d101      	bne.n	8007a22 <vTaskSwitchContext+0x2e>
 8007a1e:	b672      	cpsid	i
 8007a20:	e7fe      	b.n	8007a20 <vTaskSwitchContext+0x2c>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	3b01      	subs	r3, #1
 8007a26:	607b      	str	r3, [r7, #4]
 8007a28:	491c      	ldr	r1, [pc, #112]	; (8007a9c <vTaskSwitchContext+0xa8>)
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	0013      	movs	r3, r2
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	189b      	adds	r3, r3, r2
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	585b      	ldr	r3, [r3, r1]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d0ee      	beq.n	8007a18 <vTaskSwitchContext+0x24>
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	0013      	movs	r3, r2
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	189b      	adds	r3, r3, r2
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	4a15      	ldr	r2, [pc, #84]	; (8007a9c <vTaskSwitchContext+0xa8>)
 8007a46:	189b      	adds	r3, r3, r2
 8007a48:	603b      	str	r3, [r7, #0]
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	685a      	ldr	r2, [r3, #4]
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	605a      	str	r2, [r3, #4]
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	685a      	ldr	r2, [r3, #4]
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	3308      	adds	r3, #8
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d104      	bne.n	8007a6a <vTaskSwitchContext+0x76>
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	685a      	ldr	r2, [r3, #4]
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	605a      	str	r2, [r3, #4]
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	68da      	ldr	r2, [r3, #12]
 8007a70:	4b0b      	ldr	r3, [pc, #44]	; (8007aa0 <vTaskSwitchContext+0xac>)
 8007a72:	601a      	str	r2, [r3, #0]
 8007a74:	4b08      	ldr	r3, [pc, #32]	; (8007a98 <vTaskSwitchContext+0xa4>)
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007a7a:	4b09      	ldr	r3, [pc, #36]	; (8007aa0 <vTaskSwitchContext+0xac>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	3354      	adds	r3, #84	; 0x54
 8007a80:	001a      	movs	r2, r3
 8007a82:	4b08      	ldr	r3, [pc, #32]	; (8007aa4 <vTaskSwitchContext+0xb0>)
 8007a84:	601a      	str	r2, [r3, #0]
}
 8007a86:	46c0      	nop			; (mov r8, r8)
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	b002      	add	sp, #8
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	46c0      	nop			; (mov r8, r8)
 8007a90:	20001310 	.word	0x20001310
 8007a94:	200012fc 	.word	0x200012fc
 8007a98:	200012f0 	.word	0x200012f0
 8007a9c:	20000e18 	.word	0x20000e18
 8007aa0:	20000e14 	.word	0x20000e14
 8007aa4:	20000034 	.word	0x20000034

08007aa8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d101      	bne.n	8007abc <vTaskPlaceOnEventList+0x14>
 8007ab8:	b672      	cpsid	i
 8007aba:	e7fe      	b.n	8007aba <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007abc:	4b08      	ldr	r3, [pc, #32]	; (8007ae0 <vTaskPlaceOnEventList+0x38>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	3318      	adds	r3, #24
 8007ac2:	001a      	movs	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	0011      	movs	r1, r2
 8007ac8:	0018      	movs	r0, r3
 8007aca:	f7fe ff60 	bl	800698e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	2101      	movs	r1, #1
 8007ad2:	0018      	movs	r0, r3
 8007ad4:	f000 fbea 	bl	80082ac <prvAddCurrentTaskToDelayedList>
}
 8007ad8:	46c0      	nop			; (mov r8, r8)
 8007ada:	46bd      	mov	sp, r7
 8007adc:	b002      	add	sp, #8
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	20000e14 	.word	0x20000e14

08007ae4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d101      	bne.n	8007afa <vTaskPlaceOnEventListRestricted+0x16>
 8007af6:	b672      	cpsid	i
 8007af8:	e7fe      	b.n	8007af8 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007afa:	4b0c      	ldr	r3, [pc, #48]	; (8007b2c <vTaskPlaceOnEventListRestricted+0x48>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	3318      	adds	r3, #24
 8007b00:	001a      	movs	r2, r3
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	0011      	movs	r1, r2
 8007b06:	0018      	movs	r0, r3
 8007b08:	f7fe ff1f 	bl	800694a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d002      	beq.n	8007b18 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8007b12:	2301      	movs	r3, #1
 8007b14:	425b      	negs	r3, r3
 8007b16:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	0011      	movs	r1, r2
 8007b1e:	0018      	movs	r0, r3
 8007b20:	f000 fbc4 	bl	80082ac <prvAddCurrentTaskToDelayedList>
	}
 8007b24:	46c0      	nop			; (mov r8, r8)
 8007b26:	46bd      	mov	sp, r7
 8007b28:	b004      	add	sp, #16
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	20000e14 	.word	0x20000e14

08007b30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d101      	bne.n	8007b4a <xTaskRemoveFromEventList+0x1a>
 8007b46:	b672      	cpsid	i
 8007b48:	e7fe      	b.n	8007b48 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	3318      	adds	r3, #24
 8007b4e:	0018      	movs	r0, r3
 8007b50:	f7fe ff53 	bl	80069fa <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b54:	4b1e      	ldr	r3, [pc, #120]	; (8007bd0 <xTaskRemoveFromEventList+0xa0>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d11d      	bne.n	8007b98 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	3304      	adds	r3, #4
 8007b60:	0018      	movs	r0, r3
 8007b62:	f7fe ff4a 	bl	80069fa <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b6a:	4b1a      	ldr	r3, [pc, #104]	; (8007bd4 <xTaskRemoveFromEventList+0xa4>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d903      	bls.n	8007b7a <xTaskRemoveFromEventList+0x4a>
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b76:	4b17      	ldr	r3, [pc, #92]	; (8007bd4 <xTaskRemoveFromEventList+0xa4>)
 8007b78:	601a      	str	r2, [r3, #0]
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b7e:	0013      	movs	r3, r2
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	189b      	adds	r3, r3, r2
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	4a14      	ldr	r2, [pc, #80]	; (8007bd8 <xTaskRemoveFromEventList+0xa8>)
 8007b88:	189a      	adds	r2, r3, r2
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	3304      	adds	r3, #4
 8007b8e:	0019      	movs	r1, r3
 8007b90:	0010      	movs	r0, r2
 8007b92:	f7fe feda 	bl	800694a <vListInsertEnd>
 8007b96:	e007      	b.n	8007ba8 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	3318      	adds	r3, #24
 8007b9c:	001a      	movs	r2, r3
 8007b9e:	4b0f      	ldr	r3, [pc, #60]	; (8007bdc <xTaskRemoveFromEventList+0xac>)
 8007ba0:	0011      	movs	r1, r2
 8007ba2:	0018      	movs	r0, r3
 8007ba4:	f7fe fed1 	bl	800694a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bac:	4b0c      	ldr	r3, [pc, #48]	; (8007be0 <xTaskRemoveFromEventList+0xb0>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d905      	bls.n	8007bc2 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007bba:	4b0a      	ldr	r3, [pc, #40]	; (8007be4 <xTaskRemoveFromEventList+0xb4>)
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	601a      	str	r2, [r3, #0]
 8007bc0:	e001      	b.n	8007bc6 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
}
 8007bc8:	0018      	movs	r0, r3
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	b004      	add	sp, #16
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	20001310 	.word	0x20001310
 8007bd4:	200012f0 	.word	0x200012f0
 8007bd8:	20000e18 	.word	0x20000e18
 8007bdc:	200012a8 	.word	0x200012a8
 8007be0:	20000e14 	.word	0x20000e14
 8007be4:	200012fc 	.word	0x200012fc

08007be8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007bf0:	4b05      	ldr	r3, [pc, #20]	; (8007c08 <vTaskInternalSetTimeOutState+0x20>)
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007bf8:	4b04      	ldr	r3, [pc, #16]	; (8007c0c <vTaskInternalSetTimeOutState+0x24>)
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	605a      	str	r2, [r3, #4]
}
 8007c00:	46c0      	nop			; (mov r8, r8)
 8007c02:	46bd      	mov	sp, r7
 8007c04:	b002      	add	sp, #8
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	20001300 	.word	0x20001300
 8007c0c:	200012ec 	.word	0x200012ec

08007c10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b086      	sub	sp, #24
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d101      	bne.n	8007c24 <xTaskCheckForTimeOut+0x14>
 8007c20:	b672      	cpsid	i
 8007c22:	e7fe      	b.n	8007c22 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d101      	bne.n	8007c2e <xTaskCheckForTimeOut+0x1e>
 8007c2a:	b672      	cpsid	i
 8007c2c:	e7fe      	b.n	8007c2c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8007c2e:	f000 ff3f 	bl	8008ab0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007c32:	4b1d      	ldr	r3, [pc, #116]	; (8007ca8 <xTaskCheckForTimeOut+0x98>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	693a      	ldr	r2, [r7, #16]
 8007c3e:	1ad3      	subs	r3, r2, r3
 8007c40:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	3301      	adds	r3, #1
 8007c48:	d102      	bne.n	8007c50 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	617b      	str	r3, [r7, #20]
 8007c4e:	e024      	b.n	8007c9a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	4b15      	ldr	r3, [pc, #84]	; (8007cac <xTaskCheckForTimeOut+0x9c>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d007      	beq.n	8007c6c <xTaskCheckForTimeOut+0x5c>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	693a      	ldr	r2, [r7, #16]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d302      	bcc.n	8007c6c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007c66:	2301      	movs	r3, #1
 8007c68:	617b      	str	r3, [r7, #20]
 8007c6a:	e016      	b.n	8007c9a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	68fa      	ldr	r2, [r7, #12]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d20c      	bcs.n	8007c90 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	1ad2      	subs	r2, r2, r3
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	0018      	movs	r0, r3
 8007c86:	f7ff ffaf 	bl	8007be8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	617b      	str	r3, [r7, #20]
 8007c8e:	e004      	b.n	8007c9a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	2200      	movs	r2, #0
 8007c94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007c96:	2301      	movs	r3, #1
 8007c98:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8007c9a:	f000 ff1b 	bl	8008ad4 <vPortExitCritical>

	return xReturn;
 8007c9e:	697b      	ldr	r3, [r7, #20]
}
 8007ca0:	0018      	movs	r0, r3
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	b006      	add	sp, #24
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	200012ec 	.word	0x200012ec
 8007cac:	20001300 	.word	0x20001300

08007cb0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007cb4:	4b02      	ldr	r3, [pc, #8]	; (8007cc0 <vTaskMissedYield+0x10>)
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	601a      	str	r2, [r3, #0]
}
 8007cba:	46c0      	nop			; (mov r8, r8)
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	200012fc 	.word	0x200012fc

08007cc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007ccc:	f000 f84e 	bl	8007d6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007cd0:	4b03      	ldr	r3, [pc, #12]	; (8007ce0 <prvIdleTask+0x1c>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d9f9      	bls.n	8007ccc <prvIdleTask+0x8>
			{
				taskYIELD();
 8007cd8:	f000 feda 	bl	8008a90 <vPortYield>
		prvCheckTasksWaitingTermination();
 8007cdc:	e7f6      	b.n	8007ccc <prvIdleTask+0x8>
 8007cde:	46c0      	nop			; (mov r8, r8)
 8007ce0:	20000e18 	.word	0x20000e18

08007ce4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007cea:	2300      	movs	r3, #0
 8007cec:	607b      	str	r3, [r7, #4]
 8007cee:	e00c      	b.n	8007d0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	0013      	movs	r3, r2
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	189b      	adds	r3, r3, r2
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	4a14      	ldr	r2, [pc, #80]	; (8007d4c <prvInitialiseTaskLists+0x68>)
 8007cfc:	189b      	adds	r3, r3, r2
 8007cfe:	0018      	movs	r0, r3
 8007d00:	f7fe fdfa 	bl	80068f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	3301      	adds	r3, #1
 8007d08:	607b      	str	r3, [r7, #4]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2b37      	cmp	r3, #55	; 0x37
 8007d0e:	d9ef      	bls.n	8007cf0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007d10:	4b0f      	ldr	r3, [pc, #60]	; (8007d50 <prvInitialiseTaskLists+0x6c>)
 8007d12:	0018      	movs	r0, r3
 8007d14:	f7fe fdf0 	bl	80068f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007d18:	4b0e      	ldr	r3, [pc, #56]	; (8007d54 <prvInitialiseTaskLists+0x70>)
 8007d1a:	0018      	movs	r0, r3
 8007d1c:	f7fe fdec 	bl	80068f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007d20:	4b0d      	ldr	r3, [pc, #52]	; (8007d58 <prvInitialiseTaskLists+0x74>)
 8007d22:	0018      	movs	r0, r3
 8007d24:	f7fe fde8 	bl	80068f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007d28:	4b0c      	ldr	r3, [pc, #48]	; (8007d5c <prvInitialiseTaskLists+0x78>)
 8007d2a:	0018      	movs	r0, r3
 8007d2c:	f7fe fde4 	bl	80068f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007d30:	4b0b      	ldr	r3, [pc, #44]	; (8007d60 <prvInitialiseTaskLists+0x7c>)
 8007d32:	0018      	movs	r0, r3
 8007d34:	f7fe fde0 	bl	80068f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007d38:	4b0a      	ldr	r3, [pc, #40]	; (8007d64 <prvInitialiseTaskLists+0x80>)
 8007d3a:	4a05      	ldr	r2, [pc, #20]	; (8007d50 <prvInitialiseTaskLists+0x6c>)
 8007d3c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007d3e:	4b0a      	ldr	r3, [pc, #40]	; (8007d68 <prvInitialiseTaskLists+0x84>)
 8007d40:	4a04      	ldr	r2, [pc, #16]	; (8007d54 <prvInitialiseTaskLists+0x70>)
 8007d42:	601a      	str	r2, [r3, #0]
}
 8007d44:	46c0      	nop			; (mov r8, r8)
 8007d46:	46bd      	mov	sp, r7
 8007d48:	b002      	add	sp, #8
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	20000e18 	.word	0x20000e18
 8007d50:	20001278 	.word	0x20001278
 8007d54:	2000128c 	.word	0x2000128c
 8007d58:	200012a8 	.word	0x200012a8
 8007d5c:	200012bc 	.word	0x200012bc
 8007d60:	200012d4 	.word	0x200012d4
 8007d64:	200012a0 	.word	0x200012a0
 8007d68:	200012a4 	.word	0x200012a4

08007d6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d72:	e01a      	b.n	8007daa <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8007d74:	f000 fe9c 	bl	8008ab0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d78:	4b10      	ldr	r3, [pc, #64]	; (8007dbc <prvCheckTasksWaitingTermination+0x50>)
 8007d7a:	68db      	ldr	r3, [r3, #12]
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	3304      	adds	r3, #4
 8007d84:	0018      	movs	r0, r3
 8007d86:	f7fe fe38 	bl	80069fa <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007d8a:	4b0d      	ldr	r3, [pc, #52]	; (8007dc0 <prvCheckTasksWaitingTermination+0x54>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	1e5a      	subs	r2, r3, #1
 8007d90:	4b0b      	ldr	r3, [pc, #44]	; (8007dc0 <prvCheckTasksWaitingTermination+0x54>)
 8007d92:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007d94:	4b0b      	ldr	r3, [pc, #44]	; (8007dc4 <prvCheckTasksWaitingTermination+0x58>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	1e5a      	subs	r2, r3, #1
 8007d9a:	4b0a      	ldr	r3, [pc, #40]	; (8007dc4 <prvCheckTasksWaitingTermination+0x58>)
 8007d9c:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8007d9e:	f000 fe99 	bl	8008ad4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	0018      	movs	r0, r3
 8007da6:	f000 f80f 	bl	8007dc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007daa:	4b06      	ldr	r3, [pc, #24]	; (8007dc4 <prvCheckTasksWaitingTermination+0x58>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1e0      	bne.n	8007d74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007db2:	46c0      	nop			; (mov r8, r8)
 8007db4:	46c0      	nop			; (mov r8, r8)
 8007db6:	46bd      	mov	sp, r7
 8007db8:	b002      	add	sp, #8
 8007dba:	bd80      	pop	{r7, pc}
 8007dbc:	200012bc 	.word	0x200012bc
 8007dc0:	200012e8 	.word	0x200012e8
 8007dc4:	200012d0 	.word	0x200012d0

08007dc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	3354      	adds	r3, #84	; 0x54
 8007dd4:	0018      	movs	r0, r3
 8007dd6:	f001 fb1f 	bl	8009418 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	22b9      	movs	r2, #185	; 0xb9
 8007dde:	5c9b      	ldrb	r3, [r3, r2]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d109      	bne.n	8007df8 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007de8:	0018      	movs	r0, r3
 8007dea:	f000 ff9f 	bl	8008d2c <vPortFree>
				vPortFree( pxTCB );
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	0018      	movs	r0, r3
 8007df2:	f000 ff9b 	bl	8008d2c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007df6:	e010      	b.n	8007e1a <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	22b9      	movs	r2, #185	; 0xb9
 8007dfc:	5c9b      	ldrb	r3, [r3, r2]
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d104      	bne.n	8007e0c <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	0018      	movs	r0, r3
 8007e06:	f000 ff91 	bl	8008d2c <vPortFree>
	}
 8007e0a:	e006      	b.n	8007e1a <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	22b9      	movs	r2, #185	; 0xb9
 8007e10:	5c9b      	ldrb	r3, [r3, r2]
 8007e12:	2b02      	cmp	r3, #2
 8007e14:	d001      	beq.n	8007e1a <prvDeleteTCB+0x52>
 8007e16:	b672      	cpsid	i
 8007e18:	e7fe      	b.n	8007e18 <prvDeleteTCB+0x50>
	}
 8007e1a:	46c0      	nop			; (mov r8, r8)
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	b002      	add	sp, #8
 8007e20:	bd80      	pop	{r7, pc}
	...

08007e24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e2a:	4b0b      	ldr	r3, [pc, #44]	; (8007e58 <prvResetNextTaskUnblockTime+0x34>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d104      	bne.n	8007e3e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007e34:	4b09      	ldr	r3, [pc, #36]	; (8007e5c <prvResetNextTaskUnblockTime+0x38>)
 8007e36:	2201      	movs	r2, #1
 8007e38:	4252      	negs	r2, r2
 8007e3a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007e3c:	e008      	b.n	8007e50 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e3e:	4b06      	ldr	r3, [pc, #24]	; (8007e58 <prvResetNextTaskUnblockTime+0x34>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	685a      	ldr	r2, [r3, #4]
 8007e4c:	4b03      	ldr	r3, [pc, #12]	; (8007e5c <prvResetNextTaskUnblockTime+0x38>)
 8007e4e:	601a      	str	r2, [r3, #0]
}
 8007e50:	46c0      	nop			; (mov r8, r8)
 8007e52:	46bd      	mov	sp, r7
 8007e54:	b002      	add	sp, #8
 8007e56:	bd80      	pop	{r7, pc}
 8007e58:	200012a0 	.word	0x200012a0
 8007e5c:	20001308 	.word	0x20001308

08007e60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007e66:	4b0a      	ldr	r3, [pc, #40]	; (8007e90 <xTaskGetSchedulerState+0x30>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d102      	bne.n	8007e74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	607b      	str	r3, [r7, #4]
 8007e72:	e008      	b.n	8007e86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e74:	4b07      	ldr	r3, [pc, #28]	; (8007e94 <xTaskGetSchedulerState+0x34>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d102      	bne.n	8007e82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007e7c:	2302      	movs	r3, #2
 8007e7e:	607b      	str	r3, [r7, #4]
 8007e80:	e001      	b.n	8007e86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007e82:	2300      	movs	r3, #0
 8007e84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007e86:	687b      	ldr	r3, [r7, #4]
	}
 8007e88:	0018      	movs	r0, r3
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	b002      	add	sp, #8
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	200012f4 	.word	0x200012f4
 8007e94:	20001310 	.word	0x20001310

08007e98 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d044      	beq.n	8007f38 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007eae:	4b25      	ldr	r3, [pc, #148]	; (8007f44 <xTaskPriorityDisinherit+0xac>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	68ba      	ldr	r2, [r7, #8]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d001      	beq.n	8007ebc <xTaskPriorityDisinherit+0x24>
 8007eb8:	b672      	cpsid	i
 8007eba:	e7fe      	b.n	8007eba <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d101      	bne.n	8007ec8 <xTaskPriorityDisinherit+0x30>
 8007ec4:	b672      	cpsid	i
 8007ec6:	e7fe      	b.n	8007ec6 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ecc:	1e5a      	subs	r2, r3, #1
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d02c      	beq.n	8007f38 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d128      	bne.n	8007f38 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	3304      	adds	r3, #4
 8007eea:	0018      	movs	r0, r3
 8007eec:	f7fe fd85 	bl	80069fa <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007efc:	2238      	movs	r2, #56	; 0x38
 8007efe:	1ad2      	subs	r2, r2, r3
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f08:	4b0f      	ldr	r3, [pc, #60]	; (8007f48 <xTaskPriorityDisinherit+0xb0>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d903      	bls.n	8007f18 <xTaskPriorityDisinherit+0x80>
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f14:	4b0c      	ldr	r3, [pc, #48]	; (8007f48 <xTaskPriorityDisinherit+0xb0>)
 8007f16:	601a      	str	r2, [r3, #0]
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f1c:	0013      	movs	r3, r2
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	189b      	adds	r3, r3, r2
 8007f22:	009b      	lsls	r3, r3, #2
 8007f24:	4a09      	ldr	r2, [pc, #36]	; (8007f4c <xTaskPriorityDisinherit+0xb4>)
 8007f26:	189a      	adds	r2, r3, r2
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	3304      	adds	r3, #4
 8007f2c:	0019      	movs	r1, r3
 8007f2e:	0010      	movs	r0, r2
 8007f30:	f7fe fd0b 	bl	800694a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007f34:	2301      	movs	r3, #1
 8007f36:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007f38:	68fb      	ldr	r3, [r7, #12]
	}
 8007f3a:	0018      	movs	r0, r3
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	b004      	add	sp, #16
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	46c0      	nop			; (mov r8, r8)
 8007f44:	20000e14 	.word	0x20000e14
 8007f48:	200012f0 	.word	0x200012f0
 8007f4c:	20000e18 	.word	0x20000e18

08007f50 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b086      	sub	sp, #24
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	607a      	str	r2, [r7, #4]
 8007f5c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8007f5e:	f000 fda7 	bl	8008ab0 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007f62:	4b26      	ldr	r3, [pc, #152]	; (8007ffc <xTaskNotifyWait+0xac>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	22b8      	movs	r2, #184	; 0xb8
 8007f68:	5c9b      	ldrb	r3, [r3, r2]
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	2b02      	cmp	r3, #2
 8007f6e:	d017      	beq.n	8007fa0 <xTaskNotifyWait+0x50>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8007f70:	4b22      	ldr	r3, [pc, #136]	; (8007ffc <xTaskNotifyWait+0xac>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	22b4      	movs	r2, #180	; 0xb4
 8007f76:	589a      	ldr	r2, [r3, r2]
 8007f78:	68f9      	ldr	r1, [r7, #12]
 8007f7a:	43c9      	mvns	r1, r1
 8007f7c:	400a      	ands	r2, r1
 8007f7e:	21b4      	movs	r1, #180	; 0xb4
 8007f80:	505a      	str	r2, [r3, r1]

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007f82:	4b1e      	ldr	r3, [pc, #120]	; (8007ffc <xTaskNotifyWait+0xac>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	22b8      	movs	r2, #184	; 0xb8
 8007f88:	2101      	movs	r1, #1
 8007f8a:	5499      	strb	r1, [r3, r2]

				if( xTicksToWait > ( TickType_t ) 0 )
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d006      	beq.n	8007fa0 <xTaskNotifyWait+0x50>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	2101      	movs	r1, #1
 8007f96:	0018      	movs	r0, r3
 8007f98:	f000 f988 	bl	80082ac <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8007f9c:	f000 fd78 	bl	8008a90 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007fa0:	f000 fd98 	bl	8008ad4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8007fa4:	f000 fd84 	bl	8008ab0 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d005      	beq.n	8007fba <xTaskNotifyWait+0x6a>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8007fae:	4b13      	ldr	r3, [pc, #76]	; (8007ffc <xTaskNotifyWait+0xac>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	22b4      	movs	r2, #180	; 0xb4
 8007fb4:	589a      	ldr	r2, [r3, r2]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007fba:	4b10      	ldr	r3, [pc, #64]	; (8007ffc <xTaskNotifyWait+0xac>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	22b8      	movs	r2, #184	; 0xb8
 8007fc0:	5c9b      	ldrb	r3, [r3, r2]
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	2b02      	cmp	r3, #2
 8007fc6:	d002      	beq.n	8007fce <xTaskNotifyWait+0x7e>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	617b      	str	r3, [r7, #20]
 8007fcc:	e00a      	b.n	8007fe4 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8007fce:	4b0b      	ldr	r3, [pc, #44]	; (8007ffc <xTaskNotifyWait+0xac>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	22b4      	movs	r2, #180	; 0xb4
 8007fd4:	589a      	ldr	r2, [r3, r2]
 8007fd6:	68b9      	ldr	r1, [r7, #8]
 8007fd8:	43c9      	mvns	r1, r1
 8007fda:	400a      	ands	r2, r1
 8007fdc:	21b4      	movs	r1, #180	; 0xb4
 8007fde:	505a      	str	r2, [r3, r1]
				xReturn = pdTRUE;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007fe4:	4b05      	ldr	r3, [pc, #20]	; (8007ffc <xTaskNotifyWait+0xac>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	22b8      	movs	r2, #184	; 0xb8
 8007fea:	2100      	movs	r1, #0
 8007fec:	5499      	strb	r1, [r3, r2]
		}
		taskEXIT_CRITICAL();
 8007fee:	f000 fd71 	bl	8008ad4 <vPortExitCritical>

		return xReturn;
 8007ff2:	697b      	ldr	r3, [r7, #20]
	}
 8007ff4:	0018      	movs	r0, r3
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	b006      	add	sp, #24
 8007ffa:	bd80      	pop	{r7, pc}
 8007ffc:	20000e14 	.word	0x20000e14

08008000 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8008000:	b580      	push	{r7, lr}
 8008002:	b088      	sub	sp, #32
 8008004:	af00      	add	r7, sp, #0
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	60b9      	str	r1, [r7, #8]
 800800a:	603b      	str	r3, [r7, #0]
 800800c:	1dfb      	adds	r3, r7, #7
 800800e:	701a      	strb	r2, [r3, #0]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8008010:	2301      	movs	r3, #1
 8008012:	61fb      	str	r3, [r7, #28]
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d101      	bne.n	800801e <xTaskGenericNotify+0x1e>
 800801a:	b672      	cpsid	i
 800801c:	e7fe      	b.n	800801c <xTaskGenericNotify+0x1c>
		pxTCB = xTaskToNotify;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	61bb      	str	r3, [r7, #24]

		taskENTER_CRITICAL();
 8008022:	f000 fd45 	bl	8008ab0 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d004      	beq.n	8008036 <xTaskGenericNotify+0x36>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800802c:	69bb      	ldr	r3, [r7, #24]
 800802e:	22b4      	movs	r2, #180	; 0xb4
 8008030:	589a      	ldr	r2, [r3, r2]
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008036:	2317      	movs	r3, #23
 8008038:	18fb      	adds	r3, r7, r3
 800803a:	69ba      	ldr	r2, [r7, #24]
 800803c:	21b8      	movs	r1, #184	; 0xb8
 800803e:	5c52      	ldrb	r2, [r2, r1]
 8008040:	701a      	strb	r2, [r3, #0]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	22b8      	movs	r2, #184	; 0xb8
 8008046:	2102      	movs	r1, #2
 8008048:	5499      	strb	r1, [r3, r2]

			switch( eAction )
 800804a:	1dfb      	adds	r3, r7, #7
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	2b04      	cmp	r3, #4
 8008050:	d827      	bhi.n	80080a2 <xTaskGenericNotify+0xa2>
 8008052:	009a      	lsls	r2, r3, #2
 8008054:	4b34      	ldr	r3, [pc, #208]	; (8008128 <xTaskGenericNotify+0x128>)
 8008056:	18d3      	adds	r3, r2, r3
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	469f      	mov	pc, r3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800805c:	69bb      	ldr	r3, [r7, #24]
 800805e:	22b4      	movs	r2, #180	; 0xb4
 8008060:	589a      	ldr	r2, [r3, r2]
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	431a      	orrs	r2, r3
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	21b4      	movs	r1, #180	; 0xb4
 800806a:	505a      	str	r2, [r3, r1]
					break;
 800806c:	e023      	b.n	80080b6 <xTaskGenericNotify+0xb6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	22b4      	movs	r2, #180	; 0xb4
 8008072:	589b      	ldr	r3, [r3, r2]
 8008074:	1c5a      	adds	r2, r3, #1
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	21b4      	movs	r1, #180	; 0xb4
 800807a:	505a      	str	r2, [r3, r1]
					break;
 800807c:	e01b      	b.n	80080b6 <xTaskGenericNotify+0xb6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	21b4      	movs	r1, #180	; 0xb4
 8008082:	68ba      	ldr	r2, [r7, #8]
 8008084:	505a      	str	r2, [r3, r1]
					break;
 8008086:	e016      	b.n	80080b6 <xTaskGenericNotify+0xb6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008088:	2317      	movs	r3, #23
 800808a:	18fb      	adds	r3, r7, r3
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	2b02      	cmp	r3, #2
 8008090:	d004      	beq.n	800809c <xTaskGenericNotify+0x9c>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	21b4      	movs	r1, #180	; 0xb4
 8008096:	68ba      	ldr	r2, [r7, #8]
 8008098:	505a      	str	r2, [r3, r1]
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800809a:	e00c      	b.n	80080b6 <xTaskGenericNotify+0xb6>
						xReturn = pdFAIL;
 800809c:	2300      	movs	r3, #0
 800809e:	61fb      	str	r3, [r7, #28]
					break;
 80080a0:	e009      	b.n	80080b6 <xTaskGenericNotify+0xb6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80080a2:	69bb      	ldr	r3, [r7, #24]
 80080a4:	22b4      	movs	r2, #180	; 0xb4
 80080a6:	589b      	ldr	r3, [r3, r2]
 80080a8:	3301      	adds	r3, #1
 80080aa:	d003      	beq.n	80080b4 <xTaskGenericNotify+0xb4>
 80080ac:	b672      	cpsid	i
 80080ae:	e7fe      	b.n	80080ae <xTaskGenericNotify+0xae>
					break;
 80080b0:	46c0      	nop			; (mov r8, r8)
 80080b2:	e000      	b.n	80080b6 <xTaskGenericNotify+0xb6>

					break;
 80080b4:	46c0      	nop			; (mov r8, r8)

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80080b6:	2317      	movs	r3, #23
 80080b8:	18fb      	adds	r3, r7, r3
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d12b      	bne.n	8008118 <xTaskGenericNotify+0x118>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080c0:	69bb      	ldr	r3, [r7, #24]
 80080c2:	3304      	adds	r3, #4
 80080c4:	0018      	movs	r0, r3
 80080c6:	f7fe fc98 	bl	80069fa <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ce:	4b17      	ldr	r3, [pc, #92]	; (800812c <xTaskGenericNotify+0x12c>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d903      	bls.n	80080de <xTaskGenericNotify+0xde>
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080da:	4b14      	ldr	r3, [pc, #80]	; (800812c <xTaskGenericNotify+0x12c>)
 80080dc:	601a      	str	r2, [r3, #0]
 80080de:	69bb      	ldr	r3, [r7, #24]
 80080e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080e2:	0013      	movs	r3, r2
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	189b      	adds	r3, r3, r2
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	4a11      	ldr	r2, [pc, #68]	; (8008130 <xTaskGenericNotify+0x130>)
 80080ec:	189a      	adds	r2, r3, r2
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	3304      	adds	r3, #4
 80080f2:	0019      	movs	r1, r3
 80080f4:	0010      	movs	r0, r2
 80080f6:	f7fe fc28 	bl	800694a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d001      	beq.n	8008106 <xTaskGenericNotify+0x106>
 8008102:	b672      	cpsid	i
 8008104:	e7fe      	b.n	8008104 <xTaskGenericNotify+0x104>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008106:	69bb      	ldr	r3, [r7, #24]
 8008108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800810a:	4b0a      	ldr	r3, [pc, #40]	; (8008134 <xTaskGenericNotify+0x134>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008110:	429a      	cmp	r2, r3
 8008112:	d901      	bls.n	8008118 <xTaskGenericNotify+0x118>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8008114:	f000 fcbc 	bl	8008a90 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008118:	f000 fcdc 	bl	8008ad4 <vPortExitCritical>

		return xReturn;
 800811c:	69fb      	ldr	r3, [r7, #28]
	}
 800811e:	0018      	movs	r0, r3
 8008120:	46bd      	mov	sp, r7
 8008122:	b008      	add	sp, #32
 8008124:	bd80      	pop	{r7, pc}
 8008126:	46c0      	nop			; (mov r8, r8)
 8008128:	0800a708 	.word	0x0800a708
 800812c:	200012f0 	.word	0x200012f0
 8008130:	20000e18 	.word	0x20000e18
 8008134:	20000e14 	.word	0x20000e14

08008138 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008138:	b580      	push	{r7, lr}
 800813a:	b088      	sub	sp, #32
 800813c:	af00      	add	r7, sp, #0
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	603b      	str	r3, [r7, #0]
 8008144:	1dfb      	adds	r3, r7, #7
 8008146:	701a      	strb	r2, [r3, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8008148:	2301      	movs	r3, #1
 800814a:	61fb      	str	r3, [r7, #28]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d101      	bne.n	8008156 <xTaskGenericNotifyFromISR+0x1e>
 8008152:	b672      	cpsid	i
 8008154:	e7fe      	b.n	8008154 <xTaskGenericNotifyFromISR+0x1c>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	61bb      	str	r3, [r7, #24]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800815a:	f000 fcd3 	bl	8008b04 <ulSetInterruptMaskFromISR>
 800815e:	0003      	movs	r3, r0
 8008160:	617b      	str	r3, [r7, #20]
		{
			if( pulPreviousNotificationValue != NULL )
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d004      	beq.n	8008172 <xTaskGenericNotifyFromISR+0x3a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008168:	69bb      	ldr	r3, [r7, #24]
 800816a:	22b4      	movs	r2, #180	; 0xb4
 800816c:	589a      	ldr	r2, [r3, r2]
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008172:	2313      	movs	r3, #19
 8008174:	18fb      	adds	r3, r7, r3
 8008176:	69ba      	ldr	r2, [r7, #24]
 8008178:	21b8      	movs	r1, #184	; 0xb8
 800817a:	5c52      	ldrb	r2, [r2, r1]
 800817c:	701a      	strb	r2, [r3, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	22b8      	movs	r2, #184	; 0xb8
 8008182:	2102      	movs	r1, #2
 8008184:	5499      	strb	r1, [r3, r2]

			switch( eAction )
 8008186:	1dfb      	adds	r3, r7, #7
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	2b04      	cmp	r3, #4
 800818c:	d827      	bhi.n	80081de <xTaskGenericNotifyFromISR+0xa6>
 800818e:	009a      	lsls	r2, r3, #2
 8008190:	4b3f      	ldr	r3, [pc, #252]	; (8008290 <xTaskGenericNotifyFromISR+0x158>)
 8008192:	18d3      	adds	r3, r2, r3
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	469f      	mov	pc, r3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008198:	69bb      	ldr	r3, [r7, #24]
 800819a:	22b4      	movs	r2, #180	; 0xb4
 800819c:	589a      	ldr	r2, [r3, r2]
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	431a      	orrs	r2, r3
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	21b4      	movs	r1, #180	; 0xb4
 80081a6:	505a      	str	r2, [r3, r1]
					break;
 80081a8:	e023      	b.n	80081f2 <xTaskGenericNotifyFromISR+0xba>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	22b4      	movs	r2, #180	; 0xb4
 80081ae:	589b      	ldr	r3, [r3, r2]
 80081b0:	1c5a      	adds	r2, r3, #1
 80081b2:	69bb      	ldr	r3, [r7, #24]
 80081b4:	21b4      	movs	r1, #180	; 0xb4
 80081b6:	505a      	str	r2, [r3, r1]
					break;
 80081b8:	e01b      	b.n	80081f2 <xTaskGenericNotifyFromISR+0xba>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	21b4      	movs	r1, #180	; 0xb4
 80081be:	68ba      	ldr	r2, [r7, #8]
 80081c0:	505a      	str	r2, [r3, r1]
					break;
 80081c2:	e016      	b.n	80081f2 <xTaskGenericNotifyFromISR+0xba>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80081c4:	2313      	movs	r3, #19
 80081c6:	18fb      	adds	r3, r7, r3
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	2b02      	cmp	r3, #2
 80081cc:	d004      	beq.n	80081d8 <xTaskGenericNotifyFromISR+0xa0>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	21b4      	movs	r1, #180	; 0xb4
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	505a      	str	r2, [r3, r1]
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80081d6:	e00c      	b.n	80081f2 <xTaskGenericNotifyFromISR+0xba>
						xReturn = pdFAIL;
 80081d8:	2300      	movs	r3, #0
 80081da:	61fb      	str	r3, [r7, #28]
					break;
 80081dc:	e009      	b.n	80081f2 <xTaskGenericNotifyFromISR+0xba>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80081de:	69bb      	ldr	r3, [r7, #24]
 80081e0:	22b4      	movs	r2, #180	; 0xb4
 80081e2:	589b      	ldr	r3, [r3, r2]
 80081e4:	3301      	adds	r3, #1
 80081e6:	d003      	beq.n	80081f0 <xTaskGenericNotifyFromISR+0xb8>
 80081e8:	b672      	cpsid	i
 80081ea:	e7fe      	b.n	80081ea <xTaskGenericNotifyFromISR+0xb2>
					break;
 80081ec:	46c0      	nop			; (mov r8, r8)
 80081ee:	e000      	b.n	80081f2 <xTaskGenericNotifyFromISR+0xba>
					break;
 80081f0:	46c0      	nop			; (mov r8, r8)

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80081f2:	2313      	movs	r3, #19
 80081f4:	18fb      	adds	r3, r7, r3
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d13f      	bne.n	800827c <xTaskGenericNotifyFromISR+0x144>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008200:	2b00      	cmp	r3, #0
 8008202:	d001      	beq.n	8008208 <xTaskGenericNotifyFromISR+0xd0>
 8008204:	b672      	cpsid	i
 8008206:	e7fe      	b.n	8008206 <xTaskGenericNotifyFromISR+0xce>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008208:	4b22      	ldr	r3, [pc, #136]	; (8008294 <xTaskGenericNotifyFromISR+0x15c>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d11d      	bne.n	800824c <xTaskGenericNotifyFromISR+0x114>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	3304      	adds	r3, #4
 8008214:	0018      	movs	r0, r3
 8008216:	f7fe fbf0 	bl	80069fa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800821e:	4b1e      	ldr	r3, [pc, #120]	; (8008298 <xTaskGenericNotifyFromISR+0x160>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	429a      	cmp	r2, r3
 8008224:	d903      	bls.n	800822e <xTaskGenericNotifyFromISR+0xf6>
 8008226:	69bb      	ldr	r3, [r7, #24]
 8008228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800822a:	4b1b      	ldr	r3, [pc, #108]	; (8008298 <xTaskGenericNotifyFromISR+0x160>)
 800822c:	601a      	str	r2, [r3, #0]
 800822e:	69bb      	ldr	r3, [r7, #24]
 8008230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008232:	0013      	movs	r3, r2
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	189b      	adds	r3, r3, r2
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	4a18      	ldr	r2, [pc, #96]	; (800829c <xTaskGenericNotifyFromISR+0x164>)
 800823c:	189a      	adds	r2, r3, r2
 800823e:	69bb      	ldr	r3, [r7, #24]
 8008240:	3304      	adds	r3, #4
 8008242:	0019      	movs	r1, r3
 8008244:	0010      	movs	r0, r2
 8008246:	f7fe fb80 	bl	800694a <vListInsertEnd>
 800824a:	e007      	b.n	800825c <xTaskGenericNotifyFromISR+0x124>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800824c:	69bb      	ldr	r3, [r7, #24]
 800824e:	3318      	adds	r3, #24
 8008250:	001a      	movs	r2, r3
 8008252:	4b13      	ldr	r3, [pc, #76]	; (80082a0 <xTaskGenericNotifyFromISR+0x168>)
 8008254:	0011      	movs	r1, r2
 8008256:	0018      	movs	r0, r3
 8008258:	f7fe fb77 	bl	800694a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800825c:	69bb      	ldr	r3, [r7, #24]
 800825e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008260:	4b10      	ldr	r3, [pc, #64]	; (80082a4 <xTaskGenericNotifyFromISR+0x16c>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008266:	429a      	cmp	r2, r3
 8008268:	d908      	bls.n	800827c <xTaskGenericNotifyFromISR+0x144>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800826a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800826c:	2b00      	cmp	r3, #0
 800826e:	d002      	beq.n	8008276 <xTaskGenericNotifyFromISR+0x13e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8008270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008272:	2201      	movs	r2, #1
 8008274:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8008276:	4b0c      	ldr	r3, [pc, #48]	; (80082a8 <xTaskGenericNotifyFromISR+0x170>)
 8008278:	2201      	movs	r2, #1
 800827a:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	0018      	movs	r0, r3
 8008280:	f000 fc46 	bl	8008b10 <vClearInterruptMaskFromISR>

		return xReturn;
 8008284:	69fb      	ldr	r3, [r7, #28]
	}
 8008286:	0018      	movs	r0, r3
 8008288:	46bd      	mov	sp, r7
 800828a:	b008      	add	sp, #32
 800828c:	bd80      	pop	{r7, pc}
 800828e:	46c0      	nop			; (mov r8, r8)
 8008290:	0800a71c 	.word	0x0800a71c
 8008294:	20001310 	.word	0x20001310
 8008298:	200012f0 	.word	0x200012f0
 800829c:	20000e18 	.word	0x20000e18
 80082a0:	200012a8 	.word	0x200012a8
 80082a4:	20000e14 	.word	0x20000e14
 80082a8:	200012fc 	.word	0x200012fc

080082ac <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80082b6:	4b21      	ldr	r3, [pc, #132]	; (800833c <prvAddCurrentTaskToDelayedList+0x90>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082bc:	4b20      	ldr	r3, [pc, #128]	; (8008340 <prvAddCurrentTaskToDelayedList+0x94>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	3304      	adds	r3, #4
 80082c2:	0018      	movs	r0, r3
 80082c4:	f7fe fb99 	bl	80069fa <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	3301      	adds	r3, #1
 80082cc:	d10b      	bne.n	80082e6 <prvAddCurrentTaskToDelayedList+0x3a>
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d008      	beq.n	80082e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082d4:	4b1a      	ldr	r3, [pc, #104]	; (8008340 <prvAddCurrentTaskToDelayedList+0x94>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	1d1a      	adds	r2, r3, #4
 80082da:	4b1a      	ldr	r3, [pc, #104]	; (8008344 <prvAddCurrentTaskToDelayedList+0x98>)
 80082dc:	0011      	movs	r1, r2
 80082de:	0018      	movs	r0, r3
 80082e0:	f7fe fb33 	bl	800694a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80082e4:	e026      	b.n	8008334 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80082e6:	68fa      	ldr	r2, [r7, #12]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	18d3      	adds	r3, r2, r3
 80082ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80082ee:	4b14      	ldr	r3, [pc, #80]	; (8008340 <prvAddCurrentTaskToDelayedList+0x94>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	68ba      	ldr	r2, [r7, #8]
 80082f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80082f6:	68ba      	ldr	r2, [r7, #8]
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d209      	bcs.n	8008312 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082fe:	4b12      	ldr	r3, [pc, #72]	; (8008348 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	4b0f      	ldr	r3, [pc, #60]	; (8008340 <prvAddCurrentTaskToDelayedList+0x94>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	3304      	adds	r3, #4
 8008308:	0019      	movs	r1, r3
 800830a:	0010      	movs	r0, r2
 800830c:	f7fe fb3f 	bl	800698e <vListInsert>
}
 8008310:	e010      	b.n	8008334 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008312:	4b0e      	ldr	r3, [pc, #56]	; (800834c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	4b0a      	ldr	r3, [pc, #40]	; (8008340 <prvAddCurrentTaskToDelayedList+0x94>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	3304      	adds	r3, #4
 800831c:	0019      	movs	r1, r3
 800831e:	0010      	movs	r0, r2
 8008320:	f7fe fb35 	bl	800698e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008324:	4b0a      	ldr	r3, [pc, #40]	; (8008350 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	68ba      	ldr	r2, [r7, #8]
 800832a:	429a      	cmp	r2, r3
 800832c:	d202      	bcs.n	8008334 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800832e:	4b08      	ldr	r3, [pc, #32]	; (8008350 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008330:	68ba      	ldr	r2, [r7, #8]
 8008332:	601a      	str	r2, [r3, #0]
}
 8008334:	46c0      	nop			; (mov r8, r8)
 8008336:	46bd      	mov	sp, r7
 8008338:	b004      	add	sp, #16
 800833a:	bd80      	pop	{r7, pc}
 800833c:	200012ec 	.word	0x200012ec
 8008340:	20000e14 	.word	0x20000e14
 8008344:	200012d4 	.word	0x200012d4
 8008348:	200012a4 	.word	0x200012a4
 800834c:	200012a0 	.word	0x200012a0
 8008350:	20001308 	.word	0x20001308

08008354 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008354:	b590      	push	{r4, r7, lr}
 8008356:	b089      	sub	sp, #36	; 0x24
 8008358:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800835a:	2300      	movs	r3, #0
 800835c:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800835e:	f000 fac9 	bl	80088f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008362:	4b17      	ldr	r3, [pc, #92]	; (80083c0 <xTimerCreateTimerTask+0x6c>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d020      	beq.n	80083ac <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800836a:	2300      	movs	r3, #0
 800836c:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800836e:	2300      	movs	r3, #0
 8008370:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008372:	003a      	movs	r2, r7
 8008374:	1d39      	adds	r1, r7, #4
 8008376:	2308      	movs	r3, #8
 8008378:	18fb      	adds	r3, r7, r3
 800837a:	0018      	movs	r0, r3
 800837c:	f7fe faa4 	bl	80068c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008380:	683c      	ldr	r4, [r7, #0]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	68ba      	ldr	r2, [r7, #8]
 8008386:	490f      	ldr	r1, [pc, #60]	; (80083c4 <xTimerCreateTimerTask+0x70>)
 8008388:	480f      	ldr	r0, [pc, #60]	; (80083c8 <xTimerCreateTimerTask+0x74>)
 800838a:	9202      	str	r2, [sp, #8]
 800838c:	9301      	str	r3, [sp, #4]
 800838e:	2302      	movs	r3, #2
 8008390:	9300      	str	r3, [sp, #0]
 8008392:	2300      	movs	r3, #0
 8008394:	0022      	movs	r2, r4
 8008396:	f7fe ffba 	bl	800730e <xTaskCreateStatic>
 800839a:	0002      	movs	r2, r0
 800839c:	4b0b      	ldr	r3, [pc, #44]	; (80083cc <xTimerCreateTimerTask+0x78>)
 800839e:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80083a0:	4b0a      	ldr	r3, [pc, #40]	; (80083cc <xTimerCreateTimerTask+0x78>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d001      	beq.n	80083ac <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 80083a8:	2301      	movs	r3, #1
 80083aa:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d101      	bne.n	80083b6 <xTimerCreateTimerTask+0x62>
 80083b2:	b672      	cpsid	i
 80083b4:	e7fe      	b.n	80083b4 <xTimerCreateTimerTask+0x60>
	return xReturn;
 80083b6:	68fb      	ldr	r3, [r7, #12]
}
 80083b8:	0018      	movs	r0, r3
 80083ba:	46bd      	mov	sp, r7
 80083bc:	b005      	add	sp, #20
 80083be:	bd90      	pop	{r4, r7, pc}
 80083c0:	20001344 	.word	0x20001344
 80083c4:	08009dbc 	.word	0x08009dbc
 80083c8:	080084ed 	.word	0x080084ed
 80083cc:	20001348 	.word	0x20001348

080083d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80083d0:	b590      	push	{r4, r7, lr}
 80083d2:	b08b      	sub	sp, #44	; 0x2c
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	60f8      	str	r0, [r7, #12]
 80083d8:	60b9      	str	r1, [r7, #8]
 80083da:	607a      	str	r2, [r7, #4]
 80083dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80083de:	2300      	movs	r3, #0
 80083e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d101      	bne.n	80083ec <xTimerGenericCommand+0x1c>
 80083e8:	b672      	cpsid	i
 80083ea:	e7fe      	b.n	80083ea <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80083ec:	4b1c      	ldr	r3, [pc, #112]	; (8008460 <xTimerGenericCommand+0x90>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d030      	beq.n	8008456 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80083f4:	2414      	movs	r4, #20
 80083f6:	193b      	adds	r3, r7, r4
 80083f8:	68ba      	ldr	r2, [r7, #8]
 80083fa:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80083fc:	193b      	adds	r3, r7, r4
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008402:	193b      	adds	r3, r7, r4
 8008404:	68fa      	ldr	r2, [r7, #12]
 8008406:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	2b05      	cmp	r3, #5
 800840c:	dc19      	bgt.n	8008442 <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800840e:	f7ff fd27 	bl	8007e60 <xTaskGetSchedulerState>
 8008412:	0003      	movs	r3, r0
 8008414:	2b02      	cmp	r3, #2
 8008416:	d109      	bne.n	800842c <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008418:	4b11      	ldr	r3, [pc, #68]	; (8008460 <xTimerGenericCommand+0x90>)
 800841a:	6818      	ldr	r0, [r3, #0]
 800841c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800841e:	1939      	adds	r1, r7, r4
 8008420:	2300      	movs	r3, #0
 8008422:	f7fe fc11 	bl	8006c48 <xQueueGenericSend>
 8008426:	0003      	movs	r3, r0
 8008428:	627b      	str	r3, [r7, #36]	; 0x24
 800842a:	e014      	b.n	8008456 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800842c:	4b0c      	ldr	r3, [pc, #48]	; (8008460 <xTimerGenericCommand+0x90>)
 800842e:	6818      	ldr	r0, [r3, #0]
 8008430:	2314      	movs	r3, #20
 8008432:	18f9      	adds	r1, r7, r3
 8008434:	2300      	movs	r3, #0
 8008436:	2200      	movs	r2, #0
 8008438:	f7fe fc06 	bl	8006c48 <xQueueGenericSend>
 800843c:	0003      	movs	r3, r0
 800843e:	627b      	str	r3, [r7, #36]	; 0x24
 8008440:	e009      	b.n	8008456 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008442:	4b07      	ldr	r3, [pc, #28]	; (8008460 <xTimerGenericCommand+0x90>)
 8008444:	6818      	ldr	r0, [r3, #0]
 8008446:	683a      	ldr	r2, [r7, #0]
 8008448:	2314      	movs	r3, #20
 800844a:	18f9      	adds	r1, r7, r3
 800844c:	2300      	movs	r3, #0
 800844e:	f7fe fcbf 	bl	8006dd0 <xQueueGenericSendFromISR>
 8008452:	0003      	movs	r3, r0
 8008454:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008458:	0018      	movs	r0, r3
 800845a:	46bd      	mov	sp, r7
 800845c:	b00b      	add	sp, #44	; 0x2c
 800845e:	bd90      	pop	{r4, r7, pc}
 8008460:	20001344 	.word	0x20001344

08008464 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b086      	sub	sp, #24
 8008468:	af02      	add	r7, sp, #8
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800846e:	4b1e      	ldr	r3, [pc, #120]	; (80084e8 <prvProcessExpiredTimer+0x84>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	68db      	ldr	r3, [r3, #12]
 8008476:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	3304      	adds	r3, #4
 800847c:	0018      	movs	r0, r3
 800847e:	f7fe fabc 	bl	80069fa <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2228      	movs	r2, #40	; 0x28
 8008486:	5c9b      	ldrb	r3, [r3, r2]
 8008488:	001a      	movs	r2, r3
 800848a:	2304      	movs	r3, #4
 800848c:	4013      	ands	r3, r2
 800848e:	d019      	beq.n	80084c4 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	699a      	ldr	r2, [r3, #24]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	18d1      	adds	r1, r2, r3
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	683a      	ldr	r2, [r7, #0]
 800849c:	68f8      	ldr	r0, [r7, #12]
 800849e:	f000 f8c3 	bl	8008628 <prvInsertTimerInActiveList>
 80084a2:	1e03      	subs	r3, r0, #0
 80084a4:	d017      	beq.n	80084d6 <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	2300      	movs	r3, #0
 80084ac:	9300      	str	r3, [sp, #0]
 80084ae:	2300      	movs	r3, #0
 80084b0:	2100      	movs	r1, #0
 80084b2:	f7ff ff8d 	bl	80083d0 <xTimerGenericCommand>
 80084b6:	0003      	movs	r3, r0
 80084b8:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d10a      	bne.n	80084d6 <prvProcessExpiredTimer+0x72>
 80084c0:	b672      	cpsid	i
 80084c2:	e7fe      	b.n	80084c2 <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2228      	movs	r2, #40	; 0x28
 80084c8:	5c9b      	ldrb	r3, [r3, r2]
 80084ca:	2201      	movs	r2, #1
 80084cc:	4393      	bics	r3, r2
 80084ce:	b2d9      	uxtb	r1, r3
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2228      	movs	r2, #40	; 0x28
 80084d4:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	6a1b      	ldr	r3, [r3, #32]
 80084da:	68fa      	ldr	r2, [r7, #12]
 80084dc:	0010      	movs	r0, r2
 80084de:	4798      	blx	r3
}
 80084e0:	46c0      	nop			; (mov r8, r8)
 80084e2:	46bd      	mov	sp, r7
 80084e4:	b004      	add	sp, #16
 80084e6:	bd80      	pop	{r7, pc}
 80084e8:	2000133c 	.word	0x2000133c

080084ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084f4:	2308      	movs	r3, #8
 80084f6:	18fb      	adds	r3, r7, r3
 80084f8:	0018      	movs	r0, r3
 80084fa:	f000 f853 	bl	80085a4 <prvGetNextExpireTime>
 80084fe:	0003      	movs	r3, r0
 8008500:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008502:	68ba      	ldr	r2, [r7, #8]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	0011      	movs	r1, r2
 8008508:	0018      	movs	r0, r3
 800850a:	f000 f803 	bl	8008514 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800850e:	f000 f8cd 	bl	80086ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008512:	e7ef      	b.n	80084f4 <prvTimerTask+0x8>

08008514 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b084      	sub	sp, #16
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800851e:	f7ff f913 	bl	8007748 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008522:	2308      	movs	r3, #8
 8008524:	18fb      	adds	r3, r7, r3
 8008526:	0018      	movs	r0, r3
 8008528:	f000 f85e 	bl	80085e8 <prvSampleTimeNow>
 800852c:	0003      	movs	r3, r0
 800852e:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d12b      	bne.n	800858e <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d10c      	bne.n	8008556 <prvProcessTimerOrBlockTask+0x42>
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	429a      	cmp	r2, r3
 8008542:	d808      	bhi.n	8008556 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8008544:	f7ff f90c 	bl	8007760 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	0011      	movs	r1, r2
 800854e:	0018      	movs	r0, r3
 8008550:	f7ff ff88 	bl	8008464 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008554:	e01d      	b.n	8008592 <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d008      	beq.n	800856e <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800855c:	4b0f      	ldr	r3, [pc, #60]	; (800859c <prvProcessTimerOrBlockTask+0x88>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d101      	bne.n	800856a <prvProcessTimerOrBlockTask+0x56>
 8008566:	2301      	movs	r3, #1
 8008568:	e000      	b.n	800856c <prvProcessTimerOrBlockTask+0x58>
 800856a:	2300      	movs	r3, #0
 800856c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800856e:	4b0c      	ldr	r3, [pc, #48]	; (80085a0 <prvProcessTimerOrBlockTask+0x8c>)
 8008570:	6818      	ldr	r0, [r3, #0]
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	1ad3      	subs	r3, r2, r3
 8008578:	683a      	ldr	r2, [r7, #0]
 800857a:	0019      	movs	r1, r3
 800857c:	f7fe fe94 	bl	80072a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008580:	f7ff f8ee 	bl	8007760 <xTaskResumeAll>
 8008584:	1e03      	subs	r3, r0, #0
 8008586:	d104      	bne.n	8008592 <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 8008588:	f000 fa82 	bl	8008a90 <vPortYield>
}
 800858c:	e001      	b.n	8008592 <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 800858e:	f7ff f8e7 	bl	8007760 <xTaskResumeAll>
}
 8008592:	46c0      	nop			; (mov r8, r8)
 8008594:	46bd      	mov	sp, r7
 8008596:	b004      	add	sp, #16
 8008598:	bd80      	pop	{r7, pc}
 800859a:	46c0      	nop			; (mov r8, r8)
 800859c:	20001340 	.word	0x20001340
 80085a0:	20001344 	.word	0x20001344

080085a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b084      	sub	sp, #16
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80085ac:	4b0d      	ldr	r3, [pc, #52]	; (80085e4 <prvGetNextExpireTime+0x40>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d101      	bne.n	80085ba <prvGetNextExpireTime+0x16>
 80085b6:	2201      	movs	r2, #1
 80085b8:	e000      	b.n	80085bc <prvGetNextExpireTime+0x18>
 80085ba:	2200      	movs	r2, #0
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d105      	bne.n	80085d4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80085c8:	4b06      	ldr	r3, [pc, #24]	; (80085e4 <prvGetNextExpireTime+0x40>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	60fb      	str	r3, [r7, #12]
 80085d2:	e001      	b.n	80085d8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80085d4:	2300      	movs	r3, #0
 80085d6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80085d8:	68fb      	ldr	r3, [r7, #12]
}
 80085da:	0018      	movs	r0, r3
 80085dc:	46bd      	mov	sp, r7
 80085de:	b004      	add	sp, #16
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	46c0      	nop			; (mov r8, r8)
 80085e4:	2000133c 	.word	0x2000133c

080085e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80085f0:	f7ff f942 	bl	8007878 <xTaskGetTickCount>
 80085f4:	0003      	movs	r3, r0
 80085f6:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 80085f8:	4b0a      	ldr	r3, [pc, #40]	; (8008624 <prvSampleTimeNow+0x3c>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	68fa      	ldr	r2, [r7, #12]
 80085fe:	429a      	cmp	r2, r3
 8008600:	d205      	bcs.n	800860e <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8008602:	f000 f919 	bl	8008838 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2201      	movs	r2, #1
 800860a:	601a      	str	r2, [r3, #0]
 800860c:	e002      	b.n	8008614 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008614:	4b03      	ldr	r3, [pc, #12]	; (8008624 <prvSampleTimeNow+0x3c>)
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 800861a:	68fb      	ldr	r3, [r7, #12]
}
 800861c:	0018      	movs	r0, r3
 800861e:	46bd      	mov	sp, r7
 8008620:	b004      	add	sp, #16
 8008622:	bd80      	pop	{r7, pc}
 8008624:	2000134c 	.word	0x2000134c

08008628 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b086      	sub	sp, #24
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	607a      	str	r2, [r7, #4]
 8008634:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008636:	2300      	movs	r3, #0
 8008638:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	68ba      	ldr	r2, [r7, #8]
 800863e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	68fa      	ldr	r2, [r7, #12]
 8008644:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008646:	68ba      	ldr	r2, [r7, #8]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	429a      	cmp	r2, r3
 800864c:	d812      	bhi.n	8008674 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800864e:	687a      	ldr	r2, [r7, #4]
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	1ad2      	subs	r2, r2, r3
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	699b      	ldr	r3, [r3, #24]
 8008658:	429a      	cmp	r2, r3
 800865a:	d302      	bcc.n	8008662 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800865c:	2301      	movs	r3, #1
 800865e:	617b      	str	r3, [r7, #20]
 8008660:	e01b      	b.n	800869a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008662:	4b10      	ldr	r3, [pc, #64]	; (80086a4 <prvInsertTimerInActiveList+0x7c>)
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	3304      	adds	r3, #4
 800866a:	0019      	movs	r1, r3
 800866c:	0010      	movs	r0, r2
 800866e:	f7fe f98e 	bl	800698e <vListInsert>
 8008672:	e012      	b.n	800869a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	429a      	cmp	r2, r3
 800867a:	d206      	bcs.n	800868a <prvInsertTimerInActiveList+0x62>
 800867c:	68ba      	ldr	r2, [r7, #8]
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	429a      	cmp	r2, r3
 8008682:	d302      	bcc.n	800868a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008684:	2301      	movs	r3, #1
 8008686:	617b      	str	r3, [r7, #20]
 8008688:	e007      	b.n	800869a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800868a:	4b07      	ldr	r3, [pc, #28]	; (80086a8 <prvInsertTimerInActiveList+0x80>)
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	3304      	adds	r3, #4
 8008692:	0019      	movs	r1, r3
 8008694:	0010      	movs	r0, r2
 8008696:	f7fe f97a 	bl	800698e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800869a:	697b      	ldr	r3, [r7, #20]
}
 800869c:	0018      	movs	r0, r3
 800869e:	46bd      	mov	sp, r7
 80086a0:	b006      	add	sp, #24
 80086a2:	bd80      	pop	{r7, pc}
 80086a4:	20001340 	.word	0x20001340
 80086a8:	2000133c 	.word	0x2000133c

080086ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80086ac:	b590      	push	{r4, r7, lr}
 80086ae:	b08d      	sub	sp, #52	; 0x34
 80086b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80086b2:	e0ac      	b.n	800880e <prvProcessReceivedCommands+0x162>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80086b4:	2208      	movs	r2, #8
 80086b6:	18bb      	adds	r3, r7, r2
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	da0f      	bge.n	80086de <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80086be:	18bb      	adds	r3, r7, r2
 80086c0:	3304      	adds	r3, #4
 80086c2:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80086c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d101      	bne.n	80086ce <prvProcessReceivedCommands+0x22>
 80086ca:	b672      	cpsid	i
 80086cc:	e7fe      	b.n	80086cc <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80086ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d4:	6858      	ldr	r0, [r3, #4]
 80086d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	0019      	movs	r1, r3
 80086dc:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80086de:	2208      	movs	r2, #8
 80086e0:	18bb      	adds	r3, r7, r2
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	da00      	bge.n	80086ea <prvProcessReceivedCommands+0x3e>
 80086e8:	e090      	b.n	800880c <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80086ea:	18bb      	adds	r3, r7, r2
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80086f0:	6a3b      	ldr	r3, [r7, #32]
 80086f2:	695b      	ldr	r3, [r3, #20]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d004      	beq.n	8008702 <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086f8:	6a3b      	ldr	r3, [r7, #32]
 80086fa:	3304      	adds	r3, #4
 80086fc:	0018      	movs	r0, r3
 80086fe:	f7fe f97c 	bl	80069fa <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008702:	1d3b      	adds	r3, r7, #4
 8008704:	0018      	movs	r0, r3
 8008706:	f7ff ff6f 	bl	80085e8 <prvSampleTimeNow>
 800870a:	0003      	movs	r3, r0
 800870c:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 800870e:	2308      	movs	r3, #8
 8008710:	18fb      	adds	r3, r7, r3
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	2b09      	cmp	r3, #9
 8008716:	d900      	bls.n	800871a <prvProcessReceivedCommands+0x6e>
 8008718:	e079      	b.n	800880e <prvProcessReceivedCommands+0x162>
 800871a:	009a      	lsls	r2, r3, #2
 800871c:	4b44      	ldr	r3, [pc, #272]	; (8008830 <prvProcessReceivedCommands+0x184>)
 800871e:	18d3      	adds	r3, r2, r3
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008724:	6a3b      	ldr	r3, [r7, #32]
 8008726:	2228      	movs	r2, #40	; 0x28
 8008728:	5c9b      	ldrb	r3, [r3, r2]
 800872a:	2201      	movs	r2, #1
 800872c:	4313      	orrs	r3, r2
 800872e:	b2d9      	uxtb	r1, r3
 8008730:	6a3b      	ldr	r3, [r7, #32]
 8008732:	2228      	movs	r2, #40	; 0x28
 8008734:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008736:	2408      	movs	r4, #8
 8008738:	193b      	adds	r3, r7, r4
 800873a:	685a      	ldr	r2, [r3, #4]
 800873c:	6a3b      	ldr	r3, [r7, #32]
 800873e:	699b      	ldr	r3, [r3, #24]
 8008740:	18d1      	adds	r1, r2, r3
 8008742:	193b      	adds	r3, r7, r4
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	69fa      	ldr	r2, [r7, #28]
 8008748:	6a38      	ldr	r0, [r7, #32]
 800874a:	f7ff ff6d 	bl	8008628 <prvInsertTimerInActiveList>
 800874e:	1e03      	subs	r3, r0, #0
 8008750:	d05d      	beq.n	800880e <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008752:	6a3b      	ldr	r3, [r7, #32]
 8008754:	6a1b      	ldr	r3, [r3, #32]
 8008756:	6a3a      	ldr	r2, [r7, #32]
 8008758:	0010      	movs	r0, r2
 800875a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800875c:	6a3b      	ldr	r3, [r7, #32]
 800875e:	2228      	movs	r2, #40	; 0x28
 8008760:	5c9b      	ldrb	r3, [r3, r2]
 8008762:	001a      	movs	r2, r3
 8008764:	2304      	movs	r3, #4
 8008766:	4013      	ands	r3, r2
 8008768:	d051      	beq.n	800880e <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800876a:	193b      	adds	r3, r7, r4
 800876c:	685a      	ldr	r2, [r3, #4]
 800876e:	6a3b      	ldr	r3, [r7, #32]
 8008770:	699b      	ldr	r3, [r3, #24]
 8008772:	18d2      	adds	r2, r2, r3
 8008774:	6a38      	ldr	r0, [r7, #32]
 8008776:	2300      	movs	r3, #0
 8008778:	9300      	str	r3, [sp, #0]
 800877a:	2300      	movs	r3, #0
 800877c:	2100      	movs	r1, #0
 800877e:	f7ff fe27 	bl	80083d0 <xTimerGenericCommand>
 8008782:	0003      	movs	r3, r0
 8008784:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8008786:	69bb      	ldr	r3, [r7, #24]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d140      	bne.n	800880e <prvProcessReceivedCommands+0x162>
 800878c:	b672      	cpsid	i
 800878e:	e7fe      	b.n	800878e <prvProcessReceivedCommands+0xe2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008790:	6a3b      	ldr	r3, [r7, #32]
 8008792:	2228      	movs	r2, #40	; 0x28
 8008794:	5c9b      	ldrb	r3, [r3, r2]
 8008796:	2201      	movs	r2, #1
 8008798:	4393      	bics	r3, r2
 800879a:	b2d9      	uxtb	r1, r3
 800879c:	6a3b      	ldr	r3, [r7, #32]
 800879e:	2228      	movs	r2, #40	; 0x28
 80087a0:	5499      	strb	r1, [r3, r2]
					break;
 80087a2:	e034      	b.n	800880e <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80087a4:	6a3b      	ldr	r3, [r7, #32]
 80087a6:	2228      	movs	r2, #40	; 0x28
 80087a8:	5c9b      	ldrb	r3, [r3, r2]
 80087aa:	2201      	movs	r2, #1
 80087ac:	4313      	orrs	r3, r2
 80087ae:	b2d9      	uxtb	r1, r3
 80087b0:	6a3b      	ldr	r3, [r7, #32]
 80087b2:	2228      	movs	r2, #40	; 0x28
 80087b4:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80087b6:	2308      	movs	r3, #8
 80087b8:	18fb      	adds	r3, r7, r3
 80087ba:	685a      	ldr	r2, [r3, #4]
 80087bc:	6a3b      	ldr	r3, [r7, #32]
 80087be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80087c0:	6a3b      	ldr	r3, [r7, #32]
 80087c2:	699b      	ldr	r3, [r3, #24]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d101      	bne.n	80087cc <prvProcessReceivedCommands+0x120>
 80087c8:	b672      	cpsid	i
 80087ca:	e7fe      	b.n	80087ca <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80087cc:	6a3b      	ldr	r3, [r7, #32]
 80087ce:	699a      	ldr	r2, [r3, #24]
 80087d0:	69fb      	ldr	r3, [r7, #28]
 80087d2:	18d1      	adds	r1, r2, r3
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	69fa      	ldr	r2, [r7, #28]
 80087d8:	6a38      	ldr	r0, [r7, #32]
 80087da:	f7ff ff25 	bl	8008628 <prvInsertTimerInActiveList>
					break;
 80087de:	e016      	b.n	800880e <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80087e0:	6a3b      	ldr	r3, [r7, #32]
 80087e2:	2228      	movs	r2, #40	; 0x28
 80087e4:	5c9b      	ldrb	r3, [r3, r2]
 80087e6:	001a      	movs	r2, r3
 80087e8:	2302      	movs	r3, #2
 80087ea:	4013      	ands	r3, r2
 80087ec:	d104      	bne.n	80087f8 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 80087ee:	6a3b      	ldr	r3, [r7, #32]
 80087f0:	0018      	movs	r0, r3
 80087f2:	f000 fa9b 	bl	8008d2c <vPortFree>
 80087f6:	e00a      	b.n	800880e <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80087f8:	6a3b      	ldr	r3, [r7, #32]
 80087fa:	2228      	movs	r2, #40	; 0x28
 80087fc:	5c9b      	ldrb	r3, [r3, r2]
 80087fe:	2201      	movs	r2, #1
 8008800:	4393      	bics	r3, r2
 8008802:	b2d9      	uxtb	r1, r3
 8008804:	6a3b      	ldr	r3, [r7, #32]
 8008806:	2228      	movs	r2, #40	; 0x28
 8008808:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800880a:	e000      	b.n	800880e <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800880c:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800880e:	4b09      	ldr	r3, [pc, #36]	; (8008834 <prvProcessReceivedCommands+0x188>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	2208      	movs	r2, #8
 8008814:	18b9      	adds	r1, r7, r2
 8008816:	2200      	movs	r2, #0
 8008818:	0018      	movs	r0, r3
 800881a:	f7fe fb4a 	bl	8006eb2 <xQueueReceive>
 800881e:	1e03      	subs	r3, r0, #0
 8008820:	d000      	beq.n	8008824 <prvProcessReceivedCommands+0x178>
 8008822:	e747      	b.n	80086b4 <prvProcessReceivedCommands+0x8>
	}
}
 8008824:	46c0      	nop			; (mov r8, r8)
 8008826:	46c0      	nop			; (mov r8, r8)
 8008828:	46bd      	mov	sp, r7
 800882a:	b00b      	add	sp, #44	; 0x2c
 800882c:	bd90      	pop	{r4, r7, pc}
 800882e:	46c0      	nop			; (mov r8, r8)
 8008830:	0800a730 	.word	0x0800a730
 8008834:	20001344 	.word	0x20001344

08008838 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b088      	sub	sp, #32
 800883c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800883e:	e041      	b.n	80088c4 <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008840:	4b2a      	ldr	r3, [pc, #168]	; (80088ec <prvSwitchTimerLists+0xb4>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	68db      	ldr	r3, [r3, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800884a:	4b28      	ldr	r3, [pc, #160]	; (80088ec <prvSwitchTimerLists+0xb4>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	68db      	ldr	r3, [r3, #12]
 8008852:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	3304      	adds	r3, #4
 8008858:	0018      	movs	r0, r3
 800885a:	f7fe f8ce 	bl	80069fa <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	6a1b      	ldr	r3, [r3, #32]
 8008862:	68fa      	ldr	r2, [r7, #12]
 8008864:	0010      	movs	r0, r2
 8008866:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2228      	movs	r2, #40	; 0x28
 800886c:	5c9b      	ldrb	r3, [r3, r2]
 800886e:	001a      	movs	r2, r3
 8008870:	2304      	movs	r3, #4
 8008872:	4013      	ands	r3, r2
 8008874:	d026      	beq.n	80088c4 <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	699b      	ldr	r3, [r3, #24]
 800887a:	693a      	ldr	r2, [r7, #16]
 800887c:	18d3      	adds	r3, r2, r3
 800887e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008880:	68ba      	ldr	r2, [r7, #8]
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	429a      	cmp	r2, r3
 8008886:	d90e      	bls.n	80088a6 <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	68ba      	ldr	r2, [r7, #8]
 800888c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	68fa      	ldr	r2, [r7, #12]
 8008892:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008894:	4b15      	ldr	r3, [pc, #84]	; (80088ec <prvSwitchTimerLists+0xb4>)
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	3304      	adds	r3, #4
 800889c:	0019      	movs	r1, r3
 800889e:	0010      	movs	r0, r2
 80088a0:	f7fe f875 	bl	800698e <vListInsert>
 80088a4:	e00e      	b.n	80088c4 <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80088a6:	693a      	ldr	r2, [r7, #16]
 80088a8:	68f8      	ldr	r0, [r7, #12]
 80088aa:	2300      	movs	r3, #0
 80088ac:	9300      	str	r3, [sp, #0]
 80088ae:	2300      	movs	r3, #0
 80088b0:	2100      	movs	r1, #0
 80088b2:	f7ff fd8d 	bl	80083d0 <xTimerGenericCommand>
 80088b6:	0003      	movs	r3, r0
 80088b8:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d101      	bne.n	80088c4 <prvSwitchTimerLists+0x8c>
 80088c0:	b672      	cpsid	i
 80088c2:	e7fe      	b.n	80088c2 <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80088c4:	4b09      	ldr	r3, [pc, #36]	; (80088ec <prvSwitchTimerLists+0xb4>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d1b8      	bne.n	8008840 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80088ce:	4b07      	ldr	r3, [pc, #28]	; (80088ec <prvSwitchTimerLists+0xb4>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80088d4:	4b06      	ldr	r3, [pc, #24]	; (80088f0 <prvSwitchTimerLists+0xb8>)
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	4b04      	ldr	r3, [pc, #16]	; (80088ec <prvSwitchTimerLists+0xb4>)
 80088da:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 80088dc:	4b04      	ldr	r3, [pc, #16]	; (80088f0 <prvSwitchTimerLists+0xb8>)
 80088de:	697a      	ldr	r2, [r7, #20]
 80088e0:	601a      	str	r2, [r3, #0]
}
 80088e2:	46c0      	nop			; (mov r8, r8)
 80088e4:	46bd      	mov	sp, r7
 80088e6:	b006      	add	sp, #24
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	46c0      	nop			; (mov r8, r8)
 80088ec:	2000133c 	.word	0x2000133c
 80088f0:	20001340 	.word	0x20001340

080088f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80088fa:	f000 f8d9 	bl	8008ab0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80088fe:	4b16      	ldr	r3, [pc, #88]	; (8008958 <prvCheckForValidListAndQueue+0x64>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d123      	bne.n	800894e <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8008906:	4b15      	ldr	r3, [pc, #84]	; (800895c <prvCheckForValidListAndQueue+0x68>)
 8008908:	0018      	movs	r0, r3
 800890a:	f7fd fff5 	bl	80068f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800890e:	4b14      	ldr	r3, [pc, #80]	; (8008960 <prvCheckForValidListAndQueue+0x6c>)
 8008910:	0018      	movs	r0, r3
 8008912:	f7fd fff1 	bl	80068f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008916:	4b13      	ldr	r3, [pc, #76]	; (8008964 <prvCheckForValidListAndQueue+0x70>)
 8008918:	4a10      	ldr	r2, [pc, #64]	; (800895c <prvCheckForValidListAndQueue+0x68>)
 800891a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800891c:	4b12      	ldr	r3, [pc, #72]	; (8008968 <prvCheckForValidListAndQueue+0x74>)
 800891e:	4a10      	ldr	r2, [pc, #64]	; (8008960 <prvCheckForValidListAndQueue+0x6c>)
 8008920:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008922:	4b12      	ldr	r3, [pc, #72]	; (800896c <prvCheckForValidListAndQueue+0x78>)
 8008924:	4a12      	ldr	r2, [pc, #72]	; (8008970 <prvCheckForValidListAndQueue+0x7c>)
 8008926:	2100      	movs	r1, #0
 8008928:	9100      	str	r1, [sp, #0]
 800892a:	2110      	movs	r1, #16
 800892c:	200a      	movs	r0, #10
 800892e:	f7fe f8e0 	bl	8006af2 <xQueueGenericCreateStatic>
 8008932:	0002      	movs	r2, r0
 8008934:	4b08      	ldr	r3, [pc, #32]	; (8008958 <prvCheckForValidListAndQueue+0x64>)
 8008936:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008938:	4b07      	ldr	r3, [pc, #28]	; (8008958 <prvCheckForValidListAndQueue+0x64>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d006      	beq.n	800894e <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008940:	4b05      	ldr	r3, [pc, #20]	; (8008958 <prvCheckForValidListAndQueue+0x64>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a0b      	ldr	r2, [pc, #44]	; (8008974 <prvCheckForValidListAndQueue+0x80>)
 8008946:	0011      	movs	r1, r2
 8008948:	0018      	movs	r0, r3
 800894a:	f7fe fc85 	bl	8007258 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800894e:	f000 f8c1 	bl	8008ad4 <vPortExitCritical>
}
 8008952:	46c0      	nop			; (mov r8, r8)
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}
 8008958:	20001344 	.word	0x20001344
 800895c:	20001314 	.word	0x20001314
 8008960:	20001328 	.word	0x20001328
 8008964:	2000133c 	.word	0x2000133c
 8008968:	20001340 	.word	0x20001340
 800896c:	200013f0 	.word	0x200013f0
 8008970:	20001350 	.word	0x20001350
 8008974:	08009dc4 	.word	0x08009dc4

08008978 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	60b9      	str	r1, [r7, #8]
 8008982:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	3b04      	subs	r3, #4
 8008988:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2280      	movs	r2, #128	; 0x80
 800898e:	0452      	lsls	r2, r2, #17
 8008990:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	3b04      	subs	r3, #4
 8008996:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8008998:	68ba      	ldr	r2, [r7, #8]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	3b04      	subs	r3, #4
 80089a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80089a4:	4a08      	ldr	r2, [pc, #32]	; (80089c8 <pxPortInitialiseStack+0x50>)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	3b14      	subs	r3, #20
 80089ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	3b20      	subs	r3, #32
 80089ba:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80089bc:	68fb      	ldr	r3, [r7, #12]
}
 80089be:	0018      	movs	r0, r3
 80089c0:	46bd      	mov	sp, r7
 80089c2:	b004      	add	sp, #16
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	46c0      	nop			; (mov r8, r8)
 80089c8:	080089cd 	.word	0x080089cd

080089cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80089d2:	2300      	movs	r3, #0
 80089d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80089d6:	4b08      	ldr	r3, [pc, #32]	; (80089f8 <prvTaskExitError+0x2c>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	3301      	adds	r3, #1
 80089dc:	d001      	beq.n	80089e2 <prvTaskExitError+0x16>
 80089de:	b672      	cpsid	i
 80089e0:	e7fe      	b.n	80089e0 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80089e2:	b672      	cpsid	i
	while( ulDummy == 0 )
 80089e4:	46c0      	nop			; (mov r8, r8)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d0fc      	beq.n	80089e6 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80089ec:	46c0      	nop			; (mov r8, r8)
 80089ee:	46c0      	nop			; (mov r8, r8)
 80089f0:	46bd      	mov	sp, r7
 80089f2:	b002      	add	sp, #8
 80089f4:	bd80      	pop	{r7, pc}
 80089f6:	46c0      	nop			; (mov r8, r8)
 80089f8:	20000030 	.word	0x20000030

080089fc <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8008a00:	46c0      	nop			; (mov r8, r8)
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
	...

08008a10 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8008a10:	4a0b      	ldr	r2, [pc, #44]	; (8008a40 <pxCurrentTCBConst2>)
 8008a12:	6813      	ldr	r3, [r2, #0]
 8008a14:	6818      	ldr	r0, [r3, #0]
 8008a16:	3020      	adds	r0, #32
 8008a18:	f380 8809 	msr	PSP, r0
 8008a1c:	2002      	movs	r0, #2
 8008a1e:	f380 8814 	msr	CONTROL, r0
 8008a22:	f3bf 8f6f 	isb	sy
 8008a26:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8008a28:	46ae      	mov	lr, r5
 8008a2a:	bc08      	pop	{r3}
 8008a2c:	bc04      	pop	{r2}
 8008a2e:	b662      	cpsie	i
 8008a30:	4718      	bx	r3
 8008a32:	46c0      	nop			; (mov r8, r8)
 8008a34:	46c0      	nop			; (mov r8, r8)
 8008a36:	46c0      	nop			; (mov r8, r8)
 8008a38:	46c0      	nop			; (mov r8, r8)
 8008a3a:	46c0      	nop			; (mov r8, r8)
 8008a3c:	46c0      	nop			; (mov r8, r8)
 8008a3e:	46c0      	nop			; (mov r8, r8)

08008a40 <pxCurrentTCBConst2>:
 8008a40:	20000e14 	.word	0x20000e14
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8008a44:	46c0      	nop			; (mov r8, r8)
 8008a46:	46c0      	nop			; (mov r8, r8)

08008a48 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8008a4c:	4b0e      	ldr	r3, [pc, #56]	; (8008a88 <xPortStartScheduler+0x40>)
 8008a4e:	681a      	ldr	r2, [r3, #0]
 8008a50:	4b0d      	ldr	r3, [pc, #52]	; (8008a88 <xPortStartScheduler+0x40>)
 8008a52:	21ff      	movs	r1, #255	; 0xff
 8008a54:	0409      	lsls	r1, r1, #16
 8008a56:	430a      	orrs	r2, r1
 8008a58:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8008a5a:	4b0b      	ldr	r3, [pc, #44]	; (8008a88 <xPortStartScheduler+0x40>)
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	4b0a      	ldr	r3, [pc, #40]	; (8008a88 <xPortStartScheduler+0x40>)
 8008a60:	21ff      	movs	r1, #255	; 0xff
 8008a62:	0609      	lsls	r1, r1, #24
 8008a64:	430a      	orrs	r2, r1
 8008a66:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8008a68:	f000 f898 	bl	8008b9c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008a6c:	4b07      	ldr	r3, [pc, #28]	; (8008a8c <xPortStartScheduler+0x44>)
 8008a6e:	2200      	movs	r2, #0
 8008a70:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8008a72:	f7ff ffcd 	bl	8008a10 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008a76:	f7fe ffbd 	bl	80079f4 <vTaskSwitchContext>
	prvTaskExitError();
 8008a7a:	f7ff ffa7 	bl	80089cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008a7e:	2300      	movs	r3, #0
}
 8008a80:	0018      	movs	r0, r3
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
 8008a86:	46c0      	nop			; (mov r8, r8)
 8008a88:	e000ed20 	.word	0xe000ed20
 8008a8c:	20000030 	.word	0x20000030

08008a90 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8008a94:	4b05      	ldr	r3, [pc, #20]	; (8008aac <vPortYield+0x1c>)
 8008a96:	2280      	movs	r2, #128	; 0x80
 8008a98:	0552      	lsls	r2, r2, #21
 8008a9a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8008a9c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8008aa0:	f3bf 8f6f 	isb	sy
}
 8008aa4:	46c0      	nop			; (mov r8, r8)
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}
 8008aaa:	46c0      	nop			; (mov r8, r8)
 8008aac:	e000ed04 	.word	0xe000ed04

08008ab0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8008ab4:	b672      	cpsid	i
    uxCriticalNesting++;
 8008ab6:	4b06      	ldr	r3, [pc, #24]	; (8008ad0 <vPortEnterCritical+0x20>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	1c5a      	adds	r2, r3, #1
 8008abc:	4b04      	ldr	r3, [pc, #16]	; (8008ad0 <vPortEnterCritical+0x20>)
 8008abe:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8008ac0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8008ac4:	f3bf 8f6f 	isb	sy
}
 8008ac8:	46c0      	nop			; (mov r8, r8)
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	46c0      	nop			; (mov r8, r8)
 8008ad0:	20000030 	.word	0x20000030

08008ad4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008ad8:	4b09      	ldr	r3, [pc, #36]	; (8008b00 <vPortExitCritical+0x2c>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d101      	bne.n	8008ae4 <vPortExitCritical+0x10>
 8008ae0:	b672      	cpsid	i
 8008ae2:	e7fe      	b.n	8008ae2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8008ae4:	4b06      	ldr	r3, [pc, #24]	; (8008b00 <vPortExitCritical+0x2c>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	1e5a      	subs	r2, r3, #1
 8008aea:	4b05      	ldr	r3, [pc, #20]	; (8008b00 <vPortExitCritical+0x2c>)
 8008aec:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8008aee:	4b04      	ldr	r3, [pc, #16]	; (8008b00 <vPortExitCritical+0x2c>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d100      	bne.n	8008af8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8008af6:	b662      	cpsie	i
    }
}
 8008af8:	46c0      	nop			; (mov r8, r8)
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	46c0      	nop			; (mov r8, r8)
 8008b00:	20000030 	.word	0x20000030

08008b04 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8008b04:	f3ef 8010 	mrs	r0, PRIMASK
 8008b08:	b672      	cpsid	i
 8008b0a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8008b0c:	46c0      	nop			; (mov r8, r8)
 8008b0e:	0018      	movs	r0, r3

08008b10 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8008b10:	f380 8810 	msr	PRIMASK, r0
 8008b14:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8008b16:	46c0      	nop			; (mov r8, r8)
	...

08008b20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008b20:	f3ef 8009 	mrs	r0, PSP
 8008b24:	4b0e      	ldr	r3, [pc, #56]	; (8008b60 <pxCurrentTCBConst>)
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	3820      	subs	r0, #32
 8008b2a:	6010      	str	r0, [r2, #0]
 8008b2c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8008b2e:	4644      	mov	r4, r8
 8008b30:	464d      	mov	r5, r9
 8008b32:	4656      	mov	r6, sl
 8008b34:	465f      	mov	r7, fp
 8008b36:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8008b38:	b508      	push	{r3, lr}
 8008b3a:	b672      	cpsid	i
 8008b3c:	f7fe ff5a 	bl	80079f4 <vTaskSwitchContext>
 8008b40:	b662      	cpsie	i
 8008b42:	bc0c      	pop	{r2, r3}
 8008b44:	6811      	ldr	r1, [r2, #0]
 8008b46:	6808      	ldr	r0, [r1, #0]
 8008b48:	3010      	adds	r0, #16
 8008b4a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8008b4c:	46a0      	mov	r8, r4
 8008b4e:	46a9      	mov	r9, r5
 8008b50:	46b2      	mov	sl, r6
 8008b52:	46bb      	mov	fp, r7
 8008b54:	f380 8809 	msr	PSP, r0
 8008b58:	3820      	subs	r0, #32
 8008b5a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8008b5c:	4718      	bx	r3
 8008b5e:	46c0      	nop			; (mov r8, r8)

08008b60 <pxCurrentTCBConst>:
 8008b60:	20000e14 	.word	0x20000e14
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8008b64:	46c0      	nop			; (mov r8, r8)
 8008b66:	46c0      	nop			; (mov r8, r8)

08008b68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8008b6e:	f7ff ffc9 	bl	8008b04 <ulSetInterruptMaskFromISR>
 8008b72:	0003      	movs	r3, r0
 8008b74:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008b76:	f7fe fe8d 	bl	8007894 <xTaskIncrementTick>
 8008b7a:	1e03      	subs	r3, r0, #0
 8008b7c:	d003      	beq.n	8008b86 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8008b7e:	4b06      	ldr	r3, [pc, #24]	; (8008b98 <SysTick_Handler+0x30>)
 8008b80:	2280      	movs	r2, #128	; 0x80
 8008b82:	0552      	lsls	r2, r2, #21
 8008b84:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	0018      	movs	r0, r3
 8008b8a:	f7ff ffc1 	bl	8008b10 <vClearInterruptMaskFromISR>
}
 8008b8e:	46c0      	nop			; (mov r8, r8)
 8008b90:	46bd      	mov	sp, r7
 8008b92:	b002      	add	sp, #8
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	46c0      	nop			; (mov r8, r8)
 8008b98:	e000ed04 	.word	0xe000ed04

08008b9c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8008ba0:	4b0b      	ldr	r3, [pc, #44]	; (8008bd0 <prvSetupTimerInterrupt+0x34>)
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8008ba6:	4b0b      	ldr	r3, [pc, #44]	; (8008bd4 <prvSetupTimerInterrupt+0x38>)
 8008ba8:	2200      	movs	r2, #0
 8008baa:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008bac:	4b0a      	ldr	r3, [pc, #40]	; (8008bd8 <prvSetupTimerInterrupt+0x3c>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	22fa      	movs	r2, #250	; 0xfa
 8008bb2:	0091      	lsls	r1, r2, #2
 8008bb4:	0018      	movs	r0, r3
 8008bb6:	f7f7 faa7 	bl	8000108 <__udivsi3>
 8008bba:	0003      	movs	r3, r0
 8008bbc:	001a      	movs	r2, r3
 8008bbe:	4b07      	ldr	r3, [pc, #28]	; (8008bdc <prvSetupTimerInterrupt+0x40>)
 8008bc0:	3a01      	subs	r2, #1
 8008bc2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8008bc4:	4b02      	ldr	r3, [pc, #8]	; (8008bd0 <prvSetupTimerInterrupt+0x34>)
 8008bc6:	2207      	movs	r2, #7
 8008bc8:	601a      	str	r2, [r3, #0]
}
 8008bca:	46c0      	nop			; (mov r8, r8)
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	e000e010 	.word	0xe000e010
 8008bd4:	e000e018 	.word	0xe000e018
 8008bd8:	20000000 	.word	0x20000000
 8008bdc:	e000e014 	.word	0xe000e014

08008be0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b086      	sub	sp, #24
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008be8:	2300      	movs	r3, #0
 8008bea:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8008bec:	f7fe fdac 	bl	8007748 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008bf0:	4b49      	ldr	r3, [pc, #292]	; (8008d18 <pvPortMalloc+0x138>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d101      	bne.n	8008bfc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008bf8:	f000 f8e0 	bl	8008dbc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008bfc:	4b47      	ldr	r3, [pc, #284]	; (8008d1c <pvPortMalloc+0x13c>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	4013      	ands	r3, r2
 8008c04:	d000      	beq.n	8008c08 <pvPortMalloc+0x28>
 8008c06:	e079      	b.n	8008cfc <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d012      	beq.n	8008c34 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8008c0e:	2208      	movs	r2, #8
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	189b      	adds	r3, r3, r2
 8008c14:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2207      	movs	r2, #7
 8008c1a:	4013      	ands	r3, r2
 8008c1c:	d00a      	beq.n	8008c34 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2207      	movs	r2, #7
 8008c22:	4393      	bics	r3, r2
 8008c24:	3308      	adds	r3, #8
 8008c26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2207      	movs	r2, #7
 8008c2c:	4013      	ands	r3, r2
 8008c2e:	d001      	beq.n	8008c34 <pvPortMalloc+0x54>
 8008c30:	b672      	cpsid	i
 8008c32:	e7fe      	b.n	8008c32 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d060      	beq.n	8008cfc <pvPortMalloc+0x11c>
 8008c3a:	4b39      	ldr	r3, [pc, #228]	; (8008d20 <pvPortMalloc+0x140>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d85b      	bhi.n	8008cfc <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008c44:	4b37      	ldr	r3, [pc, #220]	; (8008d24 <pvPortMalloc+0x144>)
 8008c46:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8008c48:	4b36      	ldr	r3, [pc, #216]	; (8008d24 <pvPortMalloc+0x144>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c4e:	e004      	b.n	8008c5a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d903      	bls.n	8008c6c <pvPortMalloc+0x8c>
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d1f1      	bne.n	8008c50 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008c6c:	4b2a      	ldr	r3, [pc, #168]	; (8008d18 <pvPortMalloc+0x138>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	697a      	ldr	r2, [r7, #20]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d042      	beq.n	8008cfc <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	2208      	movs	r2, #8
 8008c7c:	189b      	adds	r3, r3, r2
 8008c7e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	685a      	ldr	r2, [r3, #4]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	1ad2      	subs	r2, r2, r3
 8008c90:	2308      	movs	r3, #8
 8008c92:	005b      	lsls	r3, r3, #1
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d916      	bls.n	8008cc6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008c98:	697a      	ldr	r2, [r7, #20]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	18d3      	adds	r3, r2, r3
 8008c9e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	2207      	movs	r2, #7
 8008ca4:	4013      	ands	r3, r2
 8008ca6:	d001      	beq.n	8008cac <pvPortMalloc+0xcc>
 8008ca8:	b672      	cpsid	i
 8008caa:	e7fe      	b.n	8008caa <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	685a      	ldr	r2, [r3, #4]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	1ad2      	subs	r2, r2, r3
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	687a      	ldr	r2, [r7, #4]
 8008cbc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	0018      	movs	r0, r3
 8008cc2:	f000 f8db 	bl	8008e7c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008cc6:	4b16      	ldr	r3, [pc, #88]	; (8008d20 <pvPortMalloc+0x140>)
 8008cc8:	681a      	ldr	r2, [r3, #0]
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	1ad2      	subs	r2, r2, r3
 8008cd0:	4b13      	ldr	r3, [pc, #76]	; (8008d20 <pvPortMalloc+0x140>)
 8008cd2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008cd4:	4b12      	ldr	r3, [pc, #72]	; (8008d20 <pvPortMalloc+0x140>)
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	4b13      	ldr	r3, [pc, #76]	; (8008d28 <pvPortMalloc+0x148>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d203      	bcs.n	8008ce8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008ce0:	4b0f      	ldr	r3, [pc, #60]	; (8008d20 <pvPortMalloc+0x140>)
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	4b10      	ldr	r3, [pc, #64]	; (8008d28 <pvPortMalloc+0x148>)
 8008ce6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	685a      	ldr	r2, [r3, #4]
 8008cec:	4b0b      	ldr	r3, [pc, #44]	; (8008d1c <pvPortMalloc+0x13c>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	431a      	orrs	r2, r3
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008cfc:	f7fe fd30 	bl	8007760 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2207      	movs	r2, #7
 8008d04:	4013      	ands	r3, r2
 8008d06:	d001      	beq.n	8008d0c <pvPortMalloc+0x12c>
 8008d08:	b672      	cpsid	i
 8008d0a:	e7fe      	b.n	8008d0a <pvPortMalloc+0x12a>
	return pvReturn;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
}
 8008d0e:	0018      	movs	r0, r3
 8008d10:	46bd      	mov	sp, r7
 8008d12:	b006      	add	sp, #24
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	46c0      	nop			; (mov r8, r8)
 8008d18:	20002848 	.word	0x20002848
 8008d1c:	20002854 	.word	0x20002854
 8008d20:	2000284c 	.word	0x2000284c
 8008d24:	20002840 	.word	0x20002840
 8008d28:	20002850 	.word	0x20002850

08008d2c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b084      	sub	sp, #16
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d035      	beq.n	8008daa <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008d3e:	2308      	movs	r3, #8
 8008d40:	425b      	negs	r3, r3
 8008d42:	68fa      	ldr	r2, [r7, #12]
 8008d44:	18d3      	adds	r3, r2, r3
 8008d46:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	685a      	ldr	r2, [r3, #4]
 8008d50:	4b18      	ldr	r3, [pc, #96]	; (8008db4 <vPortFree+0x88>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4013      	ands	r3, r2
 8008d56:	d101      	bne.n	8008d5c <vPortFree+0x30>
 8008d58:	b672      	cpsid	i
 8008d5a:	e7fe      	b.n	8008d5a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d001      	beq.n	8008d68 <vPortFree+0x3c>
 8008d64:	b672      	cpsid	i
 8008d66:	e7fe      	b.n	8008d66 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	685a      	ldr	r2, [r3, #4]
 8008d6c:	4b11      	ldr	r3, [pc, #68]	; (8008db4 <vPortFree+0x88>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4013      	ands	r3, r2
 8008d72:	d01a      	beq.n	8008daa <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d116      	bne.n	8008daa <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	685a      	ldr	r2, [r3, #4]
 8008d80:	4b0c      	ldr	r3, [pc, #48]	; (8008db4 <vPortFree+0x88>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	43db      	mvns	r3, r3
 8008d86:	401a      	ands	r2, r3
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008d8c:	f7fe fcdc 	bl	8007748 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	685a      	ldr	r2, [r3, #4]
 8008d94:	4b08      	ldr	r3, [pc, #32]	; (8008db8 <vPortFree+0x8c>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	18d2      	adds	r2, r2, r3
 8008d9a:	4b07      	ldr	r3, [pc, #28]	; (8008db8 <vPortFree+0x8c>)
 8008d9c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	0018      	movs	r0, r3
 8008da2:	f000 f86b 	bl	8008e7c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008da6:	f7fe fcdb 	bl	8007760 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008daa:	46c0      	nop			; (mov r8, r8)
 8008dac:	46bd      	mov	sp, r7
 8008dae:	b004      	add	sp, #16
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	46c0      	nop			; (mov r8, r8)
 8008db4:	20002854 	.word	0x20002854
 8008db8:	2000284c 	.word	0x2000284c

08008dbc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008dc2:	23a0      	movs	r3, #160	; 0xa0
 8008dc4:	015b      	lsls	r3, r3, #5
 8008dc6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008dc8:	4b26      	ldr	r3, [pc, #152]	; (8008e64 <prvHeapInit+0xa8>)
 8008dca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2207      	movs	r2, #7
 8008dd0:	4013      	ands	r3, r2
 8008dd2:	d00c      	beq.n	8008dee <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	3307      	adds	r3, #7
 8008dd8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2207      	movs	r2, #7
 8008dde:	4393      	bics	r3, r2
 8008de0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008de2:	68ba      	ldr	r2, [r7, #8]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	1ad2      	subs	r2, r2, r3
 8008de8:	4b1e      	ldr	r3, [pc, #120]	; (8008e64 <prvHeapInit+0xa8>)
 8008dea:	18d3      	adds	r3, r2, r3
 8008dec:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008df2:	4b1d      	ldr	r3, [pc, #116]	; (8008e68 <prvHeapInit+0xac>)
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008df8:	4b1b      	ldr	r3, [pc, #108]	; (8008e68 <prvHeapInit+0xac>)
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	68ba      	ldr	r2, [r7, #8]
 8008e02:	18d3      	adds	r3, r2, r3
 8008e04:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008e06:	2208      	movs	r2, #8
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	1a9b      	subs	r3, r3, r2
 8008e0c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2207      	movs	r2, #7
 8008e12:	4393      	bics	r3, r2
 8008e14:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008e16:	68fa      	ldr	r2, [r7, #12]
 8008e18:	4b14      	ldr	r3, [pc, #80]	; (8008e6c <prvHeapInit+0xb0>)
 8008e1a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8008e1c:	4b13      	ldr	r3, [pc, #76]	; (8008e6c <prvHeapInit+0xb0>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2200      	movs	r2, #0
 8008e22:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008e24:	4b11      	ldr	r3, [pc, #68]	; (8008e6c <prvHeapInit+0xb0>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	68fa      	ldr	r2, [r7, #12]
 8008e34:	1ad2      	subs	r2, r2, r3
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008e3a:	4b0c      	ldr	r3, [pc, #48]	; (8008e6c <prvHeapInit+0xb0>)
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	685a      	ldr	r2, [r3, #4]
 8008e46:	4b0a      	ldr	r3, [pc, #40]	; (8008e70 <prvHeapInit+0xb4>)
 8008e48:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	685a      	ldr	r2, [r3, #4]
 8008e4e:	4b09      	ldr	r3, [pc, #36]	; (8008e74 <prvHeapInit+0xb8>)
 8008e50:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008e52:	4b09      	ldr	r3, [pc, #36]	; (8008e78 <prvHeapInit+0xbc>)
 8008e54:	2280      	movs	r2, #128	; 0x80
 8008e56:	0612      	lsls	r2, r2, #24
 8008e58:	601a      	str	r2, [r3, #0]
}
 8008e5a:	46c0      	nop			; (mov r8, r8)
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	b004      	add	sp, #16
 8008e60:	bd80      	pop	{r7, pc}
 8008e62:	46c0      	nop			; (mov r8, r8)
 8008e64:	20001440 	.word	0x20001440
 8008e68:	20002840 	.word	0x20002840
 8008e6c:	20002848 	.word	0x20002848
 8008e70:	20002850 	.word	0x20002850
 8008e74:	2000284c 	.word	0x2000284c
 8008e78:	20002854 	.word	0x20002854

08008e7c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008e84:	4b27      	ldr	r3, [pc, #156]	; (8008f24 <prvInsertBlockIntoFreeList+0xa8>)
 8008e86:	60fb      	str	r3, [r7, #12]
 8008e88:	e002      	b.n	8008e90 <prvInsertBlockIntoFreeList+0x14>
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	60fb      	str	r3, [r7, #12]
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	687a      	ldr	r2, [r7, #4]
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d8f7      	bhi.n	8008e8a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	68ba      	ldr	r2, [r7, #8]
 8008ea4:	18d3      	adds	r3, r2, r3
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d108      	bne.n	8008ebe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	685a      	ldr	r2, [r3, #4]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	18d2      	adds	r2, r2, r3
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	68ba      	ldr	r2, [r7, #8]
 8008ec8:	18d2      	adds	r2, r2, r3
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d118      	bne.n	8008f04 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681a      	ldr	r2, [r3, #0]
 8008ed6:	4b14      	ldr	r3, [pc, #80]	; (8008f28 <prvInsertBlockIntoFreeList+0xac>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d00d      	beq.n	8008efa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	685a      	ldr	r2, [r3, #4]
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	18d2      	adds	r2, r2, r3
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	681a      	ldr	r2, [r3, #0]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	601a      	str	r2, [r3, #0]
 8008ef8:	e008      	b.n	8008f0c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008efa:	4b0b      	ldr	r3, [pc, #44]	; (8008f28 <prvInsertBlockIntoFreeList+0xac>)
 8008efc:	681a      	ldr	r2, [r3, #0]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	601a      	str	r2, [r3, #0]
 8008f02:	e003      	b.n	8008f0c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008f0c:	68fa      	ldr	r2, [r7, #12]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d002      	beq.n	8008f1a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f1a:	46c0      	nop			; (mov r8, r8)
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	b004      	add	sp, #16
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	46c0      	nop			; (mov r8, r8)
 8008f24:	20002840 	.word	0x20002840
 8008f28:	20002848 	.word	0x20002848

08008f2c <__errno>:
 8008f2c:	4b01      	ldr	r3, [pc, #4]	; (8008f34 <__errno+0x8>)
 8008f2e:	6818      	ldr	r0, [r3, #0]
 8008f30:	4770      	bx	lr
 8008f32:	46c0      	nop			; (mov r8, r8)
 8008f34:	20000034 	.word	0x20000034

08008f38 <std>:
 8008f38:	2300      	movs	r3, #0
 8008f3a:	b510      	push	{r4, lr}
 8008f3c:	0004      	movs	r4, r0
 8008f3e:	6003      	str	r3, [r0, #0]
 8008f40:	6043      	str	r3, [r0, #4]
 8008f42:	6083      	str	r3, [r0, #8]
 8008f44:	8181      	strh	r1, [r0, #12]
 8008f46:	6643      	str	r3, [r0, #100]	; 0x64
 8008f48:	0019      	movs	r1, r3
 8008f4a:	81c2      	strh	r2, [r0, #14]
 8008f4c:	6103      	str	r3, [r0, #16]
 8008f4e:	6143      	str	r3, [r0, #20]
 8008f50:	6183      	str	r3, [r0, #24]
 8008f52:	2208      	movs	r2, #8
 8008f54:	305c      	adds	r0, #92	; 0x5c
 8008f56:	f000 f921 	bl	800919c <memset>
 8008f5a:	4b05      	ldr	r3, [pc, #20]	; (8008f70 <std+0x38>)
 8008f5c:	6224      	str	r4, [r4, #32]
 8008f5e:	6263      	str	r3, [r4, #36]	; 0x24
 8008f60:	4b04      	ldr	r3, [pc, #16]	; (8008f74 <std+0x3c>)
 8008f62:	62a3      	str	r3, [r4, #40]	; 0x28
 8008f64:	4b04      	ldr	r3, [pc, #16]	; (8008f78 <std+0x40>)
 8008f66:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008f68:	4b04      	ldr	r3, [pc, #16]	; (8008f7c <std+0x44>)
 8008f6a:	6323      	str	r3, [r4, #48]	; 0x30
 8008f6c:	bd10      	pop	{r4, pc}
 8008f6e:	46c0      	nop			; (mov r8, r8)
 8008f70:	08009509 	.word	0x08009509
 8008f74:	08009531 	.word	0x08009531
 8008f78:	08009569 	.word	0x08009569
 8008f7c:	08009595 	.word	0x08009595

08008f80 <_cleanup_r>:
 8008f80:	b510      	push	{r4, lr}
 8008f82:	4902      	ldr	r1, [pc, #8]	; (8008f8c <_cleanup_r+0xc>)
 8008f84:	f000 f8ba 	bl	80090fc <_fwalk_reent>
 8008f88:	bd10      	pop	{r4, pc}
 8008f8a:	46c0      	nop			; (mov r8, r8)
 8008f8c:	080098a1 	.word	0x080098a1

08008f90 <__sfmoreglue>:
 8008f90:	b570      	push	{r4, r5, r6, lr}
 8008f92:	2568      	movs	r5, #104	; 0x68
 8008f94:	1e4a      	subs	r2, r1, #1
 8008f96:	4355      	muls	r5, r2
 8008f98:	000e      	movs	r6, r1
 8008f9a:	0029      	movs	r1, r5
 8008f9c:	3174      	adds	r1, #116	; 0x74
 8008f9e:	f000 f927 	bl	80091f0 <_malloc_r>
 8008fa2:	1e04      	subs	r4, r0, #0
 8008fa4:	d008      	beq.n	8008fb8 <__sfmoreglue+0x28>
 8008fa6:	2100      	movs	r1, #0
 8008fa8:	002a      	movs	r2, r5
 8008faa:	6001      	str	r1, [r0, #0]
 8008fac:	6046      	str	r6, [r0, #4]
 8008fae:	300c      	adds	r0, #12
 8008fb0:	60a0      	str	r0, [r4, #8]
 8008fb2:	3268      	adds	r2, #104	; 0x68
 8008fb4:	f000 f8f2 	bl	800919c <memset>
 8008fb8:	0020      	movs	r0, r4
 8008fba:	bd70      	pop	{r4, r5, r6, pc}

08008fbc <__sfp_lock_acquire>:
 8008fbc:	b510      	push	{r4, lr}
 8008fbe:	4802      	ldr	r0, [pc, #8]	; (8008fc8 <__sfp_lock_acquire+0xc>)
 8008fc0:	f000 f8e1 	bl	8009186 <__retarget_lock_acquire_recursive>
 8008fc4:	bd10      	pop	{r4, pc}
 8008fc6:	46c0      	nop			; (mov r8, r8)
 8008fc8:	20002859 	.word	0x20002859

08008fcc <__sfp_lock_release>:
 8008fcc:	b510      	push	{r4, lr}
 8008fce:	4802      	ldr	r0, [pc, #8]	; (8008fd8 <__sfp_lock_release+0xc>)
 8008fd0:	f000 f8da 	bl	8009188 <__retarget_lock_release_recursive>
 8008fd4:	bd10      	pop	{r4, pc}
 8008fd6:	46c0      	nop			; (mov r8, r8)
 8008fd8:	20002859 	.word	0x20002859

08008fdc <__sinit_lock_acquire>:
 8008fdc:	b510      	push	{r4, lr}
 8008fde:	4802      	ldr	r0, [pc, #8]	; (8008fe8 <__sinit_lock_acquire+0xc>)
 8008fe0:	f000 f8d1 	bl	8009186 <__retarget_lock_acquire_recursive>
 8008fe4:	bd10      	pop	{r4, pc}
 8008fe6:	46c0      	nop			; (mov r8, r8)
 8008fe8:	2000285a 	.word	0x2000285a

08008fec <__sinit_lock_release>:
 8008fec:	b510      	push	{r4, lr}
 8008fee:	4802      	ldr	r0, [pc, #8]	; (8008ff8 <__sinit_lock_release+0xc>)
 8008ff0:	f000 f8ca 	bl	8009188 <__retarget_lock_release_recursive>
 8008ff4:	bd10      	pop	{r4, pc}
 8008ff6:	46c0      	nop			; (mov r8, r8)
 8008ff8:	2000285a 	.word	0x2000285a

08008ffc <__sinit>:
 8008ffc:	b513      	push	{r0, r1, r4, lr}
 8008ffe:	0004      	movs	r4, r0
 8009000:	f7ff ffec 	bl	8008fdc <__sinit_lock_acquire>
 8009004:	69a3      	ldr	r3, [r4, #24]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d002      	beq.n	8009010 <__sinit+0x14>
 800900a:	f7ff ffef 	bl	8008fec <__sinit_lock_release>
 800900e:	bd13      	pop	{r0, r1, r4, pc}
 8009010:	64a3      	str	r3, [r4, #72]	; 0x48
 8009012:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009014:	6523      	str	r3, [r4, #80]	; 0x50
 8009016:	4b13      	ldr	r3, [pc, #76]	; (8009064 <__sinit+0x68>)
 8009018:	4a13      	ldr	r2, [pc, #76]	; (8009068 <__sinit+0x6c>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	62a2      	str	r2, [r4, #40]	; 0x28
 800901e:	9301      	str	r3, [sp, #4]
 8009020:	42a3      	cmp	r3, r4
 8009022:	d101      	bne.n	8009028 <__sinit+0x2c>
 8009024:	2301      	movs	r3, #1
 8009026:	61a3      	str	r3, [r4, #24]
 8009028:	0020      	movs	r0, r4
 800902a:	f000 f81f 	bl	800906c <__sfp>
 800902e:	6060      	str	r0, [r4, #4]
 8009030:	0020      	movs	r0, r4
 8009032:	f000 f81b 	bl	800906c <__sfp>
 8009036:	60a0      	str	r0, [r4, #8]
 8009038:	0020      	movs	r0, r4
 800903a:	f000 f817 	bl	800906c <__sfp>
 800903e:	2200      	movs	r2, #0
 8009040:	2104      	movs	r1, #4
 8009042:	60e0      	str	r0, [r4, #12]
 8009044:	6860      	ldr	r0, [r4, #4]
 8009046:	f7ff ff77 	bl	8008f38 <std>
 800904a:	2201      	movs	r2, #1
 800904c:	2109      	movs	r1, #9
 800904e:	68a0      	ldr	r0, [r4, #8]
 8009050:	f7ff ff72 	bl	8008f38 <std>
 8009054:	2202      	movs	r2, #2
 8009056:	2112      	movs	r1, #18
 8009058:	68e0      	ldr	r0, [r4, #12]
 800905a:	f7ff ff6d 	bl	8008f38 <std>
 800905e:	2301      	movs	r3, #1
 8009060:	61a3      	str	r3, [r4, #24]
 8009062:	e7d2      	b.n	800900a <__sinit+0xe>
 8009064:	0800a7b8 	.word	0x0800a7b8
 8009068:	08008f81 	.word	0x08008f81

0800906c <__sfp>:
 800906c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800906e:	0007      	movs	r7, r0
 8009070:	f7ff ffa4 	bl	8008fbc <__sfp_lock_acquire>
 8009074:	4b1f      	ldr	r3, [pc, #124]	; (80090f4 <__sfp+0x88>)
 8009076:	681e      	ldr	r6, [r3, #0]
 8009078:	69b3      	ldr	r3, [r6, #24]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d102      	bne.n	8009084 <__sfp+0x18>
 800907e:	0030      	movs	r0, r6
 8009080:	f7ff ffbc 	bl	8008ffc <__sinit>
 8009084:	3648      	adds	r6, #72	; 0x48
 8009086:	68b4      	ldr	r4, [r6, #8]
 8009088:	6873      	ldr	r3, [r6, #4]
 800908a:	3b01      	subs	r3, #1
 800908c:	d504      	bpl.n	8009098 <__sfp+0x2c>
 800908e:	6833      	ldr	r3, [r6, #0]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d022      	beq.n	80090da <__sfp+0x6e>
 8009094:	6836      	ldr	r6, [r6, #0]
 8009096:	e7f6      	b.n	8009086 <__sfp+0x1a>
 8009098:	220c      	movs	r2, #12
 800909a:	5ea5      	ldrsh	r5, [r4, r2]
 800909c:	2d00      	cmp	r5, #0
 800909e:	d11a      	bne.n	80090d6 <__sfp+0x6a>
 80090a0:	0020      	movs	r0, r4
 80090a2:	4b15      	ldr	r3, [pc, #84]	; (80090f8 <__sfp+0x8c>)
 80090a4:	3058      	adds	r0, #88	; 0x58
 80090a6:	60e3      	str	r3, [r4, #12]
 80090a8:	6665      	str	r5, [r4, #100]	; 0x64
 80090aa:	f000 f86b 	bl	8009184 <__retarget_lock_init_recursive>
 80090ae:	f7ff ff8d 	bl	8008fcc <__sfp_lock_release>
 80090b2:	0020      	movs	r0, r4
 80090b4:	2208      	movs	r2, #8
 80090b6:	0029      	movs	r1, r5
 80090b8:	6025      	str	r5, [r4, #0]
 80090ba:	60a5      	str	r5, [r4, #8]
 80090bc:	6065      	str	r5, [r4, #4]
 80090be:	6125      	str	r5, [r4, #16]
 80090c0:	6165      	str	r5, [r4, #20]
 80090c2:	61a5      	str	r5, [r4, #24]
 80090c4:	305c      	adds	r0, #92	; 0x5c
 80090c6:	f000 f869 	bl	800919c <memset>
 80090ca:	6365      	str	r5, [r4, #52]	; 0x34
 80090cc:	63a5      	str	r5, [r4, #56]	; 0x38
 80090ce:	64a5      	str	r5, [r4, #72]	; 0x48
 80090d0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80090d2:	0020      	movs	r0, r4
 80090d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090d6:	3468      	adds	r4, #104	; 0x68
 80090d8:	e7d7      	b.n	800908a <__sfp+0x1e>
 80090da:	2104      	movs	r1, #4
 80090dc:	0038      	movs	r0, r7
 80090de:	f7ff ff57 	bl	8008f90 <__sfmoreglue>
 80090e2:	1e04      	subs	r4, r0, #0
 80090e4:	6030      	str	r0, [r6, #0]
 80090e6:	d1d5      	bne.n	8009094 <__sfp+0x28>
 80090e8:	f7ff ff70 	bl	8008fcc <__sfp_lock_release>
 80090ec:	230c      	movs	r3, #12
 80090ee:	603b      	str	r3, [r7, #0]
 80090f0:	e7ef      	b.n	80090d2 <__sfp+0x66>
 80090f2:	46c0      	nop			; (mov r8, r8)
 80090f4:	0800a7b8 	.word	0x0800a7b8
 80090f8:	ffff0001 	.word	0xffff0001

080090fc <_fwalk_reent>:
 80090fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090fe:	0004      	movs	r4, r0
 8009100:	0006      	movs	r6, r0
 8009102:	2700      	movs	r7, #0
 8009104:	9101      	str	r1, [sp, #4]
 8009106:	3448      	adds	r4, #72	; 0x48
 8009108:	6863      	ldr	r3, [r4, #4]
 800910a:	68a5      	ldr	r5, [r4, #8]
 800910c:	9300      	str	r3, [sp, #0]
 800910e:	9b00      	ldr	r3, [sp, #0]
 8009110:	3b01      	subs	r3, #1
 8009112:	9300      	str	r3, [sp, #0]
 8009114:	d504      	bpl.n	8009120 <_fwalk_reent+0x24>
 8009116:	6824      	ldr	r4, [r4, #0]
 8009118:	2c00      	cmp	r4, #0
 800911a:	d1f5      	bne.n	8009108 <_fwalk_reent+0xc>
 800911c:	0038      	movs	r0, r7
 800911e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009120:	89ab      	ldrh	r3, [r5, #12]
 8009122:	2b01      	cmp	r3, #1
 8009124:	d908      	bls.n	8009138 <_fwalk_reent+0x3c>
 8009126:	220e      	movs	r2, #14
 8009128:	5eab      	ldrsh	r3, [r5, r2]
 800912a:	3301      	adds	r3, #1
 800912c:	d004      	beq.n	8009138 <_fwalk_reent+0x3c>
 800912e:	0029      	movs	r1, r5
 8009130:	0030      	movs	r0, r6
 8009132:	9b01      	ldr	r3, [sp, #4]
 8009134:	4798      	blx	r3
 8009136:	4307      	orrs	r7, r0
 8009138:	3568      	adds	r5, #104	; 0x68
 800913a:	e7e8      	b.n	800910e <_fwalk_reent+0x12>

0800913c <__libc_init_array>:
 800913c:	b570      	push	{r4, r5, r6, lr}
 800913e:	2600      	movs	r6, #0
 8009140:	4d0c      	ldr	r5, [pc, #48]	; (8009174 <__libc_init_array+0x38>)
 8009142:	4c0d      	ldr	r4, [pc, #52]	; (8009178 <__libc_init_array+0x3c>)
 8009144:	1b64      	subs	r4, r4, r5
 8009146:	10a4      	asrs	r4, r4, #2
 8009148:	42a6      	cmp	r6, r4
 800914a:	d109      	bne.n	8009160 <__libc_init_array+0x24>
 800914c:	2600      	movs	r6, #0
 800914e:	f000 fd43 	bl	8009bd8 <_init>
 8009152:	4d0a      	ldr	r5, [pc, #40]	; (800917c <__libc_init_array+0x40>)
 8009154:	4c0a      	ldr	r4, [pc, #40]	; (8009180 <__libc_init_array+0x44>)
 8009156:	1b64      	subs	r4, r4, r5
 8009158:	10a4      	asrs	r4, r4, #2
 800915a:	42a6      	cmp	r6, r4
 800915c:	d105      	bne.n	800916a <__libc_init_array+0x2e>
 800915e:	bd70      	pop	{r4, r5, r6, pc}
 8009160:	00b3      	lsls	r3, r6, #2
 8009162:	58eb      	ldr	r3, [r5, r3]
 8009164:	4798      	blx	r3
 8009166:	3601      	adds	r6, #1
 8009168:	e7ee      	b.n	8009148 <__libc_init_array+0xc>
 800916a:	00b3      	lsls	r3, r6, #2
 800916c:	58eb      	ldr	r3, [r5, r3]
 800916e:	4798      	blx	r3
 8009170:	3601      	adds	r6, #1
 8009172:	e7f2      	b.n	800915a <__libc_init_array+0x1e>
 8009174:	0800a7c4 	.word	0x0800a7c4
 8009178:	0800a7c4 	.word	0x0800a7c4
 800917c:	0800a7c4 	.word	0x0800a7c4
 8009180:	0800a7c8 	.word	0x0800a7c8

08009184 <__retarget_lock_init_recursive>:
 8009184:	4770      	bx	lr

08009186 <__retarget_lock_acquire_recursive>:
 8009186:	4770      	bx	lr

08009188 <__retarget_lock_release_recursive>:
 8009188:	4770      	bx	lr

0800918a <memcpy>:
 800918a:	2300      	movs	r3, #0
 800918c:	b510      	push	{r4, lr}
 800918e:	429a      	cmp	r2, r3
 8009190:	d100      	bne.n	8009194 <memcpy+0xa>
 8009192:	bd10      	pop	{r4, pc}
 8009194:	5ccc      	ldrb	r4, [r1, r3]
 8009196:	54c4      	strb	r4, [r0, r3]
 8009198:	3301      	adds	r3, #1
 800919a:	e7f8      	b.n	800918e <memcpy+0x4>

0800919c <memset>:
 800919c:	0003      	movs	r3, r0
 800919e:	1882      	adds	r2, r0, r2
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d100      	bne.n	80091a6 <memset+0xa>
 80091a4:	4770      	bx	lr
 80091a6:	7019      	strb	r1, [r3, #0]
 80091a8:	3301      	adds	r3, #1
 80091aa:	e7f9      	b.n	80091a0 <memset+0x4>

080091ac <sbrk_aligned>:
 80091ac:	b570      	push	{r4, r5, r6, lr}
 80091ae:	4e0f      	ldr	r6, [pc, #60]	; (80091ec <sbrk_aligned+0x40>)
 80091b0:	000d      	movs	r5, r1
 80091b2:	6831      	ldr	r1, [r6, #0]
 80091b4:	0004      	movs	r4, r0
 80091b6:	2900      	cmp	r1, #0
 80091b8:	d102      	bne.n	80091c0 <sbrk_aligned+0x14>
 80091ba:	f000 f993 	bl	80094e4 <_sbrk_r>
 80091be:	6030      	str	r0, [r6, #0]
 80091c0:	0029      	movs	r1, r5
 80091c2:	0020      	movs	r0, r4
 80091c4:	f000 f98e 	bl	80094e4 <_sbrk_r>
 80091c8:	1c43      	adds	r3, r0, #1
 80091ca:	d00a      	beq.n	80091e2 <sbrk_aligned+0x36>
 80091cc:	2303      	movs	r3, #3
 80091ce:	1cc5      	adds	r5, r0, #3
 80091d0:	439d      	bics	r5, r3
 80091d2:	42a8      	cmp	r0, r5
 80091d4:	d007      	beq.n	80091e6 <sbrk_aligned+0x3a>
 80091d6:	1a29      	subs	r1, r5, r0
 80091d8:	0020      	movs	r0, r4
 80091da:	f000 f983 	bl	80094e4 <_sbrk_r>
 80091de:	1c43      	adds	r3, r0, #1
 80091e0:	d101      	bne.n	80091e6 <sbrk_aligned+0x3a>
 80091e2:	2501      	movs	r5, #1
 80091e4:	426d      	negs	r5, r5
 80091e6:	0028      	movs	r0, r5
 80091e8:	bd70      	pop	{r4, r5, r6, pc}
 80091ea:	46c0      	nop			; (mov r8, r8)
 80091ec:	20002860 	.word	0x20002860

080091f0 <_malloc_r>:
 80091f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091f2:	2203      	movs	r2, #3
 80091f4:	1ccb      	adds	r3, r1, #3
 80091f6:	4393      	bics	r3, r2
 80091f8:	3308      	adds	r3, #8
 80091fa:	0006      	movs	r6, r0
 80091fc:	001f      	movs	r7, r3
 80091fe:	2b0c      	cmp	r3, #12
 8009200:	d232      	bcs.n	8009268 <_malloc_r+0x78>
 8009202:	270c      	movs	r7, #12
 8009204:	42b9      	cmp	r1, r7
 8009206:	d831      	bhi.n	800926c <_malloc_r+0x7c>
 8009208:	0030      	movs	r0, r6
 800920a:	f000 fc09 	bl	8009a20 <__malloc_lock>
 800920e:	4d32      	ldr	r5, [pc, #200]	; (80092d8 <_malloc_r+0xe8>)
 8009210:	682b      	ldr	r3, [r5, #0]
 8009212:	001c      	movs	r4, r3
 8009214:	2c00      	cmp	r4, #0
 8009216:	d12e      	bne.n	8009276 <_malloc_r+0x86>
 8009218:	0039      	movs	r1, r7
 800921a:	0030      	movs	r0, r6
 800921c:	f7ff ffc6 	bl	80091ac <sbrk_aligned>
 8009220:	0004      	movs	r4, r0
 8009222:	1c43      	adds	r3, r0, #1
 8009224:	d11e      	bne.n	8009264 <_malloc_r+0x74>
 8009226:	682c      	ldr	r4, [r5, #0]
 8009228:	0025      	movs	r5, r4
 800922a:	2d00      	cmp	r5, #0
 800922c:	d14a      	bne.n	80092c4 <_malloc_r+0xd4>
 800922e:	6823      	ldr	r3, [r4, #0]
 8009230:	0029      	movs	r1, r5
 8009232:	18e3      	adds	r3, r4, r3
 8009234:	0030      	movs	r0, r6
 8009236:	9301      	str	r3, [sp, #4]
 8009238:	f000 f954 	bl	80094e4 <_sbrk_r>
 800923c:	9b01      	ldr	r3, [sp, #4]
 800923e:	4283      	cmp	r3, r0
 8009240:	d143      	bne.n	80092ca <_malloc_r+0xda>
 8009242:	6823      	ldr	r3, [r4, #0]
 8009244:	3703      	adds	r7, #3
 8009246:	1aff      	subs	r7, r7, r3
 8009248:	2303      	movs	r3, #3
 800924a:	439f      	bics	r7, r3
 800924c:	3708      	adds	r7, #8
 800924e:	2f0c      	cmp	r7, #12
 8009250:	d200      	bcs.n	8009254 <_malloc_r+0x64>
 8009252:	270c      	movs	r7, #12
 8009254:	0039      	movs	r1, r7
 8009256:	0030      	movs	r0, r6
 8009258:	f7ff ffa8 	bl	80091ac <sbrk_aligned>
 800925c:	1c43      	adds	r3, r0, #1
 800925e:	d034      	beq.n	80092ca <_malloc_r+0xda>
 8009260:	6823      	ldr	r3, [r4, #0]
 8009262:	19df      	adds	r7, r3, r7
 8009264:	6027      	str	r7, [r4, #0]
 8009266:	e013      	b.n	8009290 <_malloc_r+0xa0>
 8009268:	2b00      	cmp	r3, #0
 800926a:	dacb      	bge.n	8009204 <_malloc_r+0x14>
 800926c:	230c      	movs	r3, #12
 800926e:	2500      	movs	r5, #0
 8009270:	6033      	str	r3, [r6, #0]
 8009272:	0028      	movs	r0, r5
 8009274:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009276:	6822      	ldr	r2, [r4, #0]
 8009278:	1bd1      	subs	r1, r2, r7
 800927a:	d420      	bmi.n	80092be <_malloc_r+0xce>
 800927c:	290b      	cmp	r1, #11
 800927e:	d917      	bls.n	80092b0 <_malloc_r+0xc0>
 8009280:	19e2      	adds	r2, r4, r7
 8009282:	6027      	str	r7, [r4, #0]
 8009284:	42a3      	cmp	r3, r4
 8009286:	d111      	bne.n	80092ac <_malloc_r+0xbc>
 8009288:	602a      	str	r2, [r5, #0]
 800928a:	6863      	ldr	r3, [r4, #4]
 800928c:	6011      	str	r1, [r2, #0]
 800928e:	6053      	str	r3, [r2, #4]
 8009290:	0030      	movs	r0, r6
 8009292:	0025      	movs	r5, r4
 8009294:	f000 fbcc 	bl	8009a30 <__malloc_unlock>
 8009298:	2207      	movs	r2, #7
 800929a:	350b      	adds	r5, #11
 800929c:	1d23      	adds	r3, r4, #4
 800929e:	4395      	bics	r5, r2
 80092a0:	1aea      	subs	r2, r5, r3
 80092a2:	429d      	cmp	r5, r3
 80092a4:	d0e5      	beq.n	8009272 <_malloc_r+0x82>
 80092a6:	1b5b      	subs	r3, r3, r5
 80092a8:	50a3      	str	r3, [r4, r2]
 80092aa:	e7e2      	b.n	8009272 <_malloc_r+0x82>
 80092ac:	605a      	str	r2, [r3, #4]
 80092ae:	e7ec      	b.n	800928a <_malloc_r+0x9a>
 80092b0:	6862      	ldr	r2, [r4, #4]
 80092b2:	42a3      	cmp	r3, r4
 80092b4:	d101      	bne.n	80092ba <_malloc_r+0xca>
 80092b6:	602a      	str	r2, [r5, #0]
 80092b8:	e7ea      	b.n	8009290 <_malloc_r+0xa0>
 80092ba:	605a      	str	r2, [r3, #4]
 80092bc:	e7e8      	b.n	8009290 <_malloc_r+0xa0>
 80092be:	0023      	movs	r3, r4
 80092c0:	6864      	ldr	r4, [r4, #4]
 80092c2:	e7a7      	b.n	8009214 <_malloc_r+0x24>
 80092c4:	002c      	movs	r4, r5
 80092c6:	686d      	ldr	r5, [r5, #4]
 80092c8:	e7af      	b.n	800922a <_malloc_r+0x3a>
 80092ca:	230c      	movs	r3, #12
 80092cc:	0030      	movs	r0, r6
 80092ce:	6033      	str	r3, [r6, #0]
 80092d0:	f000 fbae 	bl	8009a30 <__malloc_unlock>
 80092d4:	e7cd      	b.n	8009272 <_malloc_r+0x82>
 80092d6:	46c0      	nop			; (mov r8, r8)
 80092d8:	2000285c 	.word	0x2000285c

080092dc <putchar>:
 80092dc:	4b08      	ldr	r3, [pc, #32]	; (8009300 <putchar+0x24>)
 80092de:	b570      	push	{r4, r5, r6, lr}
 80092e0:	681c      	ldr	r4, [r3, #0]
 80092e2:	0005      	movs	r5, r0
 80092e4:	2c00      	cmp	r4, #0
 80092e6:	d005      	beq.n	80092f4 <putchar+0x18>
 80092e8:	69a3      	ldr	r3, [r4, #24]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d102      	bne.n	80092f4 <putchar+0x18>
 80092ee:	0020      	movs	r0, r4
 80092f0:	f7ff fe84 	bl	8008ffc <__sinit>
 80092f4:	0029      	movs	r1, r5
 80092f6:	0020      	movs	r0, r4
 80092f8:	68a2      	ldr	r2, [r4, #8]
 80092fa:	f000 fbeb 	bl	8009ad4 <_putc_r>
 80092fe:	bd70      	pop	{r4, r5, r6, pc}
 8009300:	20000034 	.word	0x20000034

08009304 <_puts_r>:
 8009304:	b570      	push	{r4, r5, r6, lr}
 8009306:	0005      	movs	r5, r0
 8009308:	000e      	movs	r6, r1
 800930a:	2800      	cmp	r0, #0
 800930c:	d004      	beq.n	8009318 <_puts_r+0x14>
 800930e:	6983      	ldr	r3, [r0, #24]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d101      	bne.n	8009318 <_puts_r+0x14>
 8009314:	f7ff fe72 	bl	8008ffc <__sinit>
 8009318:	69ab      	ldr	r3, [r5, #24]
 800931a:	68ac      	ldr	r4, [r5, #8]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d102      	bne.n	8009326 <_puts_r+0x22>
 8009320:	0028      	movs	r0, r5
 8009322:	f7ff fe6b 	bl	8008ffc <__sinit>
 8009326:	4b2d      	ldr	r3, [pc, #180]	; (80093dc <_puts_r+0xd8>)
 8009328:	429c      	cmp	r4, r3
 800932a:	d122      	bne.n	8009372 <_puts_r+0x6e>
 800932c:	686c      	ldr	r4, [r5, #4]
 800932e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009330:	07db      	lsls	r3, r3, #31
 8009332:	d405      	bmi.n	8009340 <_puts_r+0x3c>
 8009334:	89a3      	ldrh	r3, [r4, #12]
 8009336:	059b      	lsls	r3, r3, #22
 8009338:	d402      	bmi.n	8009340 <_puts_r+0x3c>
 800933a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800933c:	f7ff ff23 	bl	8009186 <__retarget_lock_acquire_recursive>
 8009340:	89a3      	ldrh	r3, [r4, #12]
 8009342:	071b      	lsls	r3, r3, #28
 8009344:	d502      	bpl.n	800934c <_puts_r+0x48>
 8009346:	6923      	ldr	r3, [r4, #16]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d129      	bne.n	80093a0 <_puts_r+0x9c>
 800934c:	0021      	movs	r1, r4
 800934e:	0028      	movs	r0, r5
 8009350:	f000 f990 	bl	8009674 <__swsetup_r>
 8009354:	2800      	cmp	r0, #0
 8009356:	d023      	beq.n	80093a0 <_puts_r+0x9c>
 8009358:	2501      	movs	r5, #1
 800935a:	426d      	negs	r5, r5
 800935c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800935e:	07db      	lsls	r3, r3, #31
 8009360:	d405      	bmi.n	800936e <_puts_r+0x6a>
 8009362:	89a3      	ldrh	r3, [r4, #12]
 8009364:	059b      	lsls	r3, r3, #22
 8009366:	d402      	bmi.n	800936e <_puts_r+0x6a>
 8009368:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800936a:	f7ff ff0d 	bl	8009188 <__retarget_lock_release_recursive>
 800936e:	0028      	movs	r0, r5
 8009370:	bd70      	pop	{r4, r5, r6, pc}
 8009372:	4b1b      	ldr	r3, [pc, #108]	; (80093e0 <_puts_r+0xdc>)
 8009374:	429c      	cmp	r4, r3
 8009376:	d101      	bne.n	800937c <_puts_r+0x78>
 8009378:	68ac      	ldr	r4, [r5, #8]
 800937a:	e7d8      	b.n	800932e <_puts_r+0x2a>
 800937c:	4b19      	ldr	r3, [pc, #100]	; (80093e4 <_puts_r+0xe0>)
 800937e:	429c      	cmp	r4, r3
 8009380:	d1d5      	bne.n	800932e <_puts_r+0x2a>
 8009382:	68ec      	ldr	r4, [r5, #12]
 8009384:	e7d3      	b.n	800932e <_puts_r+0x2a>
 8009386:	3601      	adds	r6, #1
 8009388:	60a3      	str	r3, [r4, #8]
 800938a:	2b00      	cmp	r3, #0
 800938c:	da04      	bge.n	8009398 <_puts_r+0x94>
 800938e:	69a2      	ldr	r2, [r4, #24]
 8009390:	429a      	cmp	r2, r3
 8009392:	dc16      	bgt.n	80093c2 <_puts_r+0xbe>
 8009394:	290a      	cmp	r1, #10
 8009396:	d014      	beq.n	80093c2 <_puts_r+0xbe>
 8009398:	6823      	ldr	r3, [r4, #0]
 800939a:	1c5a      	adds	r2, r3, #1
 800939c:	6022      	str	r2, [r4, #0]
 800939e:	7019      	strb	r1, [r3, #0]
 80093a0:	68a3      	ldr	r3, [r4, #8]
 80093a2:	7831      	ldrb	r1, [r6, #0]
 80093a4:	3b01      	subs	r3, #1
 80093a6:	2900      	cmp	r1, #0
 80093a8:	d1ed      	bne.n	8009386 <_puts_r+0x82>
 80093aa:	60a3      	str	r3, [r4, #8]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	da0f      	bge.n	80093d0 <_puts_r+0xcc>
 80093b0:	0028      	movs	r0, r5
 80093b2:	0022      	movs	r2, r4
 80093b4:	310a      	adds	r1, #10
 80093b6:	f000 f8f3 	bl	80095a0 <__swbuf_r>
 80093ba:	250a      	movs	r5, #10
 80093bc:	1c43      	adds	r3, r0, #1
 80093be:	d1cd      	bne.n	800935c <_puts_r+0x58>
 80093c0:	e7ca      	b.n	8009358 <_puts_r+0x54>
 80093c2:	0022      	movs	r2, r4
 80093c4:	0028      	movs	r0, r5
 80093c6:	f000 f8eb 	bl	80095a0 <__swbuf_r>
 80093ca:	1c43      	adds	r3, r0, #1
 80093cc:	d1e8      	bne.n	80093a0 <_puts_r+0x9c>
 80093ce:	e7c3      	b.n	8009358 <_puts_r+0x54>
 80093d0:	250a      	movs	r5, #10
 80093d2:	6823      	ldr	r3, [r4, #0]
 80093d4:	1c5a      	adds	r2, r3, #1
 80093d6:	6022      	str	r2, [r4, #0]
 80093d8:	701d      	strb	r5, [r3, #0]
 80093da:	e7bf      	b.n	800935c <_puts_r+0x58>
 80093dc:	0800a778 	.word	0x0800a778
 80093e0:	0800a798 	.word	0x0800a798
 80093e4:	0800a758 	.word	0x0800a758

080093e8 <puts>:
 80093e8:	b510      	push	{r4, lr}
 80093ea:	4b03      	ldr	r3, [pc, #12]	; (80093f8 <puts+0x10>)
 80093ec:	0001      	movs	r1, r0
 80093ee:	6818      	ldr	r0, [r3, #0]
 80093f0:	f7ff ff88 	bl	8009304 <_puts_r>
 80093f4:	bd10      	pop	{r4, pc}
 80093f6:	46c0      	nop			; (mov r8, r8)
 80093f8:	20000034 	.word	0x20000034

080093fc <cleanup_glue>:
 80093fc:	b570      	push	{r4, r5, r6, lr}
 80093fe:	000d      	movs	r5, r1
 8009400:	6809      	ldr	r1, [r1, #0]
 8009402:	0004      	movs	r4, r0
 8009404:	2900      	cmp	r1, #0
 8009406:	d001      	beq.n	800940c <cleanup_glue+0x10>
 8009408:	f7ff fff8 	bl	80093fc <cleanup_glue>
 800940c:	0029      	movs	r1, r5
 800940e:	0020      	movs	r0, r4
 8009410:	f000 fb16 	bl	8009a40 <_free_r>
 8009414:	bd70      	pop	{r4, r5, r6, pc}
	...

08009418 <_reclaim_reent>:
 8009418:	4b31      	ldr	r3, [pc, #196]	; (80094e0 <_reclaim_reent+0xc8>)
 800941a:	b570      	push	{r4, r5, r6, lr}
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	0004      	movs	r4, r0
 8009420:	4283      	cmp	r3, r0
 8009422:	d049      	beq.n	80094b8 <_reclaim_reent+0xa0>
 8009424:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009426:	2b00      	cmp	r3, #0
 8009428:	d00a      	beq.n	8009440 <_reclaim_reent+0x28>
 800942a:	2500      	movs	r5, #0
 800942c:	68db      	ldr	r3, [r3, #12]
 800942e:	42ab      	cmp	r3, r5
 8009430:	d147      	bne.n	80094c2 <_reclaim_reent+0xaa>
 8009432:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009434:	6819      	ldr	r1, [r3, #0]
 8009436:	2900      	cmp	r1, #0
 8009438:	d002      	beq.n	8009440 <_reclaim_reent+0x28>
 800943a:	0020      	movs	r0, r4
 800943c:	f000 fb00 	bl	8009a40 <_free_r>
 8009440:	6961      	ldr	r1, [r4, #20]
 8009442:	2900      	cmp	r1, #0
 8009444:	d002      	beq.n	800944c <_reclaim_reent+0x34>
 8009446:	0020      	movs	r0, r4
 8009448:	f000 fafa 	bl	8009a40 <_free_r>
 800944c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800944e:	2900      	cmp	r1, #0
 8009450:	d002      	beq.n	8009458 <_reclaim_reent+0x40>
 8009452:	0020      	movs	r0, r4
 8009454:	f000 faf4 	bl	8009a40 <_free_r>
 8009458:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800945a:	2900      	cmp	r1, #0
 800945c:	d002      	beq.n	8009464 <_reclaim_reent+0x4c>
 800945e:	0020      	movs	r0, r4
 8009460:	f000 faee 	bl	8009a40 <_free_r>
 8009464:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009466:	2900      	cmp	r1, #0
 8009468:	d002      	beq.n	8009470 <_reclaim_reent+0x58>
 800946a:	0020      	movs	r0, r4
 800946c:	f000 fae8 	bl	8009a40 <_free_r>
 8009470:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009472:	2900      	cmp	r1, #0
 8009474:	d002      	beq.n	800947c <_reclaim_reent+0x64>
 8009476:	0020      	movs	r0, r4
 8009478:	f000 fae2 	bl	8009a40 <_free_r>
 800947c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800947e:	2900      	cmp	r1, #0
 8009480:	d002      	beq.n	8009488 <_reclaim_reent+0x70>
 8009482:	0020      	movs	r0, r4
 8009484:	f000 fadc 	bl	8009a40 <_free_r>
 8009488:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800948a:	2900      	cmp	r1, #0
 800948c:	d002      	beq.n	8009494 <_reclaim_reent+0x7c>
 800948e:	0020      	movs	r0, r4
 8009490:	f000 fad6 	bl	8009a40 <_free_r>
 8009494:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009496:	2900      	cmp	r1, #0
 8009498:	d002      	beq.n	80094a0 <_reclaim_reent+0x88>
 800949a:	0020      	movs	r0, r4
 800949c:	f000 fad0 	bl	8009a40 <_free_r>
 80094a0:	69a3      	ldr	r3, [r4, #24]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d008      	beq.n	80094b8 <_reclaim_reent+0xa0>
 80094a6:	0020      	movs	r0, r4
 80094a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80094aa:	4798      	blx	r3
 80094ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80094ae:	2900      	cmp	r1, #0
 80094b0:	d002      	beq.n	80094b8 <_reclaim_reent+0xa0>
 80094b2:	0020      	movs	r0, r4
 80094b4:	f7ff ffa2 	bl	80093fc <cleanup_glue>
 80094b8:	bd70      	pop	{r4, r5, r6, pc}
 80094ba:	5949      	ldr	r1, [r1, r5]
 80094bc:	2900      	cmp	r1, #0
 80094be:	d108      	bne.n	80094d2 <_reclaim_reent+0xba>
 80094c0:	3504      	adds	r5, #4
 80094c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094c4:	68d9      	ldr	r1, [r3, #12]
 80094c6:	2d80      	cmp	r5, #128	; 0x80
 80094c8:	d1f7      	bne.n	80094ba <_reclaim_reent+0xa2>
 80094ca:	0020      	movs	r0, r4
 80094cc:	f000 fab8 	bl	8009a40 <_free_r>
 80094d0:	e7af      	b.n	8009432 <_reclaim_reent+0x1a>
 80094d2:	680e      	ldr	r6, [r1, #0]
 80094d4:	0020      	movs	r0, r4
 80094d6:	f000 fab3 	bl	8009a40 <_free_r>
 80094da:	0031      	movs	r1, r6
 80094dc:	e7ee      	b.n	80094bc <_reclaim_reent+0xa4>
 80094de:	46c0      	nop			; (mov r8, r8)
 80094e0:	20000034 	.word	0x20000034

080094e4 <_sbrk_r>:
 80094e4:	2300      	movs	r3, #0
 80094e6:	b570      	push	{r4, r5, r6, lr}
 80094e8:	4d06      	ldr	r5, [pc, #24]	; (8009504 <_sbrk_r+0x20>)
 80094ea:	0004      	movs	r4, r0
 80094ec:	0008      	movs	r0, r1
 80094ee:	602b      	str	r3, [r5, #0]
 80094f0:	f7f9 f870 	bl	80025d4 <_sbrk>
 80094f4:	1c43      	adds	r3, r0, #1
 80094f6:	d103      	bne.n	8009500 <_sbrk_r+0x1c>
 80094f8:	682b      	ldr	r3, [r5, #0]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d000      	beq.n	8009500 <_sbrk_r+0x1c>
 80094fe:	6023      	str	r3, [r4, #0]
 8009500:	bd70      	pop	{r4, r5, r6, pc}
 8009502:	46c0      	nop			; (mov r8, r8)
 8009504:	20002864 	.word	0x20002864

08009508 <__sread>:
 8009508:	b570      	push	{r4, r5, r6, lr}
 800950a:	000c      	movs	r4, r1
 800950c:	250e      	movs	r5, #14
 800950e:	5f49      	ldrsh	r1, [r1, r5]
 8009510:	f000 fb2a 	bl	8009b68 <_read_r>
 8009514:	2800      	cmp	r0, #0
 8009516:	db03      	blt.n	8009520 <__sread+0x18>
 8009518:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800951a:	181b      	adds	r3, r3, r0
 800951c:	6563      	str	r3, [r4, #84]	; 0x54
 800951e:	bd70      	pop	{r4, r5, r6, pc}
 8009520:	89a3      	ldrh	r3, [r4, #12]
 8009522:	4a02      	ldr	r2, [pc, #8]	; (800952c <__sread+0x24>)
 8009524:	4013      	ands	r3, r2
 8009526:	81a3      	strh	r3, [r4, #12]
 8009528:	e7f9      	b.n	800951e <__sread+0x16>
 800952a:	46c0      	nop			; (mov r8, r8)
 800952c:	ffffefff 	.word	0xffffefff

08009530 <__swrite>:
 8009530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009532:	001f      	movs	r7, r3
 8009534:	898b      	ldrh	r3, [r1, #12]
 8009536:	0005      	movs	r5, r0
 8009538:	000c      	movs	r4, r1
 800953a:	0016      	movs	r6, r2
 800953c:	05db      	lsls	r3, r3, #23
 800953e:	d505      	bpl.n	800954c <__swrite+0x1c>
 8009540:	230e      	movs	r3, #14
 8009542:	5ec9      	ldrsh	r1, [r1, r3]
 8009544:	2200      	movs	r2, #0
 8009546:	2302      	movs	r3, #2
 8009548:	f000 f9ea 	bl	8009920 <_lseek_r>
 800954c:	89a3      	ldrh	r3, [r4, #12]
 800954e:	4a05      	ldr	r2, [pc, #20]	; (8009564 <__swrite+0x34>)
 8009550:	0028      	movs	r0, r5
 8009552:	4013      	ands	r3, r2
 8009554:	81a3      	strh	r3, [r4, #12]
 8009556:	0032      	movs	r2, r6
 8009558:	230e      	movs	r3, #14
 800955a:	5ee1      	ldrsh	r1, [r4, r3]
 800955c:	003b      	movs	r3, r7
 800955e:	f000 f875 	bl	800964c <_write_r>
 8009562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009564:	ffffefff 	.word	0xffffefff

08009568 <__sseek>:
 8009568:	b570      	push	{r4, r5, r6, lr}
 800956a:	000c      	movs	r4, r1
 800956c:	250e      	movs	r5, #14
 800956e:	5f49      	ldrsh	r1, [r1, r5]
 8009570:	f000 f9d6 	bl	8009920 <_lseek_r>
 8009574:	89a3      	ldrh	r3, [r4, #12]
 8009576:	1c42      	adds	r2, r0, #1
 8009578:	d103      	bne.n	8009582 <__sseek+0x1a>
 800957a:	4a05      	ldr	r2, [pc, #20]	; (8009590 <__sseek+0x28>)
 800957c:	4013      	ands	r3, r2
 800957e:	81a3      	strh	r3, [r4, #12]
 8009580:	bd70      	pop	{r4, r5, r6, pc}
 8009582:	2280      	movs	r2, #128	; 0x80
 8009584:	0152      	lsls	r2, r2, #5
 8009586:	4313      	orrs	r3, r2
 8009588:	81a3      	strh	r3, [r4, #12]
 800958a:	6560      	str	r0, [r4, #84]	; 0x54
 800958c:	e7f8      	b.n	8009580 <__sseek+0x18>
 800958e:	46c0      	nop			; (mov r8, r8)
 8009590:	ffffefff 	.word	0xffffefff

08009594 <__sclose>:
 8009594:	b510      	push	{r4, lr}
 8009596:	230e      	movs	r3, #14
 8009598:	5ec9      	ldrsh	r1, [r1, r3]
 800959a:	f000 f8e3 	bl	8009764 <_close_r>
 800959e:	bd10      	pop	{r4, pc}

080095a0 <__swbuf_r>:
 80095a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095a2:	0005      	movs	r5, r0
 80095a4:	000e      	movs	r6, r1
 80095a6:	0014      	movs	r4, r2
 80095a8:	2800      	cmp	r0, #0
 80095aa:	d004      	beq.n	80095b6 <__swbuf_r+0x16>
 80095ac:	6983      	ldr	r3, [r0, #24]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d101      	bne.n	80095b6 <__swbuf_r+0x16>
 80095b2:	f7ff fd23 	bl	8008ffc <__sinit>
 80095b6:	4b22      	ldr	r3, [pc, #136]	; (8009640 <__swbuf_r+0xa0>)
 80095b8:	429c      	cmp	r4, r3
 80095ba:	d12e      	bne.n	800961a <__swbuf_r+0x7a>
 80095bc:	686c      	ldr	r4, [r5, #4]
 80095be:	69a3      	ldr	r3, [r4, #24]
 80095c0:	60a3      	str	r3, [r4, #8]
 80095c2:	89a3      	ldrh	r3, [r4, #12]
 80095c4:	071b      	lsls	r3, r3, #28
 80095c6:	d532      	bpl.n	800962e <__swbuf_r+0x8e>
 80095c8:	6923      	ldr	r3, [r4, #16]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d02f      	beq.n	800962e <__swbuf_r+0x8e>
 80095ce:	6823      	ldr	r3, [r4, #0]
 80095d0:	6922      	ldr	r2, [r4, #16]
 80095d2:	b2f7      	uxtb	r7, r6
 80095d4:	1a98      	subs	r0, r3, r2
 80095d6:	6963      	ldr	r3, [r4, #20]
 80095d8:	b2f6      	uxtb	r6, r6
 80095da:	4283      	cmp	r3, r0
 80095dc:	dc05      	bgt.n	80095ea <__swbuf_r+0x4a>
 80095de:	0021      	movs	r1, r4
 80095e0:	0028      	movs	r0, r5
 80095e2:	f000 f95d 	bl	80098a0 <_fflush_r>
 80095e6:	2800      	cmp	r0, #0
 80095e8:	d127      	bne.n	800963a <__swbuf_r+0x9a>
 80095ea:	68a3      	ldr	r3, [r4, #8]
 80095ec:	3001      	adds	r0, #1
 80095ee:	3b01      	subs	r3, #1
 80095f0:	60a3      	str	r3, [r4, #8]
 80095f2:	6823      	ldr	r3, [r4, #0]
 80095f4:	1c5a      	adds	r2, r3, #1
 80095f6:	6022      	str	r2, [r4, #0]
 80095f8:	701f      	strb	r7, [r3, #0]
 80095fa:	6963      	ldr	r3, [r4, #20]
 80095fc:	4283      	cmp	r3, r0
 80095fe:	d004      	beq.n	800960a <__swbuf_r+0x6a>
 8009600:	89a3      	ldrh	r3, [r4, #12]
 8009602:	07db      	lsls	r3, r3, #31
 8009604:	d507      	bpl.n	8009616 <__swbuf_r+0x76>
 8009606:	2e0a      	cmp	r6, #10
 8009608:	d105      	bne.n	8009616 <__swbuf_r+0x76>
 800960a:	0021      	movs	r1, r4
 800960c:	0028      	movs	r0, r5
 800960e:	f000 f947 	bl	80098a0 <_fflush_r>
 8009612:	2800      	cmp	r0, #0
 8009614:	d111      	bne.n	800963a <__swbuf_r+0x9a>
 8009616:	0030      	movs	r0, r6
 8009618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800961a:	4b0a      	ldr	r3, [pc, #40]	; (8009644 <__swbuf_r+0xa4>)
 800961c:	429c      	cmp	r4, r3
 800961e:	d101      	bne.n	8009624 <__swbuf_r+0x84>
 8009620:	68ac      	ldr	r4, [r5, #8]
 8009622:	e7cc      	b.n	80095be <__swbuf_r+0x1e>
 8009624:	4b08      	ldr	r3, [pc, #32]	; (8009648 <__swbuf_r+0xa8>)
 8009626:	429c      	cmp	r4, r3
 8009628:	d1c9      	bne.n	80095be <__swbuf_r+0x1e>
 800962a:	68ec      	ldr	r4, [r5, #12]
 800962c:	e7c7      	b.n	80095be <__swbuf_r+0x1e>
 800962e:	0021      	movs	r1, r4
 8009630:	0028      	movs	r0, r5
 8009632:	f000 f81f 	bl	8009674 <__swsetup_r>
 8009636:	2800      	cmp	r0, #0
 8009638:	d0c9      	beq.n	80095ce <__swbuf_r+0x2e>
 800963a:	2601      	movs	r6, #1
 800963c:	4276      	negs	r6, r6
 800963e:	e7ea      	b.n	8009616 <__swbuf_r+0x76>
 8009640:	0800a778 	.word	0x0800a778
 8009644:	0800a798 	.word	0x0800a798
 8009648:	0800a758 	.word	0x0800a758

0800964c <_write_r>:
 800964c:	b570      	push	{r4, r5, r6, lr}
 800964e:	0004      	movs	r4, r0
 8009650:	0008      	movs	r0, r1
 8009652:	0011      	movs	r1, r2
 8009654:	001a      	movs	r2, r3
 8009656:	2300      	movs	r3, #0
 8009658:	4d05      	ldr	r5, [pc, #20]	; (8009670 <_write_r+0x24>)
 800965a:	602b      	str	r3, [r5, #0]
 800965c:	f7f8 ff71 	bl	8002542 <_write>
 8009660:	1c43      	adds	r3, r0, #1
 8009662:	d103      	bne.n	800966c <_write_r+0x20>
 8009664:	682b      	ldr	r3, [r5, #0]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d000      	beq.n	800966c <_write_r+0x20>
 800966a:	6023      	str	r3, [r4, #0]
 800966c:	bd70      	pop	{r4, r5, r6, pc}
 800966e:	46c0      	nop			; (mov r8, r8)
 8009670:	20002864 	.word	0x20002864

08009674 <__swsetup_r>:
 8009674:	4b37      	ldr	r3, [pc, #220]	; (8009754 <__swsetup_r+0xe0>)
 8009676:	b570      	push	{r4, r5, r6, lr}
 8009678:	681d      	ldr	r5, [r3, #0]
 800967a:	0006      	movs	r6, r0
 800967c:	000c      	movs	r4, r1
 800967e:	2d00      	cmp	r5, #0
 8009680:	d005      	beq.n	800968e <__swsetup_r+0x1a>
 8009682:	69ab      	ldr	r3, [r5, #24]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d102      	bne.n	800968e <__swsetup_r+0x1a>
 8009688:	0028      	movs	r0, r5
 800968a:	f7ff fcb7 	bl	8008ffc <__sinit>
 800968e:	4b32      	ldr	r3, [pc, #200]	; (8009758 <__swsetup_r+0xe4>)
 8009690:	429c      	cmp	r4, r3
 8009692:	d10f      	bne.n	80096b4 <__swsetup_r+0x40>
 8009694:	686c      	ldr	r4, [r5, #4]
 8009696:	230c      	movs	r3, #12
 8009698:	5ee2      	ldrsh	r2, [r4, r3]
 800969a:	b293      	uxth	r3, r2
 800969c:	0711      	lsls	r1, r2, #28
 800969e:	d42d      	bmi.n	80096fc <__swsetup_r+0x88>
 80096a0:	06d9      	lsls	r1, r3, #27
 80096a2:	d411      	bmi.n	80096c8 <__swsetup_r+0x54>
 80096a4:	2309      	movs	r3, #9
 80096a6:	2001      	movs	r0, #1
 80096a8:	6033      	str	r3, [r6, #0]
 80096aa:	3337      	adds	r3, #55	; 0x37
 80096ac:	4313      	orrs	r3, r2
 80096ae:	81a3      	strh	r3, [r4, #12]
 80096b0:	4240      	negs	r0, r0
 80096b2:	bd70      	pop	{r4, r5, r6, pc}
 80096b4:	4b29      	ldr	r3, [pc, #164]	; (800975c <__swsetup_r+0xe8>)
 80096b6:	429c      	cmp	r4, r3
 80096b8:	d101      	bne.n	80096be <__swsetup_r+0x4a>
 80096ba:	68ac      	ldr	r4, [r5, #8]
 80096bc:	e7eb      	b.n	8009696 <__swsetup_r+0x22>
 80096be:	4b28      	ldr	r3, [pc, #160]	; (8009760 <__swsetup_r+0xec>)
 80096c0:	429c      	cmp	r4, r3
 80096c2:	d1e8      	bne.n	8009696 <__swsetup_r+0x22>
 80096c4:	68ec      	ldr	r4, [r5, #12]
 80096c6:	e7e6      	b.n	8009696 <__swsetup_r+0x22>
 80096c8:	075b      	lsls	r3, r3, #29
 80096ca:	d513      	bpl.n	80096f4 <__swsetup_r+0x80>
 80096cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096ce:	2900      	cmp	r1, #0
 80096d0:	d008      	beq.n	80096e4 <__swsetup_r+0x70>
 80096d2:	0023      	movs	r3, r4
 80096d4:	3344      	adds	r3, #68	; 0x44
 80096d6:	4299      	cmp	r1, r3
 80096d8:	d002      	beq.n	80096e0 <__swsetup_r+0x6c>
 80096da:	0030      	movs	r0, r6
 80096dc:	f000 f9b0 	bl	8009a40 <_free_r>
 80096e0:	2300      	movs	r3, #0
 80096e2:	6363      	str	r3, [r4, #52]	; 0x34
 80096e4:	2224      	movs	r2, #36	; 0x24
 80096e6:	89a3      	ldrh	r3, [r4, #12]
 80096e8:	4393      	bics	r3, r2
 80096ea:	81a3      	strh	r3, [r4, #12]
 80096ec:	2300      	movs	r3, #0
 80096ee:	6063      	str	r3, [r4, #4]
 80096f0:	6923      	ldr	r3, [r4, #16]
 80096f2:	6023      	str	r3, [r4, #0]
 80096f4:	2308      	movs	r3, #8
 80096f6:	89a2      	ldrh	r2, [r4, #12]
 80096f8:	4313      	orrs	r3, r2
 80096fa:	81a3      	strh	r3, [r4, #12]
 80096fc:	6923      	ldr	r3, [r4, #16]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d10b      	bne.n	800971a <__swsetup_r+0xa6>
 8009702:	21a0      	movs	r1, #160	; 0xa0
 8009704:	2280      	movs	r2, #128	; 0x80
 8009706:	89a3      	ldrh	r3, [r4, #12]
 8009708:	0089      	lsls	r1, r1, #2
 800970a:	0092      	lsls	r2, r2, #2
 800970c:	400b      	ands	r3, r1
 800970e:	4293      	cmp	r3, r2
 8009710:	d003      	beq.n	800971a <__swsetup_r+0xa6>
 8009712:	0021      	movs	r1, r4
 8009714:	0030      	movs	r0, r6
 8009716:	f000 f93f 	bl	8009998 <__smakebuf_r>
 800971a:	220c      	movs	r2, #12
 800971c:	5ea3      	ldrsh	r3, [r4, r2]
 800971e:	2001      	movs	r0, #1
 8009720:	001a      	movs	r2, r3
 8009722:	b299      	uxth	r1, r3
 8009724:	4002      	ands	r2, r0
 8009726:	4203      	tst	r3, r0
 8009728:	d00f      	beq.n	800974a <__swsetup_r+0xd6>
 800972a:	2200      	movs	r2, #0
 800972c:	60a2      	str	r2, [r4, #8]
 800972e:	6962      	ldr	r2, [r4, #20]
 8009730:	4252      	negs	r2, r2
 8009732:	61a2      	str	r2, [r4, #24]
 8009734:	2000      	movs	r0, #0
 8009736:	6922      	ldr	r2, [r4, #16]
 8009738:	4282      	cmp	r2, r0
 800973a:	d1ba      	bne.n	80096b2 <__swsetup_r+0x3e>
 800973c:	060a      	lsls	r2, r1, #24
 800973e:	d5b8      	bpl.n	80096b2 <__swsetup_r+0x3e>
 8009740:	2240      	movs	r2, #64	; 0x40
 8009742:	4313      	orrs	r3, r2
 8009744:	81a3      	strh	r3, [r4, #12]
 8009746:	3801      	subs	r0, #1
 8009748:	e7b3      	b.n	80096b2 <__swsetup_r+0x3e>
 800974a:	0788      	lsls	r0, r1, #30
 800974c:	d400      	bmi.n	8009750 <__swsetup_r+0xdc>
 800974e:	6962      	ldr	r2, [r4, #20]
 8009750:	60a2      	str	r2, [r4, #8]
 8009752:	e7ef      	b.n	8009734 <__swsetup_r+0xc0>
 8009754:	20000034 	.word	0x20000034
 8009758:	0800a778 	.word	0x0800a778
 800975c:	0800a798 	.word	0x0800a798
 8009760:	0800a758 	.word	0x0800a758

08009764 <_close_r>:
 8009764:	2300      	movs	r3, #0
 8009766:	b570      	push	{r4, r5, r6, lr}
 8009768:	4d06      	ldr	r5, [pc, #24]	; (8009784 <_close_r+0x20>)
 800976a:	0004      	movs	r4, r0
 800976c:	0008      	movs	r0, r1
 800976e:	602b      	str	r3, [r5, #0]
 8009770:	f7f8 ff03 	bl	800257a <_close>
 8009774:	1c43      	adds	r3, r0, #1
 8009776:	d103      	bne.n	8009780 <_close_r+0x1c>
 8009778:	682b      	ldr	r3, [r5, #0]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d000      	beq.n	8009780 <_close_r+0x1c>
 800977e:	6023      	str	r3, [r4, #0]
 8009780:	bd70      	pop	{r4, r5, r6, pc}
 8009782:	46c0      	nop			; (mov r8, r8)
 8009784:	20002864 	.word	0x20002864

08009788 <__sflush_r>:
 8009788:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800978a:	898b      	ldrh	r3, [r1, #12]
 800978c:	0005      	movs	r5, r0
 800978e:	000c      	movs	r4, r1
 8009790:	071a      	lsls	r2, r3, #28
 8009792:	d45f      	bmi.n	8009854 <__sflush_r+0xcc>
 8009794:	684a      	ldr	r2, [r1, #4]
 8009796:	2a00      	cmp	r2, #0
 8009798:	dc04      	bgt.n	80097a4 <__sflush_r+0x1c>
 800979a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800979c:	2a00      	cmp	r2, #0
 800979e:	dc01      	bgt.n	80097a4 <__sflush_r+0x1c>
 80097a0:	2000      	movs	r0, #0
 80097a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80097a4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80097a6:	2f00      	cmp	r7, #0
 80097a8:	d0fa      	beq.n	80097a0 <__sflush_r+0x18>
 80097aa:	2200      	movs	r2, #0
 80097ac:	2180      	movs	r1, #128	; 0x80
 80097ae:	682e      	ldr	r6, [r5, #0]
 80097b0:	602a      	str	r2, [r5, #0]
 80097b2:	001a      	movs	r2, r3
 80097b4:	0149      	lsls	r1, r1, #5
 80097b6:	400a      	ands	r2, r1
 80097b8:	420b      	tst	r3, r1
 80097ba:	d034      	beq.n	8009826 <__sflush_r+0x9e>
 80097bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80097be:	89a3      	ldrh	r3, [r4, #12]
 80097c0:	075b      	lsls	r3, r3, #29
 80097c2:	d506      	bpl.n	80097d2 <__sflush_r+0x4a>
 80097c4:	6863      	ldr	r3, [r4, #4]
 80097c6:	1ac0      	subs	r0, r0, r3
 80097c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d001      	beq.n	80097d2 <__sflush_r+0x4a>
 80097ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80097d0:	1ac0      	subs	r0, r0, r3
 80097d2:	0002      	movs	r2, r0
 80097d4:	6a21      	ldr	r1, [r4, #32]
 80097d6:	2300      	movs	r3, #0
 80097d8:	0028      	movs	r0, r5
 80097da:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80097dc:	47b8      	blx	r7
 80097de:	89a1      	ldrh	r1, [r4, #12]
 80097e0:	1c43      	adds	r3, r0, #1
 80097e2:	d106      	bne.n	80097f2 <__sflush_r+0x6a>
 80097e4:	682b      	ldr	r3, [r5, #0]
 80097e6:	2b1d      	cmp	r3, #29
 80097e8:	d831      	bhi.n	800984e <__sflush_r+0xc6>
 80097ea:	4a2c      	ldr	r2, [pc, #176]	; (800989c <__sflush_r+0x114>)
 80097ec:	40da      	lsrs	r2, r3
 80097ee:	07d3      	lsls	r3, r2, #31
 80097f0:	d52d      	bpl.n	800984e <__sflush_r+0xc6>
 80097f2:	2300      	movs	r3, #0
 80097f4:	6063      	str	r3, [r4, #4]
 80097f6:	6923      	ldr	r3, [r4, #16]
 80097f8:	6023      	str	r3, [r4, #0]
 80097fa:	04cb      	lsls	r3, r1, #19
 80097fc:	d505      	bpl.n	800980a <__sflush_r+0x82>
 80097fe:	1c43      	adds	r3, r0, #1
 8009800:	d102      	bne.n	8009808 <__sflush_r+0x80>
 8009802:	682b      	ldr	r3, [r5, #0]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d100      	bne.n	800980a <__sflush_r+0x82>
 8009808:	6560      	str	r0, [r4, #84]	; 0x54
 800980a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800980c:	602e      	str	r6, [r5, #0]
 800980e:	2900      	cmp	r1, #0
 8009810:	d0c6      	beq.n	80097a0 <__sflush_r+0x18>
 8009812:	0023      	movs	r3, r4
 8009814:	3344      	adds	r3, #68	; 0x44
 8009816:	4299      	cmp	r1, r3
 8009818:	d002      	beq.n	8009820 <__sflush_r+0x98>
 800981a:	0028      	movs	r0, r5
 800981c:	f000 f910 	bl	8009a40 <_free_r>
 8009820:	2000      	movs	r0, #0
 8009822:	6360      	str	r0, [r4, #52]	; 0x34
 8009824:	e7bd      	b.n	80097a2 <__sflush_r+0x1a>
 8009826:	2301      	movs	r3, #1
 8009828:	0028      	movs	r0, r5
 800982a:	6a21      	ldr	r1, [r4, #32]
 800982c:	47b8      	blx	r7
 800982e:	1c43      	adds	r3, r0, #1
 8009830:	d1c5      	bne.n	80097be <__sflush_r+0x36>
 8009832:	682b      	ldr	r3, [r5, #0]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d0c2      	beq.n	80097be <__sflush_r+0x36>
 8009838:	2b1d      	cmp	r3, #29
 800983a:	d001      	beq.n	8009840 <__sflush_r+0xb8>
 800983c:	2b16      	cmp	r3, #22
 800983e:	d101      	bne.n	8009844 <__sflush_r+0xbc>
 8009840:	602e      	str	r6, [r5, #0]
 8009842:	e7ad      	b.n	80097a0 <__sflush_r+0x18>
 8009844:	2340      	movs	r3, #64	; 0x40
 8009846:	89a2      	ldrh	r2, [r4, #12]
 8009848:	4313      	orrs	r3, r2
 800984a:	81a3      	strh	r3, [r4, #12]
 800984c:	e7a9      	b.n	80097a2 <__sflush_r+0x1a>
 800984e:	2340      	movs	r3, #64	; 0x40
 8009850:	430b      	orrs	r3, r1
 8009852:	e7fa      	b.n	800984a <__sflush_r+0xc2>
 8009854:	690f      	ldr	r7, [r1, #16]
 8009856:	2f00      	cmp	r7, #0
 8009858:	d0a2      	beq.n	80097a0 <__sflush_r+0x18>
 800985a:	680a      	ldr	r2, [r1, #0]
 800985c:	600f      	str	r7, [r1, #0]
 800985e:	1bd2      	subs	r2, r2, r7
 8009860:	9201      	str	r2, [sp, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	079b      	lsls	r3, r3, #30
 8009866:	d100      	bne.n	800986a <__sflush_r+0xe2>
 8009868:	694a      	ldr	r2, [r1, #20]
 800986a:	60a2      	str	r2, [r4, #8]
 800986c:	9b01      	ldr	r3, [sp, #4]
 800986e:	2b00      	cmp	r3, #0
 8009870:	dc00      	bgt.n	8009874 <__sflush_r+0xec>
 8009872:	e795      	b.n	80097a0 <__sflush_r+0x18>
 8009874:	003a      	movs	r2, r7
 8009876:	0028      	movs	r0, r5
 8009878:	9b01      	ldr	r3, [sp, #4]
 800987a:	6a21      	ldr	r1, [r4, #32]
 800987c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800987e:	47b0      	blx	r6
 8009880:	2800      	cmp	r0, #0
 8009882:	dc06      	bgt.n	8009892 <__sflush_r+0x10a>
 8009884:	2340      	movs	r3, #64	; 0x40
 8009886:	2001      	movs	r0, #1
 8009888:	89a2      	ldrh	r2, [r4, #12]
 800988a:	4240      	negs	r0, r0
 800988c:	4313      	orrs	r3, r2
 800988e:	81a3      	strh	r3, [r4, #12]
 8009890:	e787      	b.n	80097a2 <__sflush_r+0x1a>
 8009892:	9b01      	ldr	r3, [sp, #4]
 8009894:	183f      	adds	r7, r7, r0
 8009896:	1a1b      	subs	r3, r3, r0
 8009898:	9301      	str	r3, [sp, #4]
 800989a:	e7e7      	b.n	800986c <__sflush_r+0xe4>
 800989c:	20400001 	.word	0x20400001

080098a0 <_fflush_r>:
 80098a0:	690b      	ldr	r3, [r1, #16]
 80098a2:	b570      	push	{r4, r5, r6, lr}
 80098a4:	0005      	movs	r5, r0
 80098a6:	000c      	movs	r4, r1
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d102      	bne.n	80098b2 <_fflush_r+0x12>
 80098ac:	2500      	movs	r5, #0
 80098ae:	0028      	movs	r0, r5
 80098b0:	bd70      	pop	{r4, r5, r6, pc}
 80098b2:	2800      	cmp	r0, #0
 80098b4:	d004      	beq.n	80098c0 <_fflush_r+0x20>
 80098b6:	6983      	ldr	r3, [r0, #24]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d101      	bne.n	80098c0 <_fflush_r+0x20>
 80098bc:	f7ff fb9e 	bl	8008ffc <__sinit>
 80098c0:	4b14      	ldr	r3, [pc, #80]	; (8009914 <_fflush_r+0x74>)
 80098c2:	429c      	cmp	r4, r3
 80098c4:	d11b      	bne.n	80098fe <_fflush_r+0x5e>
 80098c6:	686c      	ldr	r4, [r5, #4]
 80098c8:	220c      	movs	r2, #12
 80098ca:	5ea3      	ldrsh	r3, [r4, r2]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d0ed      	beq.n	80098ac <_fflush_r+0xc>
 80098d0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80098d2:	07d2      	lsls	r2, r2, #31
 80098d4:	d404      	bmi.n	80098e0 <_fflush_r+0x40>
 80098d6:	059b      	lsls	r3, r3, #22
 80098d8:	d402      	bmi.n	80098e0 <_fflush_r+0x40>
 80098da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098dc:	f7ff fc53 	bl	8009186 <__retarget_lock_acquire_recursive>
 80098e0:	0028      	movs	r0, r5
 80098e2:	0021      	movs	r1, r4
 80098e4:	f7ff ff50 	bl	8009788 <__sflush_r>
 80098e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80098ea:	0005      	movs	r5, r0
 80098ec:	07db      	lsls	r3, r3, #31
 80098ee:	d4de      	bmi.n	80098ae <_fflush_r+0xe>
 80098f0:	89a3      	ldrh	r3, [r4, #12]
 80098f2:	059b      	lsls	r3, r3, #22
 80098f4:	d4db      	bmi.n	80098ae <_fflush_r+0xe>
 80098f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098f8:	f7ff fc46 	bl	8009188 <__retarget_lock_release_recursive>
 80098fc:	e7d7      	b.n	80098ae <_fflush_r+0xe>
 80098fe:	4b06      	ldr	r3, [pc, #24]	; (8009918 <_fflush_r+0x78>)
 8009900:	429c      	cmp	r4, r3
 8009902:	d101      	bne.n	8009908 <_fflush_r+0x68>
 8009904:	68ac      	ldr	r4, [r5, #8]
 8009906:	e7df      	b.n	80098c8 <_fflush_r+0x28>
 8009908:	4b04      	ldr	r3, [pc, #16]	; (800991c <_fflush_r+0x7c>)
 800990a:	429c      	cmp	r4, r3
 800990c:	d1dc      	bne.n	80098c8 <_fflush_r+0x28>
 800990e:	68ec      	ldr	r4, [r5, #12]
 8009910:	e7da      	b.n	80098c8 <_fflush_r+0x28>
 8009912:	46c0      	nop			; (mov r8, r8)
 8009914:	0800a778 	.word	0x0800a778
 8009918:	0800a798 	.word	0x0800a798
 800991c:	0800a758 	.word	0x0800a758

08009920 <_lseek_r>:
 8009920:	b570      	push	{r4, r5, r6, lr}
 8009922:	0004      	movs	r4, r0
 8009924:	0008      	movs	r0, r1
 8009926:	0011      	movs	r1, r2
 8009928:	001a      	movs	r2, r3
 800992a:	2300      	movs	r3, #0
 800992c:	4d05      	ldr	r5, [pc, #20]	; (8009944 <_lseek_r+0x24>)
 800992e:	602b      	str	r3, [r5, #0]
 8009930:	f7f8 fe44 	bl	80025bc <_lseek>
 8009934:	1c43      	adds	r3, r0, #1
 8009936:	d103      	bne.n	8009940 <_lseek_r+0x20>
 8009938:	682b      	ldr	r3, [r5, #0]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d000      	beq.n	8009940 <_lseek_r+0x20>
 800993e:	6023      	str	r3, [r4, #0]
 8009940:	bd70      	pop	{r4, r5, r6, pc}
 8009942:	46c0      	nop			; (mov r8, r8)
 8009944:	20002864 	.word	0x20002864

08009948 <__swhatbuf_r>:
 8009948:	b570      	push	{r4, r5, r6, lr}
 800994a:	000e      	movs	r6, r1
 800994c:	001d      	movs	r5, r3
 800994e:	230e      	movs	r3, #14
 8009950:	5ec9      	ldrsh	r1, [r1, r3]
 8009952:	0014      	movs	r4, r2
 8009954:	b096      	sub	sp, #88	; 0x58
 8009956:	2900      	cmp	r1, #0
 8009958:	da08      	bge.n	800996c <__swhatbuf_r+0x24>
 800995a:	220c      	movs	r2, #12
 800995c:	5eb3      	ldrsh	r3, [r6, r2]
 800995e:	2200      	movs	r2, #0
 8009960:	602a      	str	r2, [r5, #0]
 8009962:	061b      	lsls	r3, r3, #24
 8009964:	d411      	bmi.n	800998a <__swhatbuf_r+0x42>
 8009966:	2380      	movs	r3, #128	; 0x80
 8009968:	00db      	lsls	r3, r3, #3
 800996a:	e00f      	b.n	800998c <__swhatbuf_r+0x44>
 800996c:	466a      	mov	r2, sp
 800996e:	f000 f90f 	bl	8009b90 <_fstat_r>
 8009972:	2800      	cmp	r0, #0
 8009974:	dbf1      	blt.n	800995a <__swhatbuf_r+0x12>
 8009976:	23f0      	movs	r3, #240	; 0xf0
 8009978:	9901      	ldr	r1, [sp, #4]
 800997a:	021b      	lsls	r3, r3, #8
 800997c:	4019      	ands	r1, r3
 800997e:	4b05      	ldr	r3, [pc, #20]	; (8009994 <__swhatbuf_r+0x4c>)
 8009980:	18c9      	adds	r1, r1, r3
 8009982:	424b      	negs	r3, r1
 8009984:	4159      	adcs	r1, r3
 8009986:	6029      	str	r1, [r5, #0]
 8009988:	e7ed      	b.n	8009966 <__swhatbuf_r+0x1e>
 800998a:	2340      	movs	r3, #64	; 0x40
 800998c:	2000      	movs	r0, #0
 800998e:	6023      	str	r3, [r4, #0]
 8009990:	b016      	add	sp, #88	; 0x58
 8009992:	bd70      	pop	{r4, r5, r6, pc}
 8009994:	ffffe000 	.word	0xffffe000

08009998 <__smakebuf_r>:
 8009998:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800999a:	2602      	movs	r6, #2
 800999c:	898b      	ldrh	r3, [r1, #12]
 800999e:	0005      	movs	r5, r0
 80099a0:	000c      	movs	r4, r1
 80099a2:	4233      	tst	r3, r6
 80099a4:	d006      	beq.n	80099b4 <__smakebuf_r+0x1c>
 80099a6:	0023      	movs	r3, r4
 80099a8:	3347      	adds	r3, #71	; 0x47
 80099aa:	6023      	str	r3, [r4, #0]
 80099ac:	6123      	str	r3, [r4, #16]
 80099ae:	2301      	movs	r3, #1
 80099b0:	6163      	str	r3, [r4, #20]
 80099b2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80099b4:	466a      	mov	r2, sp
 80099b6:	ab01      	add	r3, sp, #4
 80099b8:	f7ff ffc6 	bl	8009948 <__swhatbuf_r>
 80099bc:	9900      	ldr	r1, [sp, #0]
 80099be:	0007      	movs	r7, r0
 80099c0:	0028      	movs	r0, r5
 80099c2:	f7ff fc15 	bl	80091f0 <_malloc_r>
 80099c6:	2800      	cmp	r0, #0
 80099c8:	d108      	bne.n	80099dc <__smakebuf_r+0x44>
 80099ca:	220c      	movs	r2, #12
 80099cc:	5ea3      	ldrsh	r3, [r4, r2]
 80099ce:	059a      	lsls	r2, r3, #22
 80099d0:	d4ef      	bmi.n	80099b2 <__smakebuf_r+0x1a>
 80099d2:	2203      	movs	r2, #3
 80099d4:	4393      	bics	r3, r2
 80099d6:	431e      	orrs	r6, r3
 80099d8:	81a6      	strh	r6, [r4, #12]
 80099da:	e7e4      	b.n	80099a6 <__smakebuf_r+0xe>
 80099dc:	4b0f      	ldr	r3, [pc, #60]	; (8009a1c <__smakebuf_r+0x84>)
 80099de:	62ab      	str	r3, [r5, #40]	; 0x28
 80099e0:	2380      	movs	r3, #128	; 0x80
 80099e2:	89a2      	ldrh	r2, [r4, #12]
 80099e4:	6020      	str	r0, [r4, #0]
 80099e6:	4313      	orrs	r3, r2
 80099e8:	81a3      	strh	r3, [r4, #12]
 80099ea:	9b00      	ldr	r3, [sp, #0]
 80099ec:	6120      	str	r0, [r4, #16]
 80099ee:	6163      	str	r3, [r4, #20]
 80099f0:	9b01      	ldr	r3, [sp, #4]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d00d      	beq.n	8009a12 <__smakebuf_r+0x7a>
 80099f6:	0028      	movs	r0, r5
 80099f8:	230e      	movs	r3, #14
 80099fa:	5ee1      	ldrsh	r1, [r4, r3]
 80099fc:	f000 f8da 	bl	8009bb4 <_isatty_r>
 8009a00:	2800      	cmp	r0, #0
 8009a02:	d006      	beq.n	8009a12 <__smakebuf_r+0x7a>
 8009a04:	2203      	movs	r2, #3
 8009a06:	89a3      	ldrh	r3, [r4, #12]
 8009a08:	4393      	bics	r3, r2
 8009a0a:	001a      	movs	r2, r3
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	81a3      	strh	r3, [r4, #12]
 8009a12:	89a0      	ldrh	r0, [r4, #12]
 8009a14:	4307      	orrs	r7, r0
 8009a16:	81a7      	strh	r7, [r4, #12]
 8009a18:	e7cb      	b.n	80099b2 <__smakebuf_r+0x1a>
 8009a1a:	46c0      	nop			; (mov r8, r8)
 8009a1c:	08008f81 	.word	0x08008f81

08009a20 <__malloc_lock>:
 8009a20:	b510      	push	{r4, lr}
 8009a22:	4802      	ldr	r0, [pc, #8]	; (8009a2c <__malloc_lock+0xc>)
 8009a24:	f7ff fbaf 	bl	8009186 <__retarget_lock_acquire_recursive>
 8009a28:	bd10      	pop	{r4, pc}
 8009a2a:	46c0      	nop			; (mov r8, r8)
 8009a2c:	20002858 	.word	0x20002858

08009a30 <__malloc_unlock>:
 8009a30:	b510      	push	{r4, lr}
 8009a32:	4802      	ldr	r0, [pc, #8]	; (8009a3c <__malloc_unlock+0xc>)
 8009a34:	f7ff fba8 	bl	8009188 <__retarget_lock_release_recursive>
 8009a38:	bd10      	pop	{r4, pc}
 8009a3a:	46c0      	nop			; (mov r8, r8)
 8009a3c:	20002858 	.word	0x20002858

08009a40 <_free_r>:
 8009a40:	b570      	push	{r4, r5, r6, lr}
 8009a42:	0005      	movs	r5, r0
 8009a44:	2900      	cmp	r1, #0
 8009a46:	d010      	beq.n	8009a6a <_free_r+0x2a>
 8009a48:	1f0c      	subs	r4, r1, #4
 8009a4a:	6823      	ldr	r3, [r4, #0]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	da00      	bge.n	8009a52 <_free_r+0x12>
 8009a50:	18e4      	adds	r4, r4, r3
 8009a52:	0028      	movs	r0, r5
 8009a54:	f7ff ffe4 	bl	8009a20 <__malloc_lock>
 8009a58:	4a1d      	ldr	r2, [pc, #116]	; (8009ad0 <_free_r+0x90>)
 8009a5a:	6813      	ldr	r3, [r2, #0]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d105      	bne.n	8009a6c <_free_r+0x2c>
 8009a60:	6063      	str	r3, [r4, #4]
 8009a62:	6014      	str	r4, [r2, #0]
 8009a64:	0028      	movs	r0, r5
 8009a66:	f7ff ffe3 	bl	8009a30 <__malloc_unlock>
 8009a6a:	bd70      	pop	{r4, r5, r6, pc}
 8009a6c:	42a3      	cmp	r3, r4
 8009a6e:	d908      	bls.n	8009a82 <_free_r+0x42>
 8009a70:	6821      	ldr	r1, [r4, #0]
 8009a72:	1860      	adds	r0, r4, r1
 8009a74:	4283      	cmp	r3, r0
 8009a76:	d1f3      	bne.n	8009a60 <_free_r+0x20>
 8009a78:	6818      	ldr	r0, [r3, #0]
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	1841      	adds	r1, r0, r1
 8009a7e:	6021      	str	r1, [r4, #0]
 8009a80:	e7ee      	b.n	8009a60 <_free_r+0x20>
 8009a82:	001a      	movs	r2, r3
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d001      	beq.n	8009a8e <_free_r+0x4e>
 8009a8a:	42a3      	cmp	r3, r4
 8009a8c:	d9f9      	bls.n	8009a82 <_free_r+0x42>
 8009a8e:	6811      	ldr	r1, [r2, #0]
 8009a90:	1850      	adds	r0, r2, r1
 8009a92:	42a0      	cmp	r0, r4
 8009a94:	d10b      	bne.n	8009aae <_free_r+0x6e>
 8009a96:	6820      	ldr	r0, [r4, #0]
 8009a98:	1809      	adds	r1, r1, r0
 8009a9a:	1850      	adds	r0, r2, r1
 8009a9c:	6011      	str	r1, [r2, #0]
 8009a9e:	4283      	cmp	r3, r0
 8009aa0:	d1e0      	bne.n	8009a64 <_free_r+0x24>
 8009aa2:	6818      	ldr	r0, [r3, #0]
 8009aa4:	685b      	ldr	r3, [r3, #4]
 8009aa6:	1841      	adds	r1, r0, r1
 8009aa8:	6011      	str	r1, [r2, #0]
 8009aaa:	6053      	str	r3, [r2, #4]
 8009aac:	e7da      	b.n	8009a64 <_free_r+0x24>
 8009aae:	42a0      	cmp	r0, r4
 8009ab0:	d902      	bls.n	8009ab8 <_free_r+0x78>
 8009ab2:	230c      	movs	r3, #12
 8009ab4:	602b      	str	r3, [r5, #0]
 8009ab6:	e7d5      	b.n	8009a64 <_free_r+0x24>
 8009ab8:	6821      	ldr	r1, [r4, #0]
 8009aba:	1860      	adds	r0, r4, r1
 8009abc:	4283      	cmp	r3, r0
 8009abe:	d103      	bne.n	8009ac8 <_free_r+0x88>
 8009ac0:	6818      	ldr	r0, [r3, #0]
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	1841      	adds	r1, r0, r1
 8009ac6:	6021      	str	r1, [r4, #0]
 8009ac8:	6063      	str	r3, [r4, #4]
 8009aca:	6054      	str	r4, [r2, #4]
 8009acc:	e7ca      	b.n	8009a64 <_free_r+0x24>
 8009ace:	46c0      	nop			; (mov r8, r8)
 8009ad0:	2000285c 	.word	0x2000285c

08009ad4 <_putc_r>:
 8009ad4:	b570      	push	{r4, r5, r6, lr}
 8009ad6:	0006      	movs	r6, r0
 8009ad8:	000d      	movs	r5, r1
 8009ada:	0014      	movs	r4, r2
 8009adc:	2800      	cmp	r0, #0
 8009ade:	d004      	beq.n	8009aea <_putc_r+0x16>
 8009ae0:	6983      	ldr	r3, [r0, #24]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d101      	bne.n	8009aea <_putc_r+0x16>
 8009ae6:	f7ff fa89 	bl	8008ffc <__sinit>
 8009aea:	4b1c      	ldr	r3, [pc, #112]	; (8009b5c <_putc_r+0x88>)
 8009aec:	429c      	cmp	r4, r3
 8009aee:	d124      	bne.n	8009b3a <_putc_r+0x66>
 8009af0:	6874      	ldr	r4, [r6, #4]
 8009af2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009af4:	07db      	lsls	r3, r3, #31
 8009af6:	d405      	bmi.n	8009b04 <_putc_r+0x30>
 8009af8:	89a3      	ldrh	r3, [r4, #12]
 8009afa:	059b      	lsls	r3, r3, #22
 8009afc:	d402      	bmi.n	8009b04 <_putc_r+0x30>
 8009afe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b00:	f7ff fb41 	bl	8009186 <__retarget_lock_acquire_recursive>
 8009b04:	68a3      	ldr	r3, [r4, #8]
 8009b06:	3b01      	subs	r3, #1
 8009b08:	60a3      	str	r3, [r4, #8]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	da05      	bge.n	8009b1a <_putc_r+0x46>
 8009b0e:	69a2      	ldr	r2, [r4, #24]
 8009b10:	4293      	cmp	r3, r2
 8009b12:	db1c      	blt.n	8009b4e <_putc_r+0x7a>
 8009b14:	b2eb      	uxtb	r3, r5
 8009b16:	2b0a      	cmp	r3, #10
 8009b18:	d019      	beq.n	8009b4e <_putc_r+0x7a>
 8009b1a:	6823      	ldr	r3, [r4, #0]
 8009b1c:	1c5a      	adds	r2, r3, #1
 8009b1e:	6022      	str	r2, [r4, #0]
 8009b20:	701d      	strb	r5, [r3, #0]
 8009b22:	b2ed      	uxtb	r5, r5
 8009b24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b26:	07db      	lsls	r3, r3, #31
 8009b28:	d405      	bmi.n	8009b36 <_putc_r+0x62>
 8009b2a:	89a3      	ldrh	r3, [r4, #12]
 8009b2c:	059b      	lsls	r3, r3, #22
 8009b2e:	d402      	bmi.n	8009b36 <_putc_r+0x62>
 8009b30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b32:	f7ff fb29 	bl	8009188 <__retarget_lock_release_recursive>
 8009b36:	0028      	movs	r0, r5
 8009b38:	bd70      	pop	{r4, r5, r6, pc}
 8009b3a:	4b09      	ldr	r3, [pc, #36]	; (8009b60 <_putc_r+0x8c>)
 8009b3c:	429c      	cmp	r4, r3
 8009b3e:	d101      	bne.n	8009b44 <_putc_r+0x70>
 8009b40:	68b4      	ldr	r4, [r6, #8]
 8009b42:	e7d6      	b.n	8009af2 <_putc_r+0x1e>
 8009b44:	4b07      	ldr	r3, [pc, #28]	; (8009b64 <_putc_r+0x90>)
 8009b46:	429c      	cmp	r4, r3
 8009b48:	d1d3      	bne.n	8009af2 <_putc_r+0x1e>
 8009b4a:	68f4      	ldr	r4, [r6, #12]
 8009b4c:	e7d1      	b.n	8009af2 <_putc_r+0x1e>
 8009b4e:	0029      	movs	r1, r5
 8009b50:	0022      	movs	r2, r4
 8009b52:	0030      	movs	r0, r6
 8009b54:	f7ff fd24 	bl	80095a0 <__swbuf_r>
 8009b58:	0005      	movs	r5, r0
 8009b5a:	e7e3      	b.n	8009b24 <_putc_r+0x50>
 8009b5c:	0800a778 	.word	0x0800a778
 8009b60:	0800a798 	.word	0x0800a798
 8009b64:	0800a758 	.word	0x0800a758

08009b68 <_read_r>:
 8009b68:	b570      	push	{r4, r5, r6, lr}
 8009b6a:	0004      	movs	r4, r0
 8009b6c:	0008      	movs	r0, r1
 8009b6e:	0011      	movs	r1, r2
 8009b70:	001a      	movs	r2, r3
 8009b72:	2300      	movs	r3, #0
 8009b74:	4d05      	ldr	r5, [pc, #20]	; (8009b8c <_read_r+0x24>)
 8009b76:	602b      	str	r3, [r5, #0]
 8009b78:	f7f8 fcc6 	bl	8002508 <_read>
 8009b7c:	1c43      	adds	r3, r0, #1
 8009b7e:	d103      	bne.n	8009b88 <_read_r+0x20>
 8009b80:	682b      	ldr	r3, [r5, #0]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d000      	beq.n	8009b88 <_read_r+0x20>
 8009b86:	6023      	str	r3, [r4, #0]
 8009b88:	bd70      	pop	{r4, r5, r6, pc}
 8009b8a:	46c0      	nop			; (mov r8, r8)
 8009b8c:	20002864 	.word	0x20002864

08009b90 <_fstat_r>:
 8009b90:	2300      	movs	r3, #0
 8009b92:	b570      	push	{r4, r5, r6, lr}
 8009b94:	4d06      	ldr	r5, [pc, #24]	; (8009bb0 <_fstat_r+0x20>)
 8009b96:	0004      	movs	r4, r0
 8009b98:	0008      	movs	r0, r1
 8009b9a:	0011      	movs	r1, r2
 8009b9c:	602b      	str	r3, [r5, #0]
 8009b9e:	f7f8 fcf6 	bl	800258e <_fstat>
 8009ba2:	1c43      	adds	r3, r0, #1
 8009ba4:	d103      	bne.n	8009bae <_fstat_r+0x1e>
 8009ba6:	682b      	ldr	r3, [r5, #0]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d000      	beq.n	8009bae <_fstat_r+0x1e>
 8009bac:	6023      	str	r3, [r4, #0]
 8009bae:	bd70      	pop	{r4, r5, r6, pc}
 8009bb0:	20002864 	.word	0x20002864

08009bb4 <_isatty_r>:
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	b570      	push	{r4, r5, r6, lr}
 8009bb8:	4d06      	ldr	r5, [pc, #24]	; (8009bd4 <_isatty_r+0x20>)
 8009bba:	0004      	movs	r4, r0
 8009bbc:	0008      	movs	r0, r1
 8009bbe:	602b      	str	r3, [r5, #0]
 8009bc0:	f7f8 fcf3 	bl	80025aa <_isatty>
 8009bc4:	1c43      	adds	r3, r0, #1
 8009bc6:	d103      	bne.n	8009bd0 <_isatty_r+0x1c>
 8009bc8:	682b      	ldr	r3, [r5, #0]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d000      	beq.n	8009bd0 <_isatty_r+0x1c>
 8009bce:	6023      	str	r3, [r4, #0]
 8009bd0:	bd70      	pop	{r4, r5, r6, pc}
 8009bd2:	46c0      	nop			; (mov r8, r8)
 8009bd4:	20002864 	.word	0x20002864

08009bd8 <_init>:
 8009bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bda:	46c0      	nop			; (mov r8, r8)
 8009bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bde:	bc08      	pop	{r3}
 8009be0:	469e      	mov	lr, r3
 8009be2:	4770      	bx	lr

08009be4 <_fini>:
 8009be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009be6:	46c0      	nop			; (mov r8, r8)
 8009be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bea:	bc08      	pop	{r3}
 8009bec:	469e      	mov	lr, r3
 8009bee:	4770      	bx	lr
